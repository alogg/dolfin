// This code conforms with the UFC specification version 1.0
// and was automatically generated by FFC version 0.3.5.

#ifndef __ELASTICITYSTRAIN_H
#define __ELASTICITYSTRAIN_H

#include <ufc.h>

/// This class defines the interface for a finite element.

class ElasticityStrainBilinearForm_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  ElasticityStrainBilinearForm_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ElasticityStrainBilinearForm_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Mixed finite element: [Mixed finite element: [Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron], Mixed finite element: [Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron]]";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 24;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 6;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Not implemented
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // Not implemented
    return 0.0;
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
    vertex_values[4] = dof_values[4];
    vertex_values[5] = dof_values[5];
    vertex_values[6] = dof_values[6];
    vertex_values[7] = dof_values[7];
    vertex_values[8] = dof_values[8];
    vertex_values[9] = dof_values[9];
    vertex_values[10] = dof_values[10];
    vertex_values[11] = dof_values[11];
    vertex_values[12] = dof_values[12];
    vertex_values[13] = dof_values[13];
    vertex_values[14] = dof_values[14];
    vertex_values[15] = dof_values[15];
    vertex_values[16] = dof_values[16];
    vertex_values[17] = dof_values[17];
    vertex_values[18] = dof_values[18];
    vertex_values[19] = dof_values[19];
    vertex_values[20] = dof_values[20];
    vertex_values[21] = dof_values[21];
    vertex_values[22] = dof_values[22];
    vertex_values[23] = dof_values[23];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 2;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new ElasticityStrainBilinearForm_finite_element_0_sub_element_0();
      break;
    case 1:
      return new ElasticityStrainBilinearForm_finite_element_0_sub_element_1();
      break;
    }
    return 0;
  }

};

/// This class defines the interface for a finite element.

class ElasticityStrainBilinearForm_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  ElasticityStrainBilinearForm_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ElasticityStrainBilinearForm_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Mixed finite element: [Mixed finite element: [Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron], Mixed finite element: [Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron]]";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 24;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 6;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Not implemented
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // Not implemented
    return 0.0;
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
    vertex_values[4] = dof_values[4];
    vertex_values[5] = dof_values[5];
    vertex_values[6] = dof_values[6];
    vertex_values[7] = dof_values[7];
    vertex_values[8] = dof_values[8];
    vertex_values[9] = dof_values[9];
    vertex_values[10] = dof_values[10];
    vertex_values[11] = dof_values[11];
    vertex_values[12] = dof_values[12];
    vertex_values[13] = dof_values[13];
    vertex_values[14] = dof_values[14];
    vertex_values[15] = dof_values[15];
    vertex_values[16] = dof_values[16];
    vertex_values[17] = dof_values[17];
    vertex_values[18] = dof_values[18];
    vertex_values[19] = dof_values[19];
    vertex_values[20] = dof_values[20];
    vertex_values[21] = dof_values[21];
    vertex_values[22] = dof_values[22];
    vertex_values[23] = dof_values[23];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 2;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new ElasticityStrainBilinearForm_finite_element_1_sub_element_0();
      break;
    case 1:
      return new ElasticityStrainBilinearForm_finite_element_1_sub_element_1();
      break;
    }
    return 0;
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ElasticityStrainBilinearForm_dof_map_0: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  ElasticityStrainBilinearForm_dof_map_0() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~ElasticityStrainBilinearForm_dof_map_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for Mixed finite element: [Mixed finite element: [Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron], Mixed finite element: [Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron]]";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return false;
      break;
    case 2:
      return false;
      break;
    case 3:
      return false;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = 6*m.num_entities[0];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 24;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 18;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
    unsigned int offset = m.num_entities[0];
    dofs[4] = offset + c.entity_indices[0][0];
    dofs[5] = offset + c.entity_indices[0][1];
    dofs[6] = offset + c.entity_indices[0][2];
    dofs[7] = offset + c.entity_indices[0][3];
    offset = offset + m.num_entities[0];
    dofs[8] = offset + c.entity_indices[0][0];
    dofs[9] = offset + c.entity_indices[0][1];
    dofs[10] = offset + c.entity_indices[0][2];
    dofs[11] = offset + c.entity_indices[0][3];
    offset = offset + m.num_entities[0];
    dofs[12] = offset + c.entity_indices[0][0];
    dofs[13] = offset + c.entity_indices[0][1];
    dofs[14] = offset + c.entity_indices[0][2];
    dofs[15] = offset + c.entity_indices[0][3];
    offset = offset + m.num_entities[0];
    dofs[16] = offset + c.entity_indices[0][0];
    dofs[17] = offset + c.entity_indices[0][1];
    dofs[18] = offset + c.entity_indices[0][2];
    dofs[19] = offset + c.entity_indices[0][3];
    offset = offset + m.num_entities[0];
    dofs[20] = offset + c.entity_indices[0][0];
    dofs[21] = offset + c.entity_indices[0][1];
    dofs[22] = offset + c.entity_indices[0][2];
    dofs[23] = offset + c.entity_indices[0][3];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   const ufc::mesh& m,
                                   const ufc::cell& c,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 9;
      dofs[7] = 10;
      dofs[8] = 11;
      dofs[9] = 13;
      dofs[10] = 14;
      dofs[11] = 15;
      dofs[12] = 17;
      dofs[13] = 18;
      dofs[14] = 19;
      dofs[15] = 21;
      dofs[16] = 22;
      dofs[17] = 23;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 10;
      dofs[8] = 11;
      dofs[9] = 12;
      dofs[10] = 14;
      dofs[11] = 15;
      dofs[12] = 16;
      dofs[13] = 18;
      dofs[14] = 19;
      dofs[15] = 20;
      dofs[16] = 22;
      dofs[17] = 23;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 11;
      dofs[9] = 12;
      dofs[10] = 13;
      dofs[11] = 15;
      dofs[12] = 16;
      dofs[13] = 17;
      dofs[14] = 19;
      dofs[15] = 20;
      dofs[16] = 21;
      dofs[17] = 23;
      break;
    case 3:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 10;
      dofs[9] = 12;
      dofs[10] = 13;
      dofs[11] = 14;
      dofs[12] = 16;
      dofs[13] = 17;
      dofs[14] = 18;
      dofs[15] = 20;
      dofs[16] = 21;
      dofs[17] = 22;
      break;
    }
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double **coordinates,
                                    const ufc::mesh& m,
                                    const ufc::cell& c) const
  {
    // Not implemented
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    // Not implemented
    return 0;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    // Not implemented
    return 0;
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ElasticityStrainBilinearForm_dof_map_1: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  ElasticityStrainBilinearForm_dof_map_1() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~ElasticityStrainBilinearForm_dof_map_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for Mixed finite element: [Mixed finite element: [Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron], Mixed finite element: [Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron]]";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return false;
      break;
    case 2:
      return false;
      break;
    case 3:
      return false;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = 6*m.num_entities[0];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 24;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 18;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
    unsigned int offset = m.num_entities[0];
    dofs[4] = offset + c.entity_indices[0][0];
    dofs[5] = offset + c.entity_indices[0][1];
    dofs[6] = offset + c.entity_indices[0][2];
    dofs[7] = offset + c.entity_indices[0][3];
    offset = offset + m.num_entities[0];
    dofs[8] = offset + c.entity_indices[0][0];
    dofs[9] = offset + c.entity_indices[0][1];
    dofs[10] = offset + c.entity_indices[0][2];
    dofs[11] = offset + c.entity_indices[0][3];
    offset = offset + m.num_entities[0];
    dofs[12] = offset + c.entity_indices[0][0];
    dofs[13] = offset + c.entity_indices[0][1];
    dofs[14] = offset + c.entity_indices[0][2];
    dofs[15] = offset + c.entity_indices[0][3];
    offset = offset + m.num_entities[0];
    dofs[16] = offset + c.entity_indices[0][0];
    dofs[17] = offset + c.entity_indices[0][1];
    dofs[18] = offset + c.entity_indices[0][2];
    dofs[19] = offset + c.entity_indices[0][3];
    offset = offset + m.num_entities[0];
    dofs[20] = offset + c.entity_indices[0][0];
    dofs[21] = offset + c.entity_indices[0][1];
    dofs[22] = offset + c.entity_indices[0][2];
    dofs[23] = offset + c.entity_indices[0][3];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   const ufc::mesh& m,
                                   const ufc::cell& c,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 9;
      dofs[7] = 10;
      dofs[8] = 11;
      dofs[9] = 13;
      dofs[10] = 14;
      dofs[11] = 15;
      dofs[12] = 17;
      dofs[13] = 18;
      dofs[14] = 19;
      dofs[15] = 21;
      dofs[16] = 22;
      dofs[17] = 23;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 10;
      dofs[8] = 11;
      dofs[9] = 12;
      dofs[10] = 14;
      dofs[11] = 15;
      dofs[12] = 16;
      dofs[13] = 18;
      dofs[14] = 19;
      dofs[15] = 20;
      dofs[16] = 22;
      dofs[17] = 23;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 11;
      dofs[9] = 12;
      dofs[10] = 13;
      dofs[11] = 15;
      dofs[12] = 16;
      dofs[13] = 17;
      dofs[14] = 19;
      dofs[15] = 20;
      dofs[16] = 21;
      dofs[17] = 23;
      break;
    case 3:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 10;
      dofs[9] = 12;
      dofs[10] = 13;
      dofs[11] = 14;
      dofs[12] = 16;
      dofs[13] = 17;
      dofs[14] = 18;
      dofs[15] = 20;
      dofs[16] = 21;
      dofs[17] = 22;
      break;
    }
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double **coordinates,
                                    const ufc::mesh& m,
                                    const ufc::cell& c) const
  {
    // Not implemented
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    // Not implemented
    return 0;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    // Not implemented
    return 0;
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class ElasticityStrainBilinearForm_cell_integral_0: public ufc::cell_integral
{
public:

  /// Constructor
  ElasticityStrainBilinearForm_cell_integral_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ElasticityStrainBilinearForm_cell_integral_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
      
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    // const double d01 = J_12*J_20 - J_10*J_22;
    // const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    // const double d11 = J_00*J_22 - J_02*J_20;
    // const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    // const double d21 = J_02*J_10 - J_00*J_12;
    // const double d22 = J_00*J_11 - J_01*J_10;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
      
    // Compute inverse of Jacobian
    // const double Jinv_00 = d00 / detJ;
    // const double Jinv_01 = d10 / detJ;
    // const double Jinv_02 = d20 / detJ;
    // const double Jinv_10 = d01 / detJ;
    // const double Jinv_11 = d11 / detJ;
    // const double Jinv_12 = d21 / detJ;
    // const double Jinv_20 = d02 / detJ;
    // const double Jinv_21 = d12 / detJ;
    // const double Jinv_22 = d22 / detJ;
    
    // Take absolute value of determinant
    detJ = std::abs(detJ);
    
    // Set scale factor
    const double det = detJ;
    
    // Compute geometry tensors
    const double G0_ = det;
    const double G1_ = det;
    const double G2_ = det;
    const double G3_ = det;
    const double G4_ = det;
    const double G5_ = det;
    
    // Compute element tensor
    A[0] = 0.01666666666667*G0_;
    A[1] = 0.008333333333333*G0_;
    A[2] = 0.008333333333333*G0_;
    A[3] = 0.008333333333333*G0_;
    A[4] = 0;
    A[5] = 0;
    A[6] = 0;
    A[7] = 0;
    A[8] = 0;
    A[9] = 0;
    A[10] = 0;
    A[11] = 0;
    A[12] = 0;
    A[13] = 0;
    A[14] = 0;
    A[15] = 0;
    A[16] = 0;
    A[17] = 0;
    A[18] = 0;
    A[19] = 0;
    A[20] = 0;
    A[21] = 0;
    A[22] = 0;
    A[23] = 0;
    A[24] = 0.008333333333333*G0_;
    A[25] = 0.01666666666667*G0_;
    A[26] = 0.008333333333333*G0_;
    A[27] = 0.008333333333333*G0_;
    A[28] = 0;
    A[29] = 0;
    A[30] = 0;
    A[31] = 0;
    A[32] = 0;
    A[33] = 0;
    A[34] = 0;
    A[35] = 0;
    A[36] = 0;
    A[37] = 0;
    A[38] = 0;
    A[39] = 0;
    A[40] = 0;
    A[41] = 0;
    A[42] = 0;
    A[43] = 0;
    A[44] = 0;
    A[45] = 0;
    A[46] = 0;
    A[47] = 0;
    A[48] = 0.008333333333333*G0_;
    A[49] = 0.008333333333333*G0_;
    A[50] = 0.01666666666667*G0_;
    A[51] = 0.008333333333333*G0_;
    A[52] = 0;
    A[53] = 0;
    A[54] = 0;
    A[55] = 0;
    A[56] = 0;
    A[57] = 0;
    A[58] = 0;
    A[59] = 0;
    A[60] = 0;
    A[61] = 0;
    A[62] = 0;
    A[63] = 0;
    A[64] = 0;
    A[65] = 0;
    A[66] = 0;
    A[67] = 0;
    A[68] = 0;
    A[69] = 0;
    A[70] = 0;
    A[71] = 0;
    A[72] = 0.008333333333333*G0_;
    A[73] = 0.008333333333333*G0_;
    A[74] = 0.008333333333333*G0_;
    A[75] = 0.01666666666667*G0_;
    A[76] = 0;
    A[77] = 0;
    A[78] = 0;
    A[79] = 0;
    A[80] = 0;
    A[81] = 0;
    A[82] = 0;
    A[83] = 0;
    A[84] = 0;
    A[85] = 0;
    A[86] = 0;
    A[87] = 0;
    A[88] = 0;
    A[89] = 0;
    A[90] = 0;
    A[91] = 0;
    A[92] = 0;
    A[93] = 0;
    A[94] = 0;
    A[95] = 0;
    A[96] = 0;
    A[97] = 0;
    A[98] = 0;
    A[99] = 0;
    A[100] = 0.01666666666667*G1_;
    A[101] = 0.008333333333333*G1_;
    A[102] = 0.008333333333333*G1_;
    A[103] = 0.008333333333333*G1_;
    A[104] = 0;
    A[105] = 0;
    A[106] = 0;
    A[107] = 0;
    A[108] = 0;
    A[109] = 0;
    A[110] = 0;
    A[111] = 0;
    A[112] = 0;
    A[113] = 0;
    A[114] = 0;
    A[115] = 0;
    A[116] = 0;
    A[117] = 0;
    A[118] = 0;
    A[119] = 0;
    A[120] = 0;
    A[121] = 0;
    A[122] = 0;
    A[123] = 0;
    A[124] = 0.008333333333333*G1_;
    A[125] = 0.01666666666667*G1_;
    A[126] = 0.008333333333333*G1_;
    A[127] = 0.008333333333333*G1_;
    A[128] = 0;
    A[129] = 0;
    A[130] = 0;
    A[131] = 0;
    A[132] = 0;
    A[133] = 0;
    A[134] = 0;
    A[135] = 0;
    A[136] = 0;
    A[137] = 0;
    A[138] = 0;
    A[139] = 0;
    A[140] = 0;
    A[141] = 0;
    A[142] = 0;
    A[143] = 0;
    A[144] = 0;
    A[145] = 0;
    A[146] = 0;
    A[147] = 0;
    A[148] = 0.008333333333333*G1_;
    A[149] = 0.008333333333333*G1_;
    A[150] = 0.01666666666667*G1_;
    A[151] = 0.008333333333333*G1_;
    A[152] = 0;
    A[153] = 0;
    A[154] = 0;
    A[155] = 0;
    A[156] = 0;
    A[157] = 0;
    A[158] = 0;
    A[159] = 0;
    A[160] = 0;
    A[161] = 0;
    A[162] = 0;
    A[163] = 0;
    A[164] = 0;
    A[165] = 0;
    A[166] = 0;
    A[167] = 0;
    A[168] = 0;
    A[169] = 0;
    A[170] = 0;
    A[171] = 0;
    A[172] = 0.008333333333333*G1_;
    A[173] = 0.008333333333333*G1_;
    A[174] = 0.008333333333333*G1_;
    A[175] = 0.01666666666667*G1_;
    A[176] = 0;
    A[177] = 0;
    A[178] = 0;
    A[179] = 0;
    A[180] = 0;
    A[181] = 0;
    A[182] = 0;
    A[183] = 0;
    A[184] = 0;
    A[185] = 0;
    A[186] = 0;
    A[187] = 0;
    A[188] = 0;
    A[189] = 0;
    A[190] = 0;
    A[191] = 0;
    A[192] = 0;
    A[193] = 0;
    A[194] = 0;
    A[195] = 0;
    A[196] = 0;
    A[197] = 0;
    A[198] = 0;
    A[199] = 0;
    A[200] = 0.01666666666667*G2_;
    A[201] = 0.008333333333333*G2_;
    A[202] = 0.008333333333333*G2_;
    A[203] = 0.008333333333333*G2_;
    A[204] = 0;
    A[205] = 0;
    A[206] = 0;
    A[207] = 0;
    A[208] = 0;
    A[209] = 0;
    A[210] = 0;
    A[211] = 0;
    A[212] = 0;
    A[213] = 0;
    A[214] = 0;
    A[215] = 0;
    A[216] = 0;
    A[217] = 0;
    A[218] = 0;
    A[219] = 0;
    A[220] = 0;
    A[221] = 0;
    A[222] = 0;
    A[223] = 0;
    A[224] = 0.008333333333333*G2_;
    A[225] = 0.01666666666667*G2_;
    A[226] = 0.008333333333333*G2_;
    A[227] = 0.008333333333333*G2_;
    A[228] = 0;
    A[229] = 0;
    A[230] = 0;
    A[231] = 0;
    A[232] = 0;
    A[233] = 0;
    A[234] = 0;
    A[235] = 0;
    A[236] = 0;
    A[237] = 0;
    A[238] = 0;
    A[239] = 0;
    A[240] = 0;
    A[241] = 0;
    A[242] = 0;
    A[243] = 0;
    A[244] = 0;
    A[245] = 0;
    A[246] = 0;
    A[247] = 0;
    A[248] = 0.008333333333333*G2_;
    A[249] = 0.008333333333333*G2_;
    A[250] = 0.01666666666667*G2_;
    A[251] = 0.008333333333333*G2_;
    A[252] = 0;
    A[253] = 0;
    A[254] = 0;
    A[255] = 0;
    A[256] = 0;
    A[257] = 0;
    A[258] = 0;
    A[259] = 0;
    A[260] = 0;
    A[261] = 0;
    A[262] = 0;
    A[263] = 0;
    A[264] = 0;
    A[265] = 0;
    A[266] = 0;
    A[267] = 0;
    A[268] = 0;
    A[269] = 0;
    A[270] = 0;
    A[271] = 0;
    A[272] = 0.008333333333333*G2_;
    A[273] = 0.008333333333333*G2_;
    A[274] = 0.008333333333333*G2_;
    A[275] = 0.01666666666667*G2_;
    A[276] = 0;
    A[277] = 0;
    A[278] = 0;
    A[279] = 0;
    A[280] = 0;
    A[281] = 0;
    A[282] = 0;
    A[283] = 0;
    A[284] = 0;
    A[285] = 0;
    A[286] = 0;
    A[287] = 0;
    A[288] = 0;
    A[289] = 0;
    A[290] = 0;
    A[291] = 0;
    A[292] = 0;
    A[293] = 0;
    A[294] = 0;
    A[295] = 0;
    A[296] = 0;
    A[297] = 0;
    A[298] = 0;
    A[299] = 0;
    A[300] = 0.01666666666667*G3_;
    A[301] = 0.008333333333333*G3_;
    A[302] = 0.008333333333333*G3_;
    A[303] = 0.008333333333333*G3_;
    A[304] = 0;
    A[305] = 0;
    A[306] = 0;
    A[307] = 0;
    A[308] = 0;
    A[309] = 0;
    A[310] = 0;
    A[311] = 0;
    A[312] = 0;
    A[313] = 0;
    A[314] = 0;
    A[315] = 0;
    A[316] = 0;
    A[317] = 0;
    A[318] = 0;
    A[319] = 0;
    A[320] = 0;
    A[321] = 0;
    A[322] = 0;
    A[323] = 0;
    A[324] = 0.008333333333333*G3_;
    A[325] = 0.01666666666667*G3_;
    A[326] = 0.008333333333333*G3_;
    A[327] = 0.008333333333333*G3_;
    A[328] = 0;
    A[329] = 0;
    A[330] = 0;
    A[331] = 0;
    A[332] = 0;
    A[333] = 0;
    A[334] = 0;
    A[335] = 0;
    A[336] = 0;
    A[337] = 0;
    A[338] = 0;
    A[339] = 0;
    A[340] = 0;
    A[341] = 0;
    A[342] = 0;
    A[343] = 0;
    A[344] = 0;
    A[345] = 0;
    A[346] = 0;
    A[347] = 0;
    A[348] = 0.008333333333333*G3_;
    A[349] = 0.008333333333333*G3_;
    A[350] = 0.01666666666667*G3_;
    A[351] = 0.008333333333333*G3_;
    A[352] = 0;
    A[353] = 0;
    A[354] = 0;
    A[355] = 0;
    A[356] = 0;
    A[357] = 0;
    A[358] = 0;
    A[359] = 0;
    A[360] = 0;
    A[361] = 0;
    A[362] = 0;
    A[363] = 0;
    A[364] = 0;
    A[365] = 0;
    A[366] = 0;
    A[367] = 0;
    A[368] = 0;
    A[369] = 0;
    A[370] = 0;
    A[371] = 0;
    A[372] = 0.008333333333333*G3_;
    A[373] = 0.008333333333333*G3_;
    A[374] = 0.008333333333333*G3_;
    A[375] = 0.01666666666667*G3_;
    A[376] = 0;
    A[377] = 0;
    A[378] = 0;
    A[379] = 0;
    A[380] = 0;
    A[381] = 0;
    A[382] = 0;
    A[383] = 0;
    A[384] = 0;
    A[385] = 0;
    A[386] = 0;
    A[387] = 0;
    A[388] = 0;
    A[389] = 0;
    A[390] = 0;
    A[391] = 0;
    A[392] = 0;
    A[393] = 0;
    A[394] = 0;
    A[395] = 0;
    A[396] = 0;
    A[397] = 0;
    A[398] = 0;
    A[399] = 0;
    A[400] = 0.01666666666667*G4_;
    A[401] = 0.008333333333333*G4_;
    A[402] = 0.008333333333333*G4_;
    A[403] = 0.008333333333333*G4_;
    A[404] = 0;
    A[405] = 0;
    A[406] = 0;
    A[407] = 0;
    A[408] = 0;
    A[409] = 0;
    A[410] = 0;
    A[411] = 0;
    A[412] = 0;
    A[413] = 0;
    A[414] = 0;
    A[415] = 0;
    A[416] = 0;
    A[417] = 0;
    A[418] = 0;
    A[419] = 0;
    A[420] = 0;
    A[421] = 0;
    A[422] = 0;
    A[423] = 0;
    A[424] = 0.008333333333333*G4_;
    A[425] = 0.01666666666667*G4_;
    A[426] = 0.008333333333333*G4_;
    A[427] = 0.008333333333333*G4_;
    A[428] = 0;
    A[429] = 0;
    A[430] = 0;
    A[431] = 0;
    A[432] = 0;
    A[433] = 0;
    A[434] = 0;
    A[435] = 0;
    A[436] = 0;
    A[437] = 0;
    A[438] = 0;
    A[439] = 0;
    A[440] = 0;
    A[441] = 0;
    A[442] = 0;
    A[443] = 0;
    A[444] = 0;
    A[445] = 0;
    A[446] = 0;
    A[447] = 0;
    A[448] = 0.008333333333333*G4_;
    A[449] = 0.008333333333333*G4_;
    A[450] = 0.01666666666667*G4_;
    A[451] = 0.008333333333333*G4_;
    A[452] = 0;
    A[453] = 0;
    A[454] = 0;
    A[455] = 0;
    A[456] = 0;
    A[457] = 0;
    A[458] = 0;
    A[459] = 0;
    A[460] = 0;
    A[461] = 0;
    A[462] = 0;
    A[463] = 0;
    A[464] = 0;
    A[465] = 0;
    A[466] = 0;
    A[467] = 0;
    A[468] = 0;
    A[469] = 0;
    A[470] = 0;
    A[471] = 0;
    A[472] = 0.008333333333333*G4_;
    A[473] = 0.008333333333333*G4_;
    A[474] = 0.008333333333333*G4_;
    A[475] = 0.01666666666667*G4_;
    A[476] = 0;
    A[477] = 0;
    A[478] = 0;
    A[479] = 0;
    A[480] = 0;
    A[481] = 0;
    A[482] = 0;
    A[483] = 0;
    A[484] = 0;
    A[485] = 0;
    A[486] = 0;
    A[487] = 0;
    A[488] = 0;
    A[489] = 0;
    A[490] = 0;
    A[491] = 0;
    A[492] = 0;
    A[493] = 0;
    A[494] = 0;
    A[495] = 0;
    A[496] = 0;
    A[497] = 0;
    A[498] = 0;
    A[499] = 0;
    A[500] = 0.01666666666667*G5_;
    A[501] = 0.008333333333333*G5_;
    A[502] = 0.008333333333333*G5_;
    A[503] = 0.008333333333333*G5_;
    A[504] = 0;
    A[505] = 0;
    A[506] = 0;
    A[507] = 0;
    A[508] = 0;
    A[509] = 0;
    A[510] = 0;
    A[511] = 0;
    A[512] = 0;
    A[513] = 0;
    A[514] = 0;
    A[515] = 0;
    A[516] = 0;
    A[517] = 0;
    A[518] = 0;
    A[519] = 0;
    A[520] = 0;
    A[521] = 0;
    A[522] = 0;
    A[523] = 0;
    A[524] = 0.008333333333333*G5_;
    A[525] = 0.01666666666667*G5_;
    A[526] = 0.008333333333333*G5_;
    A[527] = 0.008333333333333*G5_;
    A[528] = 0;
    A[529] = 0;
    A[530] = 0;
    A[531] = 0;
    A[532] = 0;
    A[533] = 0;
    A[534] = 0;
    A[535] = 0;
    A[536] = 0;
    A[537] = 0;
    A[538] = 0;
    A[539] = 0;
    A[540] = 0;
    A[541] = 0;
    A[542] = 0;
    A[543] = 0;
    A[544] = 0;
    A[545] = 0;
    A[546] = 0;
    A[547] = 0;
    A[548] = 0.008333333333333*G5_;
    A[549] = 0.008333333333333*G5_;
    A[550] = 0.01666666666667*G5_;
    A[551] = 0.008333333333333*G5_;
    A[552] = 0;
    A[553] = 0;
    A[554] = 0;
    A[555] = 0;
    A[556] = 0;
    A[557] = 0;
    A[558] = 0;
    A[559] = 0;
    A[560] = 0;
    A[561] = 0;
    A[562] = 0;
    A[563] = 0;
    A[564] = 0;
    A[565] = 0;
    A[566] = 0;
    A[567] = 0;
    A[568] = 0;
    A[569] = 0;
    A[570] = 0;
    A[571] = 0;
    A[572] = 0.008333333333333*G5_;
    A[573] = 0.008333333333333*G5_;
    A[574] = 0.008333333333333*G5_;
    A[575] = 0.01666666666667*G5_;
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class ElasticityStrainBilinearForm: public ufc::form
{
public:

  /// Constructor
  ElasticityStrainBilinearForm() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ElasticityStrainBilinearForm()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "|det F'| | vi0[0]*vi1[0]*dX(0) + |det F'| | vi0[1]*vi1[1]*dX(0) + |det F'| | vi0[2]*vi1[2]*dX(0) + |det F'| | vi0[3]*vi1[3]*dX(0) + |det F'| | vi0[4]*vi1[4]*dX(0) + |det F'| | vi0[5]*vi1[5]*dX(0)";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 2;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 0;
  }

  /// Return the number of cell integrals
  virtual unsigned int num_cell_integrals() const
  {
    return 1;
  }
  
  /// Return the number of exterior facet integrals
  virtual unsigned int num_exterior_facet_integrals() const
  {
    return 0;
  }
  
  /// Return the number of interior facet integrals
  virtual unsigned int num_interior_facet_integrals() const
  {
    return 0;
  }
    
  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new ElasticityStrainBilinearForm_finite_element_0();
      break;
    case 1:
      return new ElasticityStrainBilinearForm_finite_element_1();
      break;
    }
    return 0;
  }
  
  /// Create a new dof map for argument function i
  virtual ufc::dof_map* create_dof_map(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new ElasticityStrainBilinearForm_dof_map_0();
      break;
    case 1:
      return new ElasticityStrainBilinearForm_dof_map_1();
      break;
    }
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    return new ElasticityStrainBilinearForm_cell_integral_0();
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

/// This class defines the interface for a finite element.

class ElasticityStrainLinearForm_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  ElasticityStrainLinearForm_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ElasticityStrainLinearForm_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Mixed finite element: [Mixed finite element: [Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron], Mixed finite element: [Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron]]";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 24;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 6;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Not implemented
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // Not implemented
    return 0.0;
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
    vertex_values[4] = dof_values[4];
    vertex_values[5] = dof_values[5];
    vertex_values[6] = dof_values[6];
    vertex_values[7] = dof_values[7];
    vertex_values[8] = dof_values[8];
    vertex_values[9] = dof_values[9];
    vertex_values[10] = dof_values[10];
    vertex_values[11] = dof_values[11];
    vertex_values[12] = dof_values[12];
    vertex_values[13] = dof_values[13];
    vertex_values[14] = dof_values[14];
    vertex_values[15] = dof_values[15];
    vertex_values[16] = dof_values[16];
    vertex_values[17] = dof_values[17];
    vertex_values[18] = dof_values[18];
    vertex_values[19] = dof_values[19];
    vertex_values[20] = dof_values[20];
    vertex_values[21] = dof_values[21];
    vertex_values[22] = dof_values[22];
    vertex_values[23] = dof_values[23];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 2;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new ElasticityStrainLinearForm_finite_element_0_sub_element_0();
      break;
    case 1:
      return new ElasticityStrainLinearForm_finite_element_0_sub_element_1();
      break;
    }
    return 0;
  }

};

/// This class defines the interface for a finite element.

class ElasticityStrainLinearForm_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  ElasticityStrainLinearForm_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ElasticityStrainLinearForm_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Mixed finite element: [Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron]";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 12;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 3;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Not implemented
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    double values[3];
    double coordinates[3];
    
    // Nodal coordinates on reference cell
    static double X[12][3] = {{0, 0, 0}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}, {0, 0, 0}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}, {0, 0, 0}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}};
    
    // Components for each dof
    static unsigned int components[12] = {0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0] - X[i][1] - X[i][2];
    const double w1 = X[i][0];
    const double w2 = X[i][1];
    const double w3 = X[i][2];
    
    // Compute affine mapping x = F(X)
    coordinates[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    coordinates[0] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    coordinates[0] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at coordinates
    f.evaluate(values, coordinates, c);
    
    // Pick component for evaluation
    return values[components[i]];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
    vertex_values[4] = dof_values[4];
    vertex_values[5] = dof_values[5];
    vertex_values[6] = dof_values[6];
    vertex_values[7] = dof_values[7];
    vertex_values[8] = dof_values[8];
    vertex_values[9] = dof_values[9];
    vertex_values[10] = dof_values[10];
    vertex_values[11] = dof_values[11];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 3;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new ElasticityStrainLinearForm_finite_element_1_sub_element_0();
      break;
    case 1:
      return new ElasticityStrainLinearForm_finite_element_1_sub_element_1();
      break;
    case 2:
      return new ElasticityStrainLinearForm_finite_element_1_sub_element_2();
      break;
    }
    return 0;
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ElasticityStrainLinearForm_dof_map_0: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  ElasticityStrainLinearForm_dof_map_0() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~ElasticityStrainLinearForm_dof_map_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for Mixed finite element: [Mixed finite element: [Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron], Mixed finite element: [Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron]]";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return false;
      break;
    case 2:
      return false;
      break;
    case 3:
      return false;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = 6*m.num_entities[0];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 24;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 18;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
    unsigned int offset = m.num_entities[0];
    dofs[4] = offset + c.entity_indices[0][0];
    dofs[5] = offset + c.entity_indices[0][1];
    dofs[6] = offset + c.entity_indices[0][2];
    dofs[7] = offset + c.entity_indices[0][3];
    offset = offset + m.num_entities[0];
    dofs[8] = offset + c.entity_indices[0][0];
    dofs[9] = offset + c.entity_indices[0][1];
    dofs[10] = offset + c.entity_indices[0][2];
    dofs[11] = offset + c.entity_indices[0][3];
    offset = offset + m.num_entities[0];
    dofs[12] = offset + c.entity_indices[0][0];
    dofs[13] = offset + c.entity_indices[0][1];
    dofs[14] = offset + c.entity_indices[0][2];
    dofs[15] = offset + c.entity_indices[0][3];
    offset = offset + m.num_entities[0];
    dofs[16] = offset + c.entity_indices[0][0];
    dofs[17] = offset + c.entity_indices[0][1];
    dofs[18] = offset + c.entity_indices[0][2];
    dofs[19] = offset + c.entity_indices[0][3];
    offset = offset + m.num_entities[0];
    dofs[20] = offset + c.entity_indices[0][0];
    dofs[21] = offset + c.entity_indices[0][1];
    dofs[22] = offset + c.entity_indices[0][2];
    dofs[23] = offset + c.entity_indices[0][3];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   const ufc::mesh& m,
                                   const ufc::cell& c,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 9;
      dofs[7] = 10;
      dofs[8] = 11;
      dofs[9] = 13;
      dofs[10] = 14;
      dofs[11] = 15;
      dofs[12] = 17;
      dofs[13] = 18;
      dofs[14] = 19;
      dofs[15] = 21;
      dofs[16] = 22;
      dofs[17] = 23;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 10;
      dofs[8] = 11;
      dofs[9] = 12;
      dofs[10] = 14;
      dofs[11] = 15;
      dofs[12] = 16;
      dofs[13] = 18;
      dofs[14] = 19;
      dofs[15] = 20;
      dofs[16] = 22;
      dofs[17] = 23;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 11;
      dofs[9] = 12;
      dofs[10] = 13;
      dofs[11] = 15;
      dofs[12] = 16;
      dofs[13] = 17;
      dofs[14] = 19;
      dofs[15] = 20;
      dofs[16] = 21;
      dofs[17] = 23;
      break;
    case 3:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 10;
      dofs[9] = 12;
      dofs[10] = 13;
      dofs[11] = 14;
      dofs[12] = 16;
      dofs[13] = 17;
      dofs[14] = 18;
      dofs[15] = 20;
      dofs[16] = 21;
      dofs[17] = 22;
      break;
    }
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double **coordinates,
                                    const ufc::mesh& m,
                                    const ufc::cell& c) const
  {
    // Not implemented
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    // Not implemented
    return 0;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    // Not implemented
    return 0;
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ElasticityStrainLinearForm_dof_map_1: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  ElasticityStrainLinearForm_dof_map_1() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~ElasticityStrainLinearForm_dof_map_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for Mixed finite element: [Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron]";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return false;
      break;
    case 2:
      return false;
      break;
    case 3:
      return false;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = 3*m.num_entities[0];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 12;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 9;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
    unsigned int offset = m.num_entities[0];
    dofs[4] = offset + c.entity_indices[0][0];
    dofs[5] = offset + c.entity_indices[0][1];
    dofs[6] = offset + c.entity_indices[0][2];
    dofs[7] = offset + c.entity_indices[0][3];
    offset = offset + m.num_entities[0];
    dofs[8] = offset + c.entity_indices[0][0];
    dofs[9] = offset + c.entity_indices[0][1];
    dofs[10] = offset + c.entity_indices[0][2];
    dofs[11] = offset + c.entity_indices[0][3];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   const ufc::mesh& m,
                                   const ufc::cell& c,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 9;
      dofs[7] = 10;
      dofs[8] = 11;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 10;
      dofs[8] = 11;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 11;
      break;
    case 3:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 10;
      break;
    }
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double **coordinates,
                                    const ufc::mesh& m,
                                    const ufc::cell& c) const
  {
    // Not implemented
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    // Not implemented
    return 0;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    // Not implemented
    return 0;
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class ElasticityStrainLinearForm_cell_integral_0: public ufc::cell_integral
{
public:

  /// Constructor
  ElasticityStrainLinearForm_cell_integral_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ElasticityStrainLinearForm_cell_integral_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
      
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    const double d01 = J_12*J_20 - J_10*J_22;
    const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    const double d11 = J_00*J_22 - J_02*J_20;
    const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    const double d21 = J_02*J_10 - J_00*J_12;
    const double d22 = J_00*J_11 - J_01*J_10;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
      
    // Compute inverse of Jacobian
    const double Jinv_00 = d00 / detJ;
    const double Jinv_01 = d10 / detJ;
    const double Jinv_02 = d20 / detJ;
    const double Jinv_10 = d01 / detJ;
    const double Jinv_11 = d11 / detJ;
    const double Jinv_12 = d21 / detJ;
    const double Jinv_20 = d02 / detJ;
    const double Jinv_21 = d12 / detJ;
    const double Jinv_22 = d22 / detJ;
    
    // Take absolute value of determinant
    detJ = std::abs(detJ);
    
    // Set scale factor
    const double det = detJ;
    
    // Compute geometry tensors
    const double G0_0_0 = det*w[0][0]*Jinv_00;
    const double G0_0_1 = det*w[0][0]*Jinv_10;
    const double G0_0_2 = det*w[0][0]*Jinv_20;
    const double G0_1_0 = det*w[0][1]*Jinv_00;
    // const double G0_1_1 = det*w[0][1]*Jinv_10;
    // const double G0_1_2 = det*w[0][1]*Jinv_20;
    // const double G0_2_0 = det*w[0][2]*Jinv_00;
    const double G0_2_1 = det*w[0][2]*Jinv_10;
    // const double G0_2_2 = det*w[0][2]*Jinv_20;
    // const double G0_3_0 = det*w[0][3]*Jinv_00;
    // const double G0_3_1 = det*w[0][3]*Jinv_10;
    const double G0_3_2 = det*w[0][3]*Jinv_20;
    // const double G0_4_0 = det*w[0][4]*Jinv_00;
    // const double G0_4_1 = det*w[0][4]*Jinv_10;
    // const double G0_4_2 = det*w[0][4]*Jinv_20;
    // const double G0_5_0 = det*w[0][5]*Jinv_00;
    // const double G0_5_1 = det*w[0][5]*Jinv_10;
    // const double G0_5_2 = det*w[0][5]*Jinv_20;
    // const double G0_6_0 = det*w[0][6]*Jinv_00;
    // const double G0_6_1 = det*w[0][6]*Jinv_10;
    // const double G0_6_2 = det*w[0][6]*Jinv_20;
    // const double G0_7_0 = det*w[0][7]*Jinv_00;
    // const double G0_7_1 = det*w[0][7]*Jinv_10;
    // const double G0_7_2 = det*w[0][7]*Jinv_20;
    // const double G0_8_0 = det*w[0][8]*Jinv_00;
    // const double G0_8_1 = det*w[0][8]*Jinv_10;
    // const double G0_8_2 = det*w[0][8]*Jinv_20;
    // const double G0_9_0 = det*w[0][9]*Jinv_00;
    // const double G0_9_1 = det*w[0][9]*Jinv_10;
    // const double G0_9_2 = det*w[0][9]*Jinv_20;
    // const double G0_10_0 = det*w[0][10]*Jinv_00;
    // const double G0_10_1 = det*w[0][10]*Jinv_10;
    // const double G0_10_2 = det*w[0][10]*Jinv_20;
    // const double G0_11_0 = det*w[0][11]*Jinv_00;
    // const double G0_11_1 = det*w[0][11]*Jinv_10;
    // const double G0_11_2 = det*w[0][11]*Jinv_20;
    // const double G1_0_0 = det*w[0][0]*Jinv_01;
    // const double G1_0_1 = det*w[0][0]*Jinv_11;
    // const double G1_0_2 = det*w[0][0]*Jinv_21;
    // const double G1_1_0 = det*w[0][1]*Jinv_01;
    // const double G1_1_1 = det*w[0][1]*Jinv_11;
    // const double G1_1_2 = det*w[0][1]*Jinv_21;
    // const double G1_2_0 = det*w[0][2]*Jinv_01;
    // const double G1_2_1 = det*w[0][2]*Jinv_11;
    // const double G1_2_2 = det*w[0][2]*Jinv_21;
    // const double G1_3_0 = det*w[0][3]*Jinv_01;
    // const double G1_3_1 = det*w[0][3]*Jinv_11;
    // const double G1_3_2 = det*w[0][3]*Jinv_21;
    const double G1_4_0 = det*w[0][4]*Jinv_01;
    const double G1_4_1 = det*w[0][4]*Jinv_11;
    const double G1_4_2 = det*w[0][4]*Jinv_21;
    const double G1_5_0 = det*w[0][5]*Jinv_01;
    // const double G1_5_1 = det*w[0][5]*Jinv_11;
    // const double G1_5_2 = det*w[0][5]*Jinv_21;
    // const double G1_6_0 = det*w[0][6]*Jinv_01;
    const double G1_6_1 = det*w[0][6]*Jinv_11;
    // const double G1_6_2 = det*w[0][6]*Jinv_21;
    // const double G1_7_0 = det*w[0][7]*Jinv_01;
    // const double G1_7_1 = det*w[0][7]*Jinv_11;
    const double G1_7_2 = det*w[0][7]*Jinv_21;
    // const double G1_8_0 = det*w[0][8]*Jinv_01;
    // const double G1_8_1 = det*w[0][8]*Jinv_11;
    // const double G1_8_2 = det*w[0][8]*Jinv_21;
    // const double G1_9_0 = det*w[0][9]*Jinv_01;
    // const double G1_9_1 = det*w[0][9]*Jinv_11;
    // const double G1_9_2 = det*w[0][9]*Jinv_21;
    // const double G1_10_0 = det*w[0][10]*Jinv_01;
    // const double G1_10_1 = det*w[0][10]*Jinv_11;
    // const double G1_10_2 = det*w[0][10]*Jinv_21;
    // const double G1_11_0 = det*w[0][11]*Jinv_01;
    // const double G1_11_1 = det*w[0][11]*Jinv_11;
    // const double G1_11_2 = det*w[0][11]*Jinv_21;
    // const double G2_0_0 = det*w[0][0]*Jinv_02;
    // const double G2_0_1 = det*w[0][0]*Jinv_12;
    // const double G2_0_2 = det*w[0][0]*Jinv_22;
    // const double G2_1_0 = det*w[0][1]*Jinv_02;
    // const double G2_1_1 = det*w[0][1]*Jinv_12;
    // const double G2_1_2 = det*w[0][1]*Jinv_22;
    // const double G2_2_0 = det*w[0][2]*Jinv_02;
    // const double G2_2_1 = det*w[0][2]*Jinv_12;
    // const double G2_2_2 = det*w[0][2]*Jinv_22;
    // const double G2_3_0 = det*w[0][3]*Jinv_02;
    // const double G2_3_1 = det*w[0][3]*Jinv_12;
    // const double G2_3_2 = det*w[0][3]*Jinv_22;
    // const double G2_4_0 = det*w[0][4]*Jinv_02;
    // const double G2_4_1 = det*w[0][4]*Jinv_12;
    // const double G2_4_2 = det*w[0][4]*Jinv_22;
    // const double G2_5_0 = det*w[0][5]*Jinv_02;
    // const double G2_5_1 = det*w[0][5]*Jinv_12;
    // const double G2_5_2 = det*w[0][5]*Jinv_22;
    // const double G2_6_0 = det*w[0][6]*Jinv_02;
    // const double G2_6_1 = det*w[0][6]*Jinv_12;
    // const double G2_6_2 = det*w[0][6]*Jinv_22;
    // const double G2_7_0 = det*w[0][7]*Jinv_02;
    // const double G2_7_1 = det*w[0][7]*Jinv_12;
    // const double G2_7_2 = det*w[0][7]*Jinv_22;
    const double G2_8_0 = det*w[0][8]*Jinv_02;
    const double G2_8_1 = det*w[0][8]*Jinv_12;
    const double G2_8_2 = det*w[0][8]*Jinv_22;
    const double G2_9_0 = det*w[0][9]*Jinv_02;
    // const double G2_9_1 = det*w[0][9]*Jinv_12;
    // const double G2_9_2 = det*w[0][9]*Jinv_22;
    // const double G2_10_0 = det*w[0][10]*Jinv_02;
    const double G2_10_1 = det*w[0][10]*Jinv_12;
    // const double G2_10_2 = det*w[0][10]*Jinv_22;
    // const double G2_11_0 = det*w[0][11]*Jinv_02;
    // const double G2_11_1 = det*w[0][11]*Jinv_12;
    const double G2_11_2 = det*w[0][11]*Jinv_22;
    const double G3_0_0 = det*w[0][0]*Jinv_01;
    const double G3_0_1 = det*w[0][0]*Jinv_11;
    const double G3_0_2 = det*w[0][0]*Jinv_21;
    const double G3_1_0 = det*w[0][1]*Jinv_01;
    // const double G3_1_1 = det*w[0][1]*Jinv_11;
    // const double G3_1_2 = det*w[0][1]*Jinv_21;
    // const double G3_2_0 = det*w[0][2]*Jinv_01;
    const double G3_2_1 = det*w[0][2]*Jinv_11;
    // const double G3_2_2 = det*w[0][2]*Jinv_21;
    // const double G3_3_0 = det*w[0][3]*Jinv_01;
    // const double G3_3_1 = det*w[0][3]*Jinv_11;
    const double G3_3_2 = det*w[0][3]*Jinv_21;
    // const double G3_4_0 = det*w[0][4]*Jinv_01;
    // const double G3_4_1 = det*w[0][4]*Jinv_11;
    // const double G3_4_2 = det*w[0][4]*Jinv_21;
    // const double G3_5_0 = det*w[0][5]*Jinv_01;
    // const double G3_5_1 = det*w[0][5]*Jinv_11;
    // const double G3_5_2 = det*w[0][5]*Jinv_21;
    // const double G3_6_0 = det*w[0][6]*Jinv_01;
    // const double G3_6_1 = det*w[0][6]*Jinv_11;
    // const double G3_6_2 = det*w[0][6]*Jinv_21;
    // const double G3_7_0 = det*w[0][7]*Jinv_01;
    // const double G3_7_1 = det*w[0][7]*Jinv_11;
    // const double G3_7_2 = det*w[0][7]*Jinv_21;
    // const double G3_8_0 = det*w[0][8]*Jinv_01;
    // const double G3_8_1 = det*w[0][8]*Jinv_11;
    // const double G3_8_2 = det*w[0][8]*Jinv_21;
    // const double G3_9_0 = det*w[0][9]*Jinv_01;
    // const double G3_9_1 = det*w[0][9]*Jinv_11;
    // const double G3_9_2 = det*w[0][9]*Jinv_21;
    // const double G3_10_0 = det*w[0][10]*Jinv_01;
    // const double G3_10_1 = det*w[0][10]*Jinv_11;
    // const double G3_10_2 = det*w[0][10]*Jinv_21;
    // const double G3_11_0 = det*w[0][11]*Jinv_01;
    // const double G3_11_1 = det*w[0][11]*Jinv_11;
    // const double G3_11_2 = det*w[0][11]*Jinv_21;
    // const double G4_0_0 = det*w[0][0]*Jinv_00;
    // const double G4_0_1 = det*w[0][0]*Jinv_10;
    // const double G4_0_2 = det*w[0][0]*Jinv_20;
    // const double G4_1_0 = det*w[0][1]*Jinv_00;
    // const double G4_1_1 = det*w[0][1]*Jinv_10;
    // const double G4_1_2 = det*w[0][1]*Jinv_20;
    // const double G4_2_0 = det*w[0][2]*Jinv_00;
    // const double G4_2_1 = det*w[0][2]*Jinv_10;
    // const double G4_2_2 = det*w[0][2]*Jinv_20;
    // const double G4_3_0 = det*w[0][3]*Jinv_00;
    // const double G4_3_1 = det*w[0][3]*Jinv_10;
    // const double G4_3_2 = det*w[0][3]*Jinv_20;
    const double G4_4_0 = det*w[0][4]*Jinv_00;
    const double G4_4_1 = det*w[0][4]*Jinv_10;
    const double G4_4_2 = det*w[0][4]*Jinv_20;
    const double G4_5_0 = det*w[0][5]*Jinv_00;
    // const double G4_5_1 = det*w[0][5]*Jinv_10;
    // const double G4_5_2 = det*w[0][5]*Jinv_20;
    // const double G4_6_0 = det*w[0][6]*Jinv_00;
    const double G4_6_1 = det*w[0][6]*Jinv_10;
    // const double G4_6_2 = det*w[0][6]*Jinv_20;
    // const double G4_7_0 = det*w[0][7]*Jinv_00;
    // const double G4_7_1 = det*w[0][7]*Jinv_10;
    const double G4_7_2 = det*w[0][7]*Jinv_20;
    // const double G4_8_0 = det*w[0][8]*Jinv_00;
    // const double G4_8_1 = det*w[0][8]*Jinv_10;
    // const double G4_8_2 = det*w[0][8]*Jinv_20;
    // const double G4_9_0 = det*w[0][9]*Jinv_00;
    // const double G4_9_1 = det*w[0][9]*Jinv_10;
    // const double G4_9_2 = det*w[0][9]*Jinv_20;
    // const double G4_10_0 = det*w[0][10]*Jinv_00;
    // const double G4_10_1 = det*w[0][10]*Jinv_10;
    // const double G4_10_2 = det*w[0][10]*Jinv_20;
    // const double G4_11_0 = det*w[0][11]*Jinv_00;
    // const double G4_11_1 = det*w[0][11]*Jinv_10;
    // const double G4_11_2 = det*w[0][11]*Jinv_20;
    const double G5_0_0 = det*w[0][0]*Jinv_02;
    const double G5_0_1 = det*w[0][0]*Jinv_12;
    const double G5_0_2 = det*w[0][0]*Jinv_22;
    const double G5_1_0 = det*w[0][1]*Jinv_02;
    // const double G5_1_1 = det*w[0][1]*Jinv_12;
    // const double G5_1_2 = det*w[0][1]*Jinv_22;
    // const double G5_2_0 = det*w[0][2]*Jinv_02;
    const double G5_2_1 = det*w[0][2]*Jinv_12;
    // const double G5_2_2 = det*w[0][2]*Jinv_22;
    // const double G5_3_0 = det*w[0][3]*Jinv_02;
    // const double G5_3_1 = det*w[0][3]*Jinv_12;
    const double G5_3_2 = det*w[0][3]*Jinv_22;
    // const double G5_4_0 = det*w[0][4]*Jinv_02;
    // const double G5_4_1 = det*w[0][4]*Jinv_12;
    // const double G5_4_2 = det*w[0][4]*Jinv_22;
    // const double G5_5_0 = det*w[0][5]*Jinv_02;
    // const double G5_5_1 = det*w[0][5]*Jinv_12;
    // const double G5_5_2 = det*w[0][5]*Jinv_22;
    // const double G5_6_0 = det*w[0][6]*Jinv_02;
    // const double G5_6_1 = det*w[0][6]*Jinv_12;
    // const double G5_6_2 = det*w[0][6]*Jinv_22;
    // const double G5_7_0 = det*w[0][7]*Jinv_02;
    // const double G5_7_1 = det*w[0][7]*Jinv_12;
    // const double G5_7_2 = det*w[0][7]*Jinv_22;
    // const double G5_8_0 = det*w[0][8]*Jinv_02;
    // const double G5_8_1 = det*w[0][8]*Jinv_12;
    // const double G5_8_2 = det*w[0][8]*Jinv_22;
    // const double G5_9_0 = det*w[0][9]*Jinv_02;
    // const double G5_9_1 = det*w[0][9]*Jinv_12;
    // const double G5_9_2 = det*w[0][9]*Jinv_22;
    // const double G5_10_0 = det*w[0][10]*Jinv_02;
    // const double G5_10_1 = det*w[0][10]*Jinv_12;
    // const double G5_10_2 = det*w[0][10]*Jinv_22;
    // const double G5_11_0 = det*w[0][11]*Jinv_02;
    // const double G5_11_1 = det*w[0][11]*Jinv_12;
    // const double G5_11_2 = det*w[0][11]*Jinv_22;
    // const double G6_0_0 = det*w[0][0]*Jinv_00;
    // const double G6_0_1 = det*w[0][0]*Jinv_10;
    // const double G6_0_2 = det*w[0][0]*Jinv_20;
    // const double G6_1_0 = det*w[0][1]*Jinv_00;
    // const double G6_1_1 = det*w[0][1]*Jinv_10;
    // const double G6_1_2 = det*w[0][1]*Jinv_20;
    // const double G6_2_0 = det*w[0][2]*Jinv_00;
    // const double G6_2_1 = det*w[0][2]*Jinv_10;
    // const double G6_2_2 = det*w[0][2]*Jinv_20;
    // const double G6_3_0 = det*w[0][3]*Jinv_00;
    // const double G6_3_1 = det*w[0][3]*Jinv_10;
    // const double G6_3_2 = det*w[0][3]*Jinv_20;
    // const double G6_4_0 = det*w[0][4]*Jinv_00;
    // const double G6_4_1 = det*w[0][4]*Jinv_10;
    // const double G6_4_2 = det*w[0][4]*Jinv_20;
    // const double G6_5_0 = det*w[0][5]*Jinv_00;
    // const double G6_5_1 = det*w[0][5]*Jinv_10;
    // const double G6_5_2 = det*w[0][5]*Jinv_20;
    // const double G6_6_0 = det*w[0][6]*Jinv_00;
    // const double G6_6_1 = det*w[0][6]*Jinv_10;
    // const double G6_6_2 = det*w[0][6]*Jinv_20;
    // const double G6_7_0 = det*w[0][7]*Jinv_00;
    // const double G6_7_1 = det*w[0][7]*Jinv_10;
    // const double G6_7_2 = det*w[0][7]*Jinv_20;
    const double G6_8_0 = det*w[0][8]*Jinv_00;
    const double G6_8_1 = det*w[0][8]*Jinv_10;
    const double G6_8_2 = det*w[0][8]*Jinv_20;
    const double G6_9_0 = det*w[0][9]*Jinv_00;
    // const double G6_9_1 = det*w[0][9]*Jinv_10;
    // const double G6_9_2 = det*w[0][9]*Jinv_20;
    // const double G6_10_0 = det*w[0][10]*Jinv_00;
    const double G6_10_1 = det*w[0][10]*Jinv_10;
    // const double G6_10_2 = det*w[0][10]*Jinv_20;
    // const double G6_11_0 = det*w[0][11]*Jinv_00;
    // const double G6_11_1 = det*w[0][11]*Jinv_10;
    const double G6_11_2 = det*w[0][11]*Jinv_20;
    // const double G7_0_0 = det*w[0][0]*Jinv_02;
    // const double G7_0_1 = det*w[0][0]*Jinv_12;
    // const double G7_0_2 = det*w[0][0]*Jinv_22;
    // const double G7_1_0 = det*w[0][1]*Jinv_02;
    // const double G7_1_1 = det*w[0][1]*Jinv_12;
    // const double G7_1_2 = det*w[0][1]*Jinv_22;
    // const double G7_2_0 = det*w[0][2]*Jinv_02;
    // const double G7_2_1 = det*w[0][2]*Jinv_12;
    // const double G7_2_2 = det*w[0][2]*Jinv_22;
    // const double G7_3_0 = det*w[0][3]*Jinv_02;
    // const double G7_3_1 = det*w[0][3]*Jinv_12;
    // const double G7_3_2 = det*w[0][3]*Jinv_22;
    const double G7_4_0 = det*w[0][4]*Jinv_02;
    const double G7_4_1 = det*w[0][4]*Jinv_12;
    const double G7_4_2 = det*w[0][4]*Jinv_22;
    const double G7_5_0 = det*w[0][5]*Jinv_02;
    // const double G7_5_1 = det*w[0][5]*Jinv_12;
    // const double G7_5_2 = det*w[0][5]*Jinv_22;
    // const double G7_6_0 = det*w[0][6]*Jinv_02;
    const double G7_6_1 = det*w[0][6]*Jinv_12;
    // const double G7_6_2 = det*w[0][6]*Jinv_22;
    // const double G7_7_0 = det*w[0][7]*Jinv_02;
    // const double G7_7_1 = det*w[0][7]*Jinv_12;
    const double G7_7_2 = det*w[0][7]*Jinv_22;
    // const double G7_8_0 = det*w[0][8]*Jinv_02;
    // const double G7_8_1 = det*w[0][8]*Jinv_12;
    // const double G7_8_2 = det*w[0][8]*Jinv_22;
    // const double G7_9_0 = det*w[0][9]*Jinv_02;
    // const double G7_9_1 = det*w[0][9]*Jinv_12;
    // const double G7_9_2 = det*w[0][9]*Jinv_22;
    // const double G7_10_0 = det*w[0][10]*Jinv_02;
    // const double G7_10_1 = det*w[0][10]*Jinv_12;
    // const double G7_10_2 = det*w[0][10]*Jinv_22;
    // const double G7_11_0 = det*w[0][11]*Jinv_02;
    // const double G7_11_1 = det*w[0][11]*Jinv_12;
    // const double G7_11_2 = det*w[0][11]*Jinv_22;
    // const double G8_0_0 = det*w[0][0]*Jinv_01;
    // const double G8_0_1 = det*w[0][0]*Jinv_11;
    // const double G8_0_2 = det*w[0][0]*Jinv_21;
    // const double G8_1_0 = det*w[0][1]*Jinv_01;
    // const double G8_1_1 = det*w[0][1]*Jinv_11;
    // const double G8_1_2 = det*w[0][1]*Jinv_21;
    // const double G8_2_0 = det*w[0][2]*Jinv_01;
    // const double G8_2_1 = det*w[0][2]*Jinv_11;
    // const double G8_2_2 = det*w[0][2]*Jinv_21;
    // const double G8_3_0 = det*w[0][3]*Jinv_01;
    // const double G8_3_1 = det*w[0][3]*Jinv_11;
    // const double G8_3_2 = det*w[0][3]*Jinv_21;
    // const double G8_4_0 = det*w[0][4]*Jinv_01;
    // const double G8_4_1 = det*w[0][4]*Jinv_11;
    // const double G8_4_2 = det*w[0][4]*Jinv_21;
    // const double G8_5_0 = det*w[0][5]*Jinv_01;
    // const double G8_5_1 = det*w[0][5]*Jinv_11;
    // const double G8_5_2 = det*w[0][5]*Jinv_21;
    // const double G8_6_0 = det*w[0][6]*Jinv_01;
    // const double G8_6_1 = det*w[0][6]*Jinv_11;
    // const double G8_6_2 = det*w[0][6]*Jinv_21;
    // const double G8_7_0 = det*w[0][7]*Jinv_01;
    // const double G8_7_1 = det*w[0][7]*Jinv_11;
    // const double G8_7_2 = det*w[0][7]*Jinv_21;
    const double G8_8_0 = det*w[0][8]*Jinv_01;
    const double G8_8_1 = det*w[0][8]*Jinv_11;
    const double G8_8_2 = det*w[0][8]*Jinv_21;
    const double G8_9_0 = det*w[0][9]*Jinv_01;
    // const double G8_9_1 = det*w[0][9]*Jinv_11;
    // const double G8_9_2 = det*w[0][9]*Jinv_21;
    // const double G8_10_0 = det*w[0][10]*Jinv_01;
    const double G8_10_1 = det*w[0][10]*Jinv_11;
    // const double G8_10_2 = det*w[0][10]*Jinv_21;
    // const double G8_11_0 = det*w[0][11]*Jinv_01;
    // const double G8_11_1 = det*w[0][11]*Jinv_11;
    const double G8_11_2 = det*w[0][11]*Jinv_21;
    
    // Compute element tensor
    A[0] = -0.04166666666667*G0_0_0 - 0.04166666666667*G0_0_1 - 0.04166666666667*G0_0_2 + 0.04166666666667*G0_1_0 + 0.04166666666667*G0_2_1 + 0.04166666666667*G0_3_2;
    A[1] = -0.04166666666667*G0_0_0 - 0.04166666666667*G0_0_1 - 0.04166666666667*G0_0_2 + 0.04166666666667*G0_1_0 + 0.04166666666667*G0_2_1 + 0.04166666666667*G0_3_2;
    A[2] = -0.04166666666667*G0_0_0 - 0.04166666666667*G0_0_1 - 0.04166666666667*G0_0_2 + 0.04166666666667*G0_1_0 + 0.04166666666667*G0_2_1 + 0.04166666666667*G0_3_2;
    A[3] = -0.04166666666667*G0_0_0 - 0.04166666666667*G0_0_1 - 0.04166666666667*G0_0_2 + 0.04166666666667*G0_1_0 + 0.04166666666667*G0_2_1 + 0.04166666666667*G0_3_2;
    A[4] = -0.04166666666667*G1_4_0 - 0.04166666666667*G1_4_1 - 0.04166666666667*G1_4_2 + 0.04166666666667*G1_5_0 + 0.04166666666667*G1_6_1 + 0.04166666666667*G1_7_2;
    A[5] = -0.04166666666667*G1_4_0 - 0.04166666666667*G1_4_1 - 0.04166666666667*G1_4_2 + 0.04166666666667*G1_5_0 + 0.04166666666667*G1_6_1 + 0.04166666666667*G1_7_2;
    A[6] = -0.04166666666667*G1_4_0 - 0.04166666666667*G1_4_1 - 0.04166666666667*G1_4_2 + 0.04166666666667*G1_5_0 + 0.04166666666667*G1_6_1 + 0.04166666666667*G1_7_2;
    A[7] = -0.04166666666667*G1_4_0 - 0.04166666666667*G1_4_1 - 0.04166666666667*G1_4_2 + 0.04166666666667*G1_5_0 + 0.04166666666667*G1_6_1 + 0.04166666666667*G1_7_2;
    A[8] = -0.04166666666667*G2_8_0 - 0.04166666666667*G2_8_1 - 0.04166666666667*G2_8_2 + 0.04166666666667*G2_9_0 + 0.04166666666667*G2_10_1 + 0.04166666666667*G2_11_2;
    A[9] = -0.04166666666667*G2_8_0 - 0.04166666666667*G2_8_1 - 0.04166666666667*G2_8_2 + 0.04166666666667*G2_9_0 + 0.04166666666667*G2_10_1 + 0.04166666666667*G2_11_2;
    A[10] = -0.04166666666667*G2_8_0 - 0.04166666666667*G2_8_1 - 0.04166666666667*G2_8_2 + 0.04166666666667*G2_9_0 + 0.04166666666667*G2_10_1 + 0.04166666666667*G2_11_2;
    A[11] = -0.04166666666667*G2_8_0 - 0.04166666666667*G2_8_1 - 0.04166666666667*G2_8_2 + 0.04166666666667*G2_9_0 + 0.04166666666667*G2_10_1 + 0.04166666666667*G2_11_2;
    A[12] = -0.04166666666667*G3_0_0 - 0.04166666666667*G3_0_1 - 0.04166666666667*G3_0_2 + 0.04166666666667*G3_1_0 + 0.04166666666667*G3_2_1 + 0.04166666666667*G3_3_2 - 0.04166666666667*G4_4_0 - 0.04166666666667*G4_4_1 - 0.04166666666667*G4_4_2 + 0.04166666666667*G4_5_0 + 0.04166666666667*G4_6_1 + 0.04166666666667*G4_7_2;
    A[13] = -0.04166666666667*G3_0_0 - 0.04166666666667*G3_0_1 - 0.04166666666667*G3_0_2 + 0.04166666666667*G3_1_0 + 0.04166666666667*G3_2_1 + 0.04166666666667*G3_3_2 - 0.04166666666667*G4_4_0 - 0.04166666666667*G4_4_1 - 0.04166666666667*G4_4_2 + 0.04166666666667*G4_5_0 + 0.04166666666667*G4_6_1 + 0.04166666666667*G4_7_2;
    A[14] = -0.04166666666667*G3_0_0 - 0.04166666666667*G3_0_1 - 0.04166666666667*G3_0_2 + 0.04166666666667*G3_1_0 + 0.04166666666667*G3_2_1 + 0.04166666666667*G3_3_2 - 0.04166666666667*G4_4_0 - 0.04166666666667*G4_4_1 - 0.04166666666667*G4_4_2 + 0.04166666666667*G4_5_0 + 0.04166666666667*G4_6_1 + 0.04166666666667*G4_7_2;
    A[15] = -0.04166666666667*G3_0_0 - 0.04166666666667*G3_0_1 - 0.04166666666667*G3_0_2 + 0.04166666666667*G3_1_0 + 0.04166666666667*G3_2_1 + 0.04166666666667*G3_3_2 - 0.04166666666667*G4_4_0 - 0.04166666666667*G4_4_1 - 0.04166666666667*G4_4_2 + 0.04166666666667*G4_5_0 + 0.04166666666667*G4_6_1 + 0.04166666666667*G4_7_2;
    A[16] = -0.04166666666667*G5_0_0 - 0.04166666666667*G5_0_1 - 0.04166666666667*G5_0_2 + 0.04166666666667*G5_1_0 + 0.04166666666667*G5_2_1 + 0.04166666666667*G5_3_2 - 0.04166666666667*G6_8_0 - 0.04166666666667*G6_8_1 - 0.04166666666667*G6_8_2 + 0.04166666666667*G6_9_0 + 0.04166666666667*G6_10_1 + 0.04166666666667*G6_11_2;
    A[17] = -0.04166666666667*G5_0_0 - 0.04166666666667*G5_0_1 - 0.04166666666667*G5_0_2 + 0.04166666666667*G5_1_0 + 0.04166666666667*G5_2_1 + 0.04166666666667*G5_3_2 - 0.04166666666667*G6_8_0 - 0.04166666666667*G6_8_1 - 0.04166666666667*G6_8_2 + 0.04166666666667*G6_9_0 + 0.04166666666667*G6_10_1 + 0.04166666666667*G6_11_2;
    A[18] = -0.04166666666667*G5_0_0 - 0.04166666666667*G5_0_1 - 0.04166666666667*G5_0_2 + 0.04166666666667*G5_1_0 + 0.04166666666667*G5_2_1 + 0.04166666666667*G5_3_2 - 0.04166666666667*G6_8_0 - 0.04166666666667*G6_8_1 - 0.04166666666667*G6_8_2 + 0.04166666666667*G6_9_0 + 0.04166666666667*G6_10_1 + 0.04166666666667*G6_11_2;
    A[19] = -0.04166666666667*G5_0_0 - 0.04166666666667*G5_0_1 - 0.04166666666667*G5_0_2 + 0.04166666666667*G5_1_0 + 0.04166666666667*G5_2_1 + 0.04166666666667*G5_3_2 - 0.04166666666667*G6_8_0 - 0.04166666666667*G6_8_1 - 0.04166666666667*G6_8_2 + 0.04166666666667*G6_9_0 + 0.04166666666667*G6_10_1 + 0.04166666666667*G6_11_2;
    A[20] = -0.04166666666667*G7_4_0 - 0.04166666666667*G7_4_1 - 0.04166666666667*G7_4_2 + 0.04166666666667*G7_5_0 + 0.04166666666667*G7_6_1 + 0.04166666666667*G7_7_2 - 0.04166666666667*G8_8_0 - 0.04166666666667*G8_8_1 - 0.04166666666667*G8_8_2 + 0.04166666666667*G8_9_0 + 0.04166666666667*G8_10_1 + 0.04166666666667*G8_11_2;
    A[21] = -0.04166666666667*G7_4_0 - 0.04166666666667*G7_4_1 - 0.04166666666667*G7_4_2 + 0.04166666666667*G7_5_0 + 0.04166666666667*G7_6_1 + 0.04166666666667*G7_7_2 - 0.04166666666667*G8_8_0 - 0.04166666666667*G8_8_1 - 0.04166666666667*G8_8_2 + 0.04166666666667*G8_9_0 + 0.04166666666667*G8_10_1 + 0.04166666666667*G8_11_2;
    A[22] = -0.04166666666667*G7_4_0 - 0.04166666666667*G7_4_1 - 0.04166666666667*G7_4_2 + 0.04166666666667*G7_5_0 + 0.04166666666667*G7_6_1 + 0.04166666666667*G7_7_2 - 0.04166666666667*G8_8_0 - 0.04166666666667*G8_8_1 - 0.04166666666667*G8_8_2 + 0.04166666666667*G8_9_0 + 0.04166666666667*G8_10_1 + 0.04166666666667*G8_11_2;
    A[23] = -0.04166666666667*G7_4_0 - 0.04166666666667*G7_4_1 - 0.04166666666667*G7_4_2 + 0.04166666666667*G7_5_0 + 0.04166666666667*G7_6_1 + 0.04166666666667*G7_7_2 - 0.04166666666667*G8_8_0 - 0.04166666666667*G8_8_1 - 0.04166666666667*G8_8_2 + 0.04166666666667*G8_9_0 + 0.04166666666667*G8_10_1 + 0.04166666666667*G8_11_2;
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class ElasticityStrainLinearForm: public ufc::form
{
public:

  /// Constructor
  ElasticityStrainLinearForm() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ElasticityStrainLinearForm()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "|det F'|w0_a0(dXa1/dx0) | vi0[0]*((d/dXa1)va0[0])*dX(0) + |det F'|w0_a0(dXa1/dx1) | vi0[1]*((d/dXa1)va0[1])*dX(0) + |det F'|w0_a0(dXa1/dx2) | vi0[2]*((d/dXa1)va0[2])*dX(0) + |det F'|w0_a0(dXa1/dx1) | vi0[3]*((d/dXa1)va0[0])*dX(0) + |det F'|w0_a0(dXa1/dx0) | vi0[3]*((d/dXa1)va0[1])*dX(0) + |det F'|w0_a0(dXa1/dx2) | vi0[4]*((d/dXa1)va0[0])*dX(0) + |det F'|w0_a0(dXa1/dx0) | vi0[4]*((d/dXa1)va0[2])*dX(0) + |det F'|w0_a0(dXa1/dx2) | vi0[5]*((d/dXa1)va0[1])*dX(0) + |det F'|w0_a0(dXa1/dx1) | vi0[5]*((d/dXa1)va0[2])*dX(0)";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 1;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 1;
  }

  /// Return the number of cell integrals
  virtual unsigned int num_cell_integrals() const
  {
    return 1;
  }
  
  /// Return the number of exterior facet integrals
  virtual unsigned int num_exterior_facet_integrals() const
  {
    return 0;
  }
  
  /// Return the number of interior facet integrals
  virtual unsigned int num_interior_facet_integrals() const
  {
    return 0;
  }
    
  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new ElasticityStrainLinearForm_finite_element_0();
      break;
    case 1:
      return new ElasticityStrainLinearForm_finite_element_1();
      break;
    }
    return 0;
  }
  
  /// Create a new dof map for argument function i
  virtual ufc::dof_map* create_dof_map(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new ElasticityStrainLinearForm_dof_map_0();
      break;
    case 1:
      return new ElasticityStrainLinearForm_dof_map_1();
      break;
    }
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    return new ElasticityStrainLinearForm_cell_integral_0();
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

#endif
