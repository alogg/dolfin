// Automatically generated by FFC, the FEniCS Form Compiler, version 0.3.3-dev.
// For further information, go to http://www/fenics.org/ffc/.
// Licensed under the GNU GPL Version 2.

#ifndef __ELASTICITY_H
#define __ELASTICITY_H

#include <dolfin/Mesh.h>
#include <dolfin/Cell.h>
#include <dolfin/Point.h>
#include <dolfin/AffineMap.h>
#include <dolfin/FiniteElement.h>
#include <dolfin/FiniteElementSpec.h>
#include <dolfin/BilinearForm.h>
#include <dolfin/LinearForm.h>
#include <dolfin/Functional.h>
#include <dolfin/FEM.h>

namespace dolfin { namespace Elasticity {

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class BilinearForm : public dolfin::BilinearForm
{
public:

  class TestElement;

  class TrialElement;

  BilinearForm();
  

  void eval(real block[], const AffineMap& map) const;

  void eval(real block[], const AffineMap& map, unsigned int facet) const;

};

class BilinearForm::TestElement : public dolfin::FiniteElement
{
public:

  TestElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 3;

    // Element is simple, don't need to initialize subelements
  }

  ~TestElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 12;
  }

  inline unsigned int shapedim() const
  {
    return 3;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.vertexID(0);
    nodes[1] = cell.vertexID(1);
    nodes[2] = cell.vertexID(2);
    nodes[3] = cell.vertexID(3);
    int offset = mesh.numVertices();
    nodes[4] = offset + cell.vertexID(0);
    nodes[5] = offset + cell.vertexID(1);
    nodes[6] = offset + cell.vertexID(2);
    nodes[7] = offset + cell.vertexID(3);
    offset = offset + mesh.numVertices();
    nodes[8] = offset + cell.vertexID(0);
    nodes[9] = offset + cell.vertexID(1);
    nodes[10] = offset + cell.vertexID(2);
    nodes[11] = offset + cell.vertexID(3);
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[4] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[6] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[7] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[8] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[9] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[10] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[11] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
    components[4] = 1;
    components[5] = 1;
    components[6] = 1;
    components[7] = 1;
    components[8] = 2;
    components[9] = 2;
    components[10] = 2;
    components[11] = 2;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.numVertices();
    vertex_nodes[1] = offset + vertex;
    offset = offset + mesh.numVertices();
    vertex_nodes[2] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "tetrahedron", 1, 3);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class BilinearForm::TrialElement : public dolfin::FiniteElement
{
public:

  TrialElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 3;

    // Element is simple, don't need to initialize subelements
  }

  ~TrialElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 12;
  }

  inline unsigned int shapedim() const
  {
    return 3;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.vertexID(0);
    nodes[1] = cell.vertexID(1);
    nodes[2] = cell.vertexID(2);
    nodes[3] = cell.vertexID(3);
    int offset = mesh.numVertices();
    nodes[4] = offset + cell.vertexID(0);
    nodes[5] = offset + cell.vertexID(1);
    nodes[6] = offset + cell.vertexID(2);
    nodes[7] = offset + cell.vertexID(3);
    offset = offset + mesh.numVertices();
    nodes[8] = offset + cell.vertexID(0);
    nodes[9] = offset + cell.vertexID(1);
    nodes[10] = offset + cell.vertexID(2);
    nodes[11] = offset + cell.vertexID(3);
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[4] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[6] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[7] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[8] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[9] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[10] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[11] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
    components[4] = 1;
    components[5] = 1;
    components[6] = 1;
    components[7] = 1;
    components[8] = 2;
    components[9] = 2;
    components[10] = 2;
    components[11] = 2;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.numVertices();
    vertex_nodes[1] = offset + vertex;
    offset = offset + mesh.numVertices();
    vertex_nodes[2] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "tetrahedron", 1, 3);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

BilinearForm::BilinearForm() : dolfin::BilinearForm(0)
{
  // Create finite element for test space
  _test = new TestElement();

  // Create finite element for trial space
  _trial = new TrialElement();
}

void BilinearForm::eval(real block[], const AffineMap& map) const
{
  // Compute geometry tensors
  const real G0_0_0 = map.det*map.g00*map.g00 + map.det*map.g00*map.g00 + map.det*map.g01*map.g01 + map.det*map.g02*map.g02;
  const real G0_0_1 = map.det*map.g00*map.g10 + map.det*map.g00*map.g10 + map.det*map.g01*map.g11 + map.det*map.g02*map.g12;
  const real G0_0_2 = map.det*map.g00*map.g20 + map.det*map.g00*map.g20 + map.det*map.g01*map.g21 + map.det*map.g02*map.g22;
  const real G0_1_0 = map.det*map.g10*map.g00 + map.det*map.g10*map.g00 + map.det*map.g11*map.g01 + map.det*map.g12*map.g02;
  const real G0_1_1 = map.det*map.g10*map.g10 + map.det*map.g10*map.g10 + map.det*map.g11*map.g11 + map.det*map.g12*map.g12;
  const real G0_1_2 = map.det*map.g10*map.g20 + map.det*map.g10*map.g20 + map.det*map.g11*map.g21 + map.det*map.g12*map.g22;
  const real G0_2_0 = map.det*map.g20*map.g00 + map.det*map.g20*map.g00 + map.det*map.g21*map.g01 + map.det*map.g22*map.g02;
  const real G0_2_1 = map.det*map.g20*map.g10 + map.det*map.g20*map.g10 + map.det*map.g21*map.g11 + map.det*map.g22*map.g12;
  const real G0_2_2 = map.det*map.g20*map.g20 + map.det*map.g20*map.g20 + map.det*map.g21*map.g21 + map.det*map.g22*map.g22;
  const real G1_0_0 = map.det*map.g00*map.g00 + map.det*map.g00*map.g00;
  const real G1_0_1 = map.det*map.g00*map.g10 + map.det*map.g00*map.g10;
  const real G1_0_2 = map.det*map.g00*map.g20 + map.det*map.g00*map.g20;
  const real G1_1_0 = map.det*map.g10*map.g00 + map.det*map.g10*map.g00;
  const real G1_1_1 = map.det*map.g10*map.g10 + map.det*map.g10*map.g10;
  const real G1_1_2 = map.det*map.g10*map.g20 + map.det*map.g10*map.g20;
  const real G1_2_0 = map.det*map.g20*map.g00 + map.det*map.g20*map.g00;
  const real G1_2_1 = map.det*map.g20*map.g10 + map.det*map.g20*map.g10;
  const real G1_2_2 = map.det*map.g20*map.g20 + map.det*map.g20*map.g20;
  const real G2_0_0 = map.det*map.g00*map.g01 + map.det*map.g00*map.g01;
  const real G2_0_1 = map.det*map.g00*map.g11 + map.det*map.g00*map.g11;
  const real G2_0_2 = map.det*map.g00*map.g21 + map.det*map.g00*map.g21;
  const real G2_1_0 = map.det*map.g10*map.g01 + map.det*map.g10*map.g01;
  const real G2_1_1 = map.det*map.g10*map.g11 + map.det*map.g10*map.g11;
  const real G2_1_2 = map.det*map.g10*map.g21 + map.det*map.g10*map.g21;
  const real G2_2_0 = map.det*map.g20*map.g01 + map.det*map.g20*map.g01;
  const real G2_2_1 = map.det*map.g20*map.g11 + map.det*map.g20*map.g11;
  const real G2_2_2 = map.det*map.g20*map.g21 + map.det*map.g20*map.g21;
  const real G3_0_0 = map.det*map.g00*map.g02 + map.det*map.g00*map.g02;
  const real G3_0_1 = map.det*map.g00*map.g12 + map.det*map.g00*map.g12;
  const real G3_0_2 = map.det*map.g00*map.g22 + map.det*map.g00*map.g22;
  const real G3_1_0 = map.det*map.g10*map.g02 + map.det*map.g10*map.g02;
  const real G3_1_1 = map.det*map.g10*map.g12 + map.det*map.g10*map.g12;
  const real G3_1_2 = map.det*map.g10*map.g22 + map.det*map.g10*map.g22;
  const real G3_2_0 = map.det*map.g20*map.g02 + map.det*map.g20*map.g02;
  const real G3_2_1 = map.det*map.g20*map.g12 + map.det*map.g20*map.g12;
  const real G3_2_2 = map.det*map.g20*map.g22 + map.det*map.g20*map.g22;
  const real G4_0_0 = map.det*map.g01*map.g00;
  const real G4_0_1 = map.det*map.g01*map.g10;
  const real G4_0_2 = map.det*map.g01*map.g20;
  const real G4_1_0 = map.det*map.g11*map.g00;
  const real G4_1_1 = map.det*map.g11*map.g10;
  const real G4_1_2 = map.det*map.g11*map.g20;
  const real G4_2_0 = map.det*map.g21*map.g00;
  const real G4_2_1 = map.det*map.g21*map.g10;
  const real G4_2_2 = map.det*map.g21*map.g20;
  const real G8_0_0 = map.det*map.g02*map.g00;
  const real G8_0_1 = map.det*map.g02*map.g10;
  const real G8_0_2 = map.det*map.g02*map.g20;
  const real G8_1_0 = map.det*map.g12*map.g00;
  const real G8_1_1 = map.det*map.g12*map.g10;
  const real G8_1_2 = map.det*map.g12*map.g20;
  const real G8_2_0 = map.det*map.g22*map.g00;
  const real G8_2_1 = map.det*map.g22*map.g10;
  const real G8_2_2 = map.det*map.g22*map.g20;
  const real G9_0_0 = map.det*map.g00*map.g00 + map.det*map.g01*map.g01 + map.det*map.g01*map.g01 + map.det*map.g02*map.g02;
  const real G9_0_1 = map.det*map.g00*map.g10 + map.det*map.g01*map.g11 + map.det*map.g01*map.g11 + map.det*map.g02*map.g12;
  const real G9_0_2 = map.det*map.g00*map.g20 + map.det*map.g01*map.g21 + map.det*map.g01*map.g21 + map.det*map.g02*map.g22;
  const real G9_1_0 = map.det*map.g10*map.g00 + map.det*map.g11*map.g01 + map.det*map.g11*map.g01 + map.det*map.g12*map.g02;
  const real G9_1_1 = map.det*map.g10*map.g10 + map.det*map.g11*map.g11 + map.det*map.g11*map.g11 + map.det*map.g12*map.g12;
  const real G9_1_2 = map.det*map.g10*map.g20 + map.det*map.g11*map.g21 + map.det*map.g11*map.g21 + map.det*map.g12*map.g22;
  const real G9_2_0 = map.det*map.g20*map.g00 + map.det*map.g21*map.g01 + map.det*map.g21*map.g01 + map.det*map.g22*map.g02;
  const real G9_2_1 = map.det*map.g20*map.g10 + map.det*map.g21*map.g11 + map.det*map.g21*map.g11 + map.det*map.g22*map.g12;
  const real G9_2_2 = map.det*map.g20*map.g20 + map.det*map.g21*map.g21 + map.det*map.g21*map.g21 + map.det*map.g22*map.g22;
  const real G10_0_0 = map.det*map.g00*map.g01;
  const real G10_0_1 = map.det*map.g00*map.g11;
  const real G10_0_2 = map.det*map.g00*map.g21;
  const real G10_1_0 = map.det*map.g10*map.g01;
  const real G10_1_1 = map.det*map.g10*map.g11;
  const real G10_1_2 = map.det*map.g10*map.g21;
  const real G10_2_0 = map.det*map.g20*map.g01;
  const real G10_2_1 = map.det*map.g20*map.g11;
  const real G10_2_2 = map.det*map.g20*map.g21;
  const real G14_0_0 = map.det*map.g01*map.g00 + map.det*map.g01*map.g00;
  const real G14_0_1 = map.det*map.g01*map.g10 + map.det*map.g01*map.g10;
  const real G14_0_2 = map.det*map.g01*map.g20 + map.det*map.g01*map.g20;
  const real G14_1_0 = map.det*map.g11*map.g00 + map.det*map.g11*map.g00;
  const real G14_1_1 = map.det*map.g11*map.g10 + map.det*map.g11*map.g10;
  const real G14_1_2 = map.det*map.g11*map.g20 + map.det*map.g11*map.g20;
  const real G14_2_0 = map.det*map.g21*map.g00 + map.det*map.g21*map.g00;
  const real G14_2_1 = map.det*map.g21*map.g10 + map.det*map.g21*map.g10;
  const real G14_2_2 = map.det*map.g21*map.g20 + map.det*map.g21*map.g20;
  const real G15_0_0 = map.det*map.g01*map.g01 + map.det*map.g01*map.g01;
  const real G15_0_1 = map.det*map.g01*map.g11 + map.det*map.g01*map.g11;
  const real G15_0_2 = map.det*map.g01*map.g21 + map.det*map.g01*map.g21;
  const real G15_1_0 = map.det*map.g11*map.g01 + map.det*map.g11*map.g01;
  const real G15_1_1 = map.det*map.g11*map.g11 + map.det*map.g11*map.g11;
  const real G15_1_2 = map.det*map.g11*map.g21 + map.det*map.g11*map.g21;
  const real G15_2_0 = map.det*map.g21*map.g01 + map.det*map.g21*map.g01;
  const real G15_2_1 = map.det*map.g21*map.g11 + map.det*map.g21*map.g11;
  const real G15_2_2 = map.det*map.g21*map.g21 + map.det*map.g21*map.g21;
  const real G16_0_0 = map.det*map.g01*map.g02 + map.det*map.g01*map.g02;
  const real G16_0_1 = map.det*map.g01*map.g12 + map.det*map.g01*map.g12;
  const real G16_0_2 = map.det*map.g01*map.g22 + map.det*map.g01*map.g22;
  const real G16_1_0 = map.det*map.g11*map.g02 + map.det*map.g11*map.g02;
  const real G16_1_1 = map.det*map.g11*map.g12 + map.det*map.g11*map.g12;
  const real G16_1_2 = map.det*map.g11*map.g22 + map.det*map.g11*map.g22;
  const real G16_2_0 = map.det*map.g21*map.g02 + map.det*map.g21*map.g02;
  const real G16_2_1 = map.det*map.g21*map.g12 + map.det*map.g21*map.g12;
  const real G16_2_2 = map.det*map.g21*map.g22 + map.det*map.g21*map.g22;
  const real G17_0_0 = map.det*map.g02*map.g01;
  const real G17_0_1 = map.det*map.g02*map.g11;
  const real G17_0_2 = map.det*map.g02*map.g21;
  const real G17_1_0 = map.det*map.g12*map.g01;
  const real G17_1_1 = map.det*map.g12*map.g11;
  const real G17_1_2 = map.det*map.g12*map.g21;
  const real G17_2_0 = map.det*map.g22*map.g01;
  const real G17_2_1 = map.det*map.g22*map.g11;
  const real G17_2_2 = map.det*map.g22*map.g21;
  const real G18_0_0 = map.det*map.g00*map.g00 + map.det*map.g01*map.g01 + map.det*map.g02*map.g02 + map.det*map.g02*map.g02;
  const real G18_0_1 = map.det*map.g00*map.g10 + map.det*map.g01*map.g11 + map.det*map.g02*map.g12 + map.det*map.g02*map.g12;
  const real G18_0_2 = map.det*map.g00*map.g20 + map.det*map.g01*map.g21 + map.det*map.g02*map.g22 + map.det*map.g02*map.g22;
  const real G18_1_0 = map.det*map.g10*map.g00 + map.det*map.g11*map.g01 + map.det*map.g12*map.g02 + map.det*map.g12*map.g02;
  const real G18_1_1 = map.det*map.g10*map.g10 + map.det*map.g11*map.g11 + map.det*map.g12*map.g12 + map.det*map.g12*map.g12;
  const real G18_1_2 = map.det*map.g10*map.g20 + map.det*map.g11*map.g21 + map.det*map.g12*map.g22 + map.det*map.g12*map.g22;
  const real G18_2_0 = map.det*map.g20*map.g00 + map.det*map.g21*map.g01 + map.det*map.g22*map.g02 + map.det*map.g22*map.g02;
  const real G18_2_1 = map.det*map.g20*map.g10 + map.det*map.g21*map.g11 + map.det*map.g22*map.g12 + map.det*map.g22*map.g12;
  const real G18_2_2 = map.det*map.g20*map.g20 + map.det*map.g21*map.g21 + map.det*map.g22*map.g22 + map.det*map.g22*map.g22;
  const real G19_0_0 = map.det*map.g00*map.g02;
  const real G19_0_1 = map.det*map.g00*map.g12;
  const real G19_0_2 = map.det*map.g00*map.g22;
  const real G19_1_0 = map.det*map.g10*map.g02;
  const real G19_1_1 = map.det*map.g10*map.g12;
  const real G19_1_2 = map.det*map.g10*map.g22;
  const real G19_2_0 = map.det*map.g20*map.g02;
  const real G19_2_1 = map.det*map.g20*map.g12;
  const real G19_2_2 = map.det*map.g20*map.g22;
  const real G23_0_0 = map.det*map.g01*map.g02;
  const real G23_0_1 = map.det*map.g01*map.g12;
  const real G23_0_2 = map.det*map.g01*map.g22;
  const real G23_1_0 = map.det*map.g11*map.g02;
  const real G23_1_1 = map.det*map.g11*map.g12;
  const real G23_1_2 = map.det*map.g11*map.g22;
  const real G23_2_0 = map.det*map.g21*map.g02;
  const real G23_2_1 = map.det*map.g21*map.g12;
  const real G23_2_2 = map.det*map.g21*map.g22;
  const real G24_0_0 = map.det*map.g02*map.g00 + map.det*map.g02*map.g00;
  const real G24_0_1 = map.det*map.g02*map.g10 + map.det*map.g02*map.g10;
  const real G24_0_2 = map.det*map.g02*map.g20 + map.det*map.g02*map.g20;
  const real G24_1_0 = map.det*map.g12*map.g00 + map.det*map.g12*map.g00;
  const real G24_1_1 = map.det*map.g12*map.g10 + map.det*map.g12*map.g10;
  const real G24_1_2 = map.det*map.g12*map.g20 + map.det*map.g12*map.g20;
  const real G24_2_0 = map.det*map.g22*map.g00 + map.det*map.g22*map.g00;
  const real G24_2_1 = map.det*map.g22*map.g10 + map.det*map.g22*map.g10;
  const real G24_2_2 = map.det*map.g22*map.g20 + map.det*map.g22*map.g20;
  const real G25_0_0 = map.det*map.g02*map.g01 + map.det*map.g02*map.g01;
  const real G25_0_1 = map.det*map.g02*map.g11 + map.det*map.g02*map.g11;
  const real G25_0_2 = map.det*map.g02*map.g21 + map.det*map.g02*map.g21;
  const real G25_1_0 = map.det*map.g12*map.g01 + map.det*map.g12*map.g01;
  const real G25_1_1 = map.det*map.g12*map.g11 + map.det*map.g12*map.g11;
  const real G25_1_2 = map.det*map.g12*map.g21 + map.det*map.g12*map.g21;
  const real G25_2_0 = map.det*map.g22*map.g01 + map.det*map.g22*map.g01;
  const real G25_2_1 = map.det*map.g22*map.g11 + map.det*map.g22*map.g11;
  const real G25_2_2 = map.det*map.g22*map.g21 + map.det*map.g22*map.g21;
  const real G26_0_0 = map.det*map.g02*map.g02 + map.det*map.g02*map.g02;
  const real G26_0_1 = map.det*map.g02*map.g12 + map.det*map.g02*map.g12;
  const real G26_0_2 = map.det*map.g02*map.g22 + map.det*map.g02*map.g22;
  const real G26_1_0 = map.det*map.g12*map.g02 + map.det*map.g12*map.g02;
  const real G26_1_1 = map.det*map.g12*map.g12 + map.det*map.g12*map.g12;
  const real G26_1_2 = map.det*map.g12*map.g22 + map.det*map.g12*map.g22;
  const real G26_2_0 = map.det*map.g22*map.g02 + map.det*map.g22*map.g02;
  const real G26_2_1 = map.det*map.g22*map.g12 + map.det*map.g22*map.g12;
  const real G26_2_2 = map.det*map.g22*map.g22 + map.det*map.g22*map.g22;

  // Compute element tensor
  block[0] = 6.410256410256400e-01*G0_0_0 + 6.410256410256401e-01*G0_0_1 + 6.410256410256400e-01*G0_0_2 + 6.410256410256401e-01*G0_1_0 + 6.410256410256402e-01*G0_1_1 + 6.410256410256401e-01*G0_1_2 + 6.410256410256400e-01*G0_2_0 + 6.410256410256401e-01*G0_2_1 + 6.410256410256400e-01*G0_2_2 + 4.807692307692301e-01*G1_0_0 + 4.807692307692301e-01*G1_0_1 + 4.807692307692301e-01*G1_0_2 + 4.807692307692301e-01*G1_1_0 + 4.807692307692302e-01*G1_1_1 + 4.807692307692301e-01*G1_1_2 + 4.807692307692301e-01*G1_2_0 + 4.807692307692301e-01*G1_2_1 + 4.807692307692301e-01*G1_2_2;
  block[1] = -6.410256410256400e-01*G0_0_0 - 6.410256410256401e-01*G0_1_0 - 6.410256410256400e-01*G0_2_0 - 4.807692307692301e-01*G1_0_0 - 4.807692307692301e-01*G1_1_0 - 4.807692307692301e-01*G1_2_0;
  block[2] = -6.410256410256401e-01*G0_0_1 - 6.410256410256402e-01*G0_1_1 - 6.410256410256401e-01*G0_2_1 - 4.807692307692301e-01*G1_0_1 - 4.807692307692302e-01*G1_1_1 - 4.807692307692301e-01*G1_2_1;
  block[3] = -6.410256410256401e-01*G0_0_2 - 6.410256410256402e-01*G0_1_2 - 6.410256410256401e-01*G0_2_2 - 4.807692307692301e-01*G1_0_2 - 4.807692307692302e-01*G1_1_2 - 4.807692307692301e-01*G1_2_2;
  block[4] = 4.807692307692301e-01*G2_0_0 + 4.807692307692301e-01*G2_0_1 + 4.807692307692301e-01*G2_0_2 + 4.807692307692301e-01*G2_1_0 + 4.807692307692302e-01*G2_1_1 + 4.807692307692302e-01*G2_1_2 + 4.807692307692301e-01*G2_2_0 + 4.807692307692301e-01*G2_2_1 + 4.807692307692301e-01*G2_2_2 + 6.410256410256400e-01*G4_0_0 + 6.410256410256401e-01*G4_0_1 + 6.410256410256401e-01*G4_0_2 + 6.410256410256401e-01*G4_1_0 + 6.410256410256402e-01*G4_1_1 + 6.410256410256402e-01*G4_1_2 + 6.410256410256400e-01*G4_2_0 + 6.410256410256401e-01*G4_2_1 + 6.410256410256401e-01*G4_2_2;
  block[5] = -4.807692307692301e-01*G2_0_0 - 4.807692307692301e-01*G2_1_0 - 4.807692307692301e-01*G2_2_0 - 6.410256410256400e-01*G4_0_0 - 6.410256410256401e-01*G4_1_0 - 6.410256410256400e-01*G4_2_0;
  block[6] = -4.807692307692301e-01*G2_0_1 - 4.807692307692302e-01*G2_1_1 - 4.807692307692301e-01*G2_2_1 - 6.410256410256401e-01*G4_0_1 - 6.410256410256402e-01*G4_1_1 - 6.410256410256401e-01*G4_2_1;
  block[7] = -4.807692307692301e-01*G2_0_2 - 4.807692307692302e-01*G2_1_2 - 4.807692307692301e-01*G2_2_2 - 6.410256410256401e-01*G4_0_2 - 6.410256410256402e-01*G4_1_2 - 6.410256410256401e-01*G4_2_2;
  block[8] = 4.807692307692301e-01*G3_0_0 + 4.807692307692301e-01*G3_0_1 + 4.807692307692301e-01*G3_0_2 + 4.807692307692301e-01*G3_1_0 + 4.807692307692302e-01*G3_1_1 + 4.807692307692302e-01*G3_1_2 + 4.807692307692301e-01*G3_2_0 + 4.807692307692301e-01*G3_2_1 + 4.807692307692301e-01*G3_2_2 + 6.410256410256400e-01*G8_0_0 + 6.410256410256401e-01*G8_0_1 + 6.410256410256401e-01*G8_0_2 + 6.410256410256401e-01*G8_1_0 + 6.410256410256402e-01*G8_1_1 + 6.410256410256402e-01*G8_1_2 + 6.410256410256400e-01*G8_2_0 + 6.410256410256401e-01*G8_2_1 + 6.410256410256401e-01*G8_2_2;
  block[9] = -4.807692307692301e-01*G3_0_0 - 4.807692307692301e-01*G3_1_0 - 4.807692307692301e-01*G3_2_0 - 6.410256410256400e-01*G8_0_0 - 6.410256410256401e-01*G8_1_0 - 6.410256410256400e-01*G8_2_0;
  block[10] = -4.807692307692301e-01*G3_0_1 - 4.807692307692302e-01*G3_1_1 - 4.807692307692301e-01*G3_2_1 - 6.410256410256401e-01*G8_0_1 - 6.410256410256402e-01*G8_1_1 - 6.410256410256401e-01*G8_2_1;
  block[11] = -4.807692307692301e-01*G3_0_2 - 4.807692307692302e-01*G3_1_2 - 4.807692307692301e-01*G3_2_2 - 6.410256410256401e-01*G8_0_2 - 6.410256410256402e-01*G8_1_2 - 6.410256410256401e-01*G8_2_2;
  block[12] = -6.410256410256400e-01*G0_0_0 - 6.410256410256401e-01*G0_0_1 - 6.410256410256400e-01*G0_0_2 - 4.807692307692301e-01*G1_0_0 - 4.807692307692301e-01*G1_0_1 - 4.807692307692301e-01*G1_0_2;
  block[13] = 6.410256410256400e-01*G0_0_0 + 4.807692307692301e-01*G1_0_0;
  block[14] = 6.410256410256401e-01*G0_0_1 + 4.807692307692301e-01*G1_0_1;
  block[15] = 6.410256410256401e-01*G0_0_2 + 4.807692307692301e-01*G1_0_2;
  block[16] = -4.807692307692301e-01*G2_0_0 - 4.807692307692301e-01*G2_0_1 - 4.807692307692301e-01*G2_0_2 - 6.410256410256400e-01*G4_0_0 - 6.410256410256401e-01*G4_0_1 - 6.410256410256401e-01*G4_0_2;
  block[17] = 4.807692307692301e-01*G2_0_0 + 6.410256410256400e-01*G4_0_0;
  block[18] = 4.807692307692301e-01*G2_0_1 + 6.410256410256401e-01*G4_0_1;
  block[19] = 4.807692307692301e-01*G2_0_2 + 6.410256410256401e-01*G4_0_2;
  block[20] = -4.807692307692301e-01*G3_0_0 - 4.807692307692301e-01*G3_0_1 - 4.807692307692301e-01*G3_0_2 - 6.410256410256400e-01*G8_0_0 - 6.410256410256401e-01*G8_0_1 - 6.410256410256401e-01*G8_0_2;
  block[21] = 4.807692307692301e-01*G3_0_0 + 6.410256410256400e-01*G8_0_0;
  block[22] = 4.807692307692301e-01*G3_0_1 + 6.410256410256401e-01*G8_0_1;
  block[23] = 4.807692307692301e-01*G3_0_2 + 6.410256410256401e-01*G8_0_2;
  block[24] = -6.410256410256401e-01*G0_1_0 - 6.410256410256402e-01*G0_1_1 - 6.410256410256401e-01*G0_1_2 - 4.807692307692301e-01*G1_1_0 - 4.807692307692302e-01*G1_1_1 - 4.807692307692301e-01*G1_1_2;
  block[25] = 6.410256410256401e-01*G0_1_0 + 4.807692307692301e-01*G1_1_0;
  block[26] = 6.410256410256402e-01*G0_1_1 + 4.807692307692302e-01*G1_1_1;
  block[27] = 6.410256410256402e-01*G0_1_2 + 4.807692307692302e-01*G1_1_2;
  block[28] = -4.807692307692301e-01*G2_1_0 - 4.807692307692302e-01*G2_1_1 - 4.807692307692302e-01*G2_1_2 - 6.410256410256401e-01*G4_1_0 - 6.410256410256402e-01*G4_1_1 - 6.410256410256402e-01*G4_1_2;
  block[29] = 4.807692307692301e-01*G2_1_0 + 6.410256410256401e-01*G4_1_0;
  block[30] = 4.807692307692302e-01*G2_1_1 + 6.410256410256402e-01*G4_1_1;
  block[31] = 4.807692307692302e-01*G2_1_2 + 6.410256410256402e-01*G4_1_2;
  block[32] = -4.807692307692301e-01*G3_1_0 - 4.807692307692302e-01*G3_1_1 - 4.807692307692302e-01*G3_1_2 - 6.410256410256401e-01*G8_1_0 - 6.410256410256402e-01*G8_1_1 - 6.410256410256402e-01*G8_1_2;
  block[33] = 4.807692307692301e-01*G3_1_0 + 6.410256410256401e-01*G8_1_0;
  block[34] = 4.807692307692302e-01*G3_1_1 + 6.410256410256402e-01*G8_1_1;
  block[35] = 4.807692307692302e-01*G3_1_2 + 6.410256410256402e-01*G8_1_2;
  block[36] = -6.410256410256401e-01*G0_2_0 - 6.410256410256402e-01*G0_2_1 - 6.410256410256401e-01*G0_2_2 - 4.807692307692301e-01*G1_2_0 - 4.807692307692302e-01*G1_2_1 - 4.807692307692301e-01*G1_2_2;
  block[37] = 6.410256410256401e-01*G0_2_0 + 4.807692307692301e-01*G1_2_0;
  block[38] = 6.410256410256402e-01*G0_2_1 + 4.807692307692302e-01*G1_2_1;
  block[39] = 6.410256410256402e-01*G0_2_2 + 4.807692307692302e-01*G1_2_2;
  block[40] = -4.807692307692301e-01*G2_2_0 - 4.807692307692302e-01*G2_2_1 - 4.807692307692302e-01*G2_2_2 - 6.410256410256401e-01*G4_2_0 - 6.410256410256402e-01*G4_2_1 - 6.410256410256402e-01*G4_2_2;
  block[41] = 4.807692307692301e-01*G2_2_0 + 6.410256410256401e-01*G4_2_0;
  block[42] = 4.807692307692302e-01*G2_2_1 + 6.410256410256402e-01*G4_2_1;
  block[43] = 4.807692307692302e-01*G2_2_2 + 6.410256410256402e-01*G4_2_2;
  block[44] = -4.807692307692301e-01*G3_2_0 - 4.807692307692302e-01*G3_2_1 - 4.807692307692302e-01*G3_2_2 - 6.410256410256401e-01*G8_2_0 - 6.410256410256402e-01*G8_2_1 - 6.410256410256402e-01*G8_2_2;
  block[45] = 4.807692307692301e-01*G3_2_0 + 6.410256410256401e-01*G8_2_0;
  block[46] = 4.807692307692302e-01*G3_2_1 + 6.410256410256402e-01*G8_2_1;
  block[47] = 4.807692307692302e-01*G3_2_2 + 6.410256410256402e-01*G8_2_2;
  block[48] = 6.410256410256400e-01*G10_0_0 + 6.410256410256401e-01*G10_0_1 + 6.410256410256400e-01*G10_0_2 + 6.410256410256401e-01*G10_1_0 + 6.410256410256402e-01*G10_1_1 + 6.410256410256401e-01*G10_1_2 + 6.410256410256401e-01*G10_2_0 + 6.410256410256402e-01*G10_2_1 + 6.410256410256401e-01*G10_2_2 + 4.807692307692301e-01*G14_0_0 + 4.807692307692301e-01*G14_0_1 + 4.807692307692301e-01*G14_0_2 + 4.807692307692301e-01*G14_1_0 + 4.807692307692302e-01*G14_1_1 + 4.807692307692301e-01*G14_1_2 + 4.807692307692301e-01*G14_2_0 + 4.807692307692302e-01*G14_2_1 + 4.807692307692301e-01*G14_2_2;
  block[49] = -6.410256410256400e-01*G10_0_0 - 6.410256410256401e-01*G10_1_0 - 6.410256410256401e-01*G10_2_0 - 4.807692307692301e-01*G14_0_0 - 4.807692307692301e-01*G14_1_0 - 4.807692307692301e-01*G14_2_0;
  block[50] = -6.410256410256401e-01*G10_0_1 - 6.410256410256402e-01*G10_1_1 - 6.410256410256402e-01*G10_2_1 - 4.807692307692301e-01*G14_0_1 - 4.807692307692302e-01*G14_1_1 - 4.807692307692302e-01*G14_2_1;
  block[51] = -6.410256410256401e-01*G10_0_2 - 6.410256410256402e-01*G10_1_2 - 6.410256410256402e-01*G10_2_2 - 4.807692307692301e-01*G14_0_2 - 4.807692307692302e-01*G14_1_2 - 4.807692307692302e-01*G14_2_2;
  block[52] = 6.410256410256400e-01*G9_0_0 + 6.410256410256401e-01*G9_0_1 + 6.410256410256401e-01*G9_0_2 + 6.410256410256401e-01*G9_1_0 + 6.410256410256402e-01*G9_1_1 + 6.410256410256402e-01*G9_1_2 + 6.410256410256401e-01*G9_2_0 + 6.410256410256402e-01*G9_2_1 + 6.410256410256402e-01*G9_2_2 + 4.807692307692301e-01*G15_0_0 + 4.807692307692301e-01*G15_0_1 + 4.807692307692301e-01*G15_0_2 + 4.807692307692301e-01*G15_1_0 + 4.807692307692302e-01*G15_1_1 + 4.807692307692302e-01*G15_1_2 + 4.807692307692301e-01*G15_2_0 + 4.807692307692302e-01*G15_2_1 + 4.807692307692302e-01*G15_2_2;
  block[53] = -6.410256410256400e-01*G9_0_0 - 6.410256410256401e-01*G9_1_0 - 6.410256410256401e-01*G9_2_0 - 4.807692307692301e-01*G15_0_0 - 4.807692307692301e-01*G15_1_0 - 4.807692307692301e-01*G15_2_0;
  block[54] = -6.410256410256401e-01*G9_0_1 - 6.410256410256402e-01*G9_1_1 - 6.410256410256402e-01*G9_2_1 - 4.807692307692301e-01*G15_0_1 - 4.807692307692302e-01*G15_1_1 - 4.807692307692302e-01*G15_2_1;
  block[55] = -6.410256410256401e-01*G9_0_2 - 6.410256410256402e-01*G9_1_2 - 6.410256410256402e-01*G9_2_2 - 4.807692307692301e-01*G15_0_2 - 4.807692307692302e-01*G15_1_2 - 4.807692307692302e-01*G15_2_2;
  block[56] = 4.807692307692301e-01*G16_0_0 + 4.807692307692301e-01*G16_0_1 + 4.807692307692301e-01*G16_0_2 + 4.807692307692301e-01*G16_1_0 + 4.807692307692302e-01*G16_1_1 + 4.807692307692302e-01*G16_1_2 + 4.807692307692301e-01*G16_2_0 + 4.807692307692302e-01*G16_2_1 + 4.807692307692302e-01*G16_2_2 + 6.410256410256400e-01*G17_0_0 + 6.410256410256401e-01*G17_0_1 + 6.410256410256401e-01*G17_0_2 + 6.410256410256401e-01*G17_1_0 + 6.410256410256402e-01*G17_1_1 + 6.410256410256402e-01*G17_1_2 + 6.410256410256401e-01*G17_2_0 + 6.410256410256402e-01*G17_2_1 + 6.410256410256402e-01*G17_2_2;
  block[57] = -4.807692307692301e-01*G16_0_0 - 4.807692307692301e-01*G16_1_0 - 4.807692307692301e-01*G16_2_0 - 6.410256410256400e-01*G17_0_0 - 6.410256410256401e-01*G17_1_0 - 6.410256410256401e-01*G17_2_0;
  block[58] = -4.807692307692301e-01*G16_0_1 - 4.807692307692302e-01*G16_1_1 - 4.807692307692302e-01*G16_2_1 - 6.410256410256401e-01*G17_0_1 - 6.410256410256402e-01*G17_1_1 - 6.410256410256402e-01*G17_2_1;
  block[59] = -4.807692307692301e-01*G16_0_2 - 4.807692307692302e-01*G16_1_2 - 4.807692307692302e-01*G16_2_2 - 6.410256410256401e-01*G17_0_2 - 6.410256410256402e-01*G17_1_2 - 6.410256410256402e-01*G17_2_2;
  block[60] = -6.410256410256400e-01*G10_0_0 - 6.410256410256401e-01*G10_0_1 - 6.410256410256400e-01*G10_0_2 - 4.807692307692301e-01*G14_0_0 - 4.807692307692301e-01*G14_0_1 - 4.807692307692301e-01*G14_0_2;
  block[61] = 6.410256410256400e-01*G10_0_0 + 4.807692307692301e-01*G14_0_0;
  block[62] = 6.410256410256401e-01*G10_0_1 + 4.807692307692301e-01*G14_0_1;
  block[63] = 6.410256410256401e-01*G10_0_2 + 4.807692307692301e-01*G14_0_2;
  block[64] = -6.410256410256400e-01*G9_0_0 - 6.410256410256401e-01*G9_0_1 - 6.410256410256401e-01*G9_0_2 - 4.807692307692301e-01*G15_0_0 - 4.807692307692301e-01*G15_0_1 - 4.807692307692301e-01*G15_0_2;
  block[65] = 6.410256410256400e-01*G9_0_0 + 4.807692307692301e-01*G15_0_0;
  block[66] = 6.410256410256401e-01*G9_0_1 + 4.807692307692301e-01*G15_0_1;
  block[67] = 6.410256410256401e-01*G9_0_2 + 4.807692307692301e-01*G15_0_2;
  block[68] = -4.807692307692301e-01*G16_0_0 - 4.807692307692301e-01*G16_0_1 - 4.807692307692301e-01*G16_0_2 - 6.410256410256400e-01*G17_0_0 - 6.410256410256401e-01*G17_0_1 - 6.410256410256401e-01*G17_0_2;
  block[69] = 4.807692307692301e-01*G16_0_0 + 6.410256410256400e-01*G17_0_0;
  block[70] = 4.807692307692301e-01*G16_0_1 + 6.410256410256401e-01*G17_0_1;
  block[71] = 4.807692307692301e-01*G16_0_2 + 6.410256410256401e-01*G17_0_2;
  block[72] = -6.410256410256401e-01*G10_1_0 - 6.410256410256402e-01*G10_1_1 - 6.410256410256401e-01*G10_1_2 - 4.807692307692301e-01*G14_1_0 - 4.807692307692302e-01*G14_1_1 - 4.807692307692301e-01*G14_1_2;
  block[73] = 6.410256410256401e-01*G10_1_0 + 4.807692307692301e-01*G14_1_0;
  block[74] = 6.410256410256402e-01*G10_1_1 + 4.807692307692302e-01*G14_1_1;
  block[75] = 6.410256410256402e-01*G10_1_2 + 4.807692307692302e-01*G14_1_2;
  block[76] = -6.410256410256401e-01*G9_1_0 - 6.410256410256402e-01*G9_1_1 - 6.410256410256402e-01*G9_1_2 - 4.807692307692301e-01*G15_1_0 - 4.807692307692302e-01*G15_1_1 - 4.807692307692302e-01*G15_1_2;
  block[77] = 6.410256410256401e-01*G9_1_0 + 4.807692307692301e-01*G15_1_0;
  block[78] = 6.410256410256402e-01*G9_1_1 + 4.807692307692302e-01*G15_1_1;
  block[79] = 6.410256410256402e-01*G9_1_2 + 4.807692307692302e-01*G15_1_2;
  block[80] = -4.807692307692301e-01*G16_1_0 - 4.807692307692302e-01*G16_1_1 - 4.807692307692302e-01*G16_1_2 - 6.410256410256401e-01*G17_1_0 - 6.410256410256402e-01*G17_1_1 - 6.410256410256402e-01*G17_1_2;
  block[81] = 4.807692307692301e-01*G16_1_0 + 6.410256410256401e-01*G17_1_0;
  block[82] = 4.807692307692302e-01*G16_1_1 + 6.410256410256402e-01*G17_1_1;
  block[83] = 4.807692307692302e-01*G16_1_2 + 6.410256410256402e-01*G17_1_2;
  block[84] = -6.410256410256401e-01*G10_2_0 - 6.410256410256402e-01*G10_2_1 - 6.410256410256401e-01*G10_2_2 - 4.807692307692301e-01*G14_2_0 - 4.807692307692302e-01*G14_2_1 - 4.807692307692301e-01*G14_2_2;
  block[85] = 6.410256410256401e-01*G10_2_0 + 4.807692307692301e-01*G14_2_0;
  block[86] = 6.410256410256402e-01*G10_2_1 + 4.807692307692302e-01*G14_2_1;
  block[87] = 6.410256410256402e-01*G10_2_2 + 4.807692307692302e-01*G14_2_2;
  block[88] = -6.410256410256401e-01*G9_2_0 - 6.410256410256402e-01*G9_2_1 - 6.410256410256402e-01*G9_2_2 - 4.807692307692301e-01*G15_2_0 - 4.807692307692302e-01*G15_2_1 - 4.807692307692302e-01*G15_2_2;
  block[89] = 6.410256410256401e-01*G9_2_0 + 4.807692307692301e-01*G15_2_0;
  block[90] = 6.410256410256402e-01*G9_2_1 + 4.807692307692302e-01*G15_2_1;
  block[91] = 6.410256410256402e-01*G9_2_2 + 4.807692307692302e-01*G15_2_2;
  block[92] = -4.807692307692301e-01*G16_2_0 - 4.807692307692302e-01*G16_2_1 - 4.807692307692302e-01*G16_2_2 - 6.410256410256401e-01*G17_2_0 - 6.410256410256402e-01*G17_2_1 - 6.410256410256402e-01*G17_2_2;
  block[93] = 4.807692307692301e-01*G16_2_0 + 6.410256410256401e-01*G17_2_0;
  block[94] = 4.807692307692302e-01*G16_2_1 + 6.410256410256402e-01*G17_2_1;
  block[95] = 4.807692307692302e-01*G16_2_2 + 6.410256410256402e-01*G17_2_2;
  block[96] = 6.410256410256400e-01*G19_0_0 + 6.410256410256401e-01*G19_0_1 + 6.410256410256400e-01*G19_0_2 + 6.410256410256401e-01*G19_1_0 + 6.410256410256402e-01*G19_1_1 + 6.410256410256401e-01*G19_1_2 + 6.410256410256401e-01*G19_2_0 + 6.410256410256402e-01*G19_2_1 + 6.410256410256401e-01*G19_2_2 + 4.807692307692301e-01*G24_0_0 + 4.807692307692301e-01*G24_0_1 + 4.807692307692301e-01*G24_0_2 + 4.807692307692301e-01*G24_1_0 + 4.807692307692302e-01*G24_1_1 + 4.807692307692301e-01*G24_1_2 + 4.807692307692301e-01*G24_2_0 + 4.807692307692302e-01*G24_2_1 + 4.807692307692301e-01*G24_2_2;
  block[97] = -6.410256410256400e-01*G19_0_0 - 6.410256410256401e-01*G19_1_0 - 6.410256410256401e-01*G19_2_0 - 4.807692307692301e-01*G24_0_0 - 4.807692307692301e-01*G24_1_0 - 4.807692307692301e-01*G24_2_0;
  block[98] = -6.410256410256401e-01*G19_0_1 - 6.410256410256402e-01*G19_1_1 - 6.410256410256402e-01*G19_2_1 - 4.807692307692301e-01*G24_0_1 - 4.807692307692302e-01*G24_1_1 - 4.807692307692302e-01*G24_2_1;
  block[99] = -6.410256410256401e-01*G19_0_2 - 6.410256410256402e-01*G19_1_2 - 6.410256410256402e-01*G19_2_2 - 4.807692307692301e-01*G24_0_2 - 4.807692307692302e-01*G24_1_2 - 4.807692307692302e-01*G24_2_2;
  block[100] = 6.410256410256400e-01*G23_0_0 + 6.410256410256401e-01*G23_0_1 + 6.410256410256401e-01*G23_0_2 + 6.410256410256401e-01*G23_1_0 + 6.410256410256402e-01*G23_1_1 + 6.410256410256402e-01*G23_1_2 + 6.410256410256401e-01*G23_2_0 + 6.410256410256402e-01*G23_2_1 + 6.410256410256402e-01*G23_2_2 + 4.807692307692301e-01*G25_0_0 + 4.807692307692301e-01*G25_0_1 + 4.807692307692301e-01*G25_0_2 + 4.807692307692301e-01*G25_1_0 + 4.807692307692302e-01*G25_1_1 + 4.807692307692302e-01*G25_1_2 + 4.807692307692301e-01*G25_2_0 + 4.807692307692302e-01*G25_2_1 + 4.807692307692302e-01*G25_2_2;
  block[101] = -6.410256410256400e-01*G23_0_0 - 6.410256410256401e-01*G23_1_0 - 6.410256410256401e-01*G23_2_0 - 4.807692307692301e-01*G25_0_0 - 4.807692307692301e-01*G25_1_0 - 4.807692307692301e-01*G25_2_0;
  block[102] = -6.410256410256401e-01*G23_0_1 - 6.410256410256402e-01*G23_1_1 - 6.410256410256402e-01*G23_2_1 - 4.807692307692301e-01*G25_0_1 - 4.807692307692302e-01*G25_1_1 - 4.807692307692302e-01*G25_2_1;
  block[103] = -6.410256410256401e-01*G23_0_2 - 6.410256410256402e-01*G23_1_2 - 6.410256410256402e-01*G23_2_2 - 4.807692307692301e-01*G25_0_2 - 4.807692307692302e-01*G25_1_2 - 4.807692307692302e-01*G25_2_2;
  block[104] = 6.410256410256400e-01*G18_0_0 + 6.410256410256401e-01*G18_0_1 + 6.410256410256401e-01*G18_0_2 + 6.410256410256401e-01*G18_1_0 + 6.410256410256402e-01*G18_1_1 + 6.410256410256402e-01*G18_1_2 + 6.410256410256401e-01*G18_2_0 + 6.410256410256402e-01*G18_2_1 + 6.410256410256402e-01*G18_2_2 + 4.807692307692301e-01*G26_0_0 + 4.807692307692301e-01*G26_0_1 + 4.807692307692301e-01*G26_0_2 + 4.807692307692301e-01*G26_1_0 + 4.807692307692302e-01*G26_1_1 + 4.807692307692302e-01*G26_1_2 + 4.807692307692301e-01*G26_2_0 + 4.807692307692302e-01*G26_2_1 + 4.807692307692302e-01*G26_2_2;
  block[105] = -6.410256410256400e-01*G18_0_0 - 6.410256410256401e-01*G18_1_0 - 6.410256410256401e-01*G18_2_0 - 4.807692307692301e-01*G26_0_0 - 4.807692307692301e-01*G26_1_0 - 4.807692307692301e-01*G26_2_0;
  block[106] = -6.410256410256401e-01*G18_0_1 - 6.410256410256402e-01*G18_1_1 - 6.410256410256402e-01*G18_2_1 - 4.807692307692301e-01*G26_0_1 - 4.807692307692302e-01*G26_1_1 - 4.807692307692302e-01*G26_2_1;
  block[107] = -6.410256410256401e-01*G18_0_2 - 6.410256410256402e-01*G18_1_2 - 6.410256410256402e-01*G18_2_2 - 4.807692307692301e-01*G26_0_2 - 4.807692307692302e-01*G26_1_2 - 4.807692307692302e-01*G26_2_2;
  block[108] = -6.410256410256400e-01*G19_0_0 - 6.410256410256401e-01*G19_0_1 - 6.410256410256400e-01*G19_0_2 - 4.807692307692301e-01*G24_0_0 - 4.807692307692301e-01*G24_0_1 - 4.807692307692301e-01*G24_0_2;
  block[109] = 6.410256410256400e-01*G19_0_0 + 4.807692307692301e-01*G24_0_0;
  block[110] = 6.410256410256401e-01*G19_0_1 + 4.807692307692301e-01*G24_0_1;
  block[111] = 6.410256410256401e-01*G19_0_2 + 4.807692307692301e-01*G24_0_2;
  block[112] = -6.410256410256400e-01*G23_0_0 - 6.410256410256401e-01*G23_0_1 - 6.410256410256401e-01*G23_0_2 - 4.807692307692301e-01*G25_0_0 - 4.807692307692301e-01*G25_0_1 - 4.807692307692301e-01*G25_0_2;
  block[113] = 6.410256410256400e-01*G23_0_0 + 4.807692307692301e-01*G25_0_0;
  block[114] = 6.410256410256401e-01*G23_0_1 + 4.807692307692301e-01*G25_0_1;
  block[115] = 6.410256410256401e-01*G23_0_2 + 4.807692307692301e-01*G25_0_2;
  block[116] = -6.410256410256400e-01*G18_0_0 - 6.410256410256401e-01*G18_0_1 - 6.410256410256401e-01*G18_0_2 - 4.807692307692301e-01*G26_0_0 - 4.807692307692301e-01*G26_0_1 - 4.807692307692301e-01*G26_0_2;
  block[117] = 6.410256410256400e-01*G18_0_0 + 4.807692307692301e-01*G26_0_0;
  block[118] = 6.410256410256401e-01*G18_0_1 + 4.807692307692301e-01*G26_0_1;
  block[119] = 6.410256410256401e-01*G18_0_2 + 4.807692307692301e-01*G26_0_2;
  block[120] = -6.410256410256401e-01*G19_1_0 - 6.410256410256402e-01*G19_1_1 - 6.410256410256401e-01*G19_1_2 - 4.807692307692301e-01*G24_1_0 - 4.807692307692302e-01*G24_1_1 - 4.807692307692301e-01*G24_1_2;
  block[121] = 6.410256410256401e-01*G19_1_0 + 4.807692307692301e-01*G24_1_0;
  block[122] = 6.410256410256402e-01*G19_1_1 + 4.807692307692302e-01*G24_1_1;
  block[123] = 6.410256410256402e-01*G19_1_2 + 4.807692307692302e-01*G24_1_2;
  block[124] = -6.410256410256401e-01*G23_1_0 - 6.410256410256402e-01*G23_1_1 - 6.410256410256402e-01*G23_1_2 - 4.807692307692301e-01*G25_1_0 - 4.807692307692302e-01*G25_1_1 - 4.807692307692302e-01*G25_1_2;
  block[125] = 6.410256410256401e-01*G23_1_0 + 4.807692307692301e-01*G25_1_0;
  block[126] = 6.410256410256402e-01*G23_1_1 + 4.807692307692302e-01*G25_1_1;
  block[127] = 6.410256410256402e-01*G23_1_2 + 4.807692307692302e-01*G25_1_2;
  block[128] = -6.410256410256401e-01*G18_1_0 - 6.410256410256402e-01*G18_1_1 - 6.410256410256402e-01*G18_1_2 - 4.807692307692301e-01*G26_1_0 - 4.807692307692302e-01*G26_1_1 - 4.807692307692302e-01*G26_1_2;
  block[129] = 6.410256410256401e-01*G18_1_0 + 4.807692307692301e-01*G26_1_0;
  block[130] = 6.410256410256402e-01*G18_1_1 + 4.807692307692302e-01*G26_1_1;
  block[131] = 6.410256410256402e-01*G18_1_2 + 4.807692307692302e-01*G26_1_2;
  block[132] = -6.410256410256401e-01*G19_2_0 - 6.410256410256402e-01*G19_2_1 - 6.410256410256401e-01*G19_2_2 - 4.807692307692301e-01*G24_2_0 - 4.807692307692302e-01*G24_2_1 - 4.807692307692301e-01*G24_2_2;
  block[133] = 6.410256410256401e-01*G19_2_0 + 4.807692307692301e-01*G24_2_0;
  block[134] = 6.410256410256402e-01*G19_2_1 + 4.807692307692302e-01*G24_2_1;
  block[135] = 6.410256410256402e-01*G19_2_2 + 4.807692307692302e-01*G24_2_2;
  block[136] = -6.410256410256401e-01*G23_2_0 - 6.410256410256402e-01*G23_2_1 - 6.410256410256402e-01*G23_2_2 - 4.807692307692301e-01*G25_2_0 - 4.807692307692302e-01*G25_2_1 - 4.807692307692302e-01*G25_2_2;
  block[137] = 6.410256410256401e-01*G23_2_0 + 4.807692307692301e-01*G25_2_0;
  block[138] = 6.410256410256402e-01*G23_2_1 + 4.807692307692302e-01*G25_2_1;
  block[139] = 6.410256410256402e-01*G23_2_2 + 4.807692307692302e-01*G25_2_2;
  block[140] = -6.410256410256401e-01*G18_2_0 - 6.410256410256402e-01*G18_2_1 - 6.410256410256402e-01*G18_2_2 - 4.807692307692301e-01*G26_2_0 - 4.807692307692302e-01*G26_2_1 - 4.807692307692302e-01*G26_2_2;
  block[141] = 6.410256410256401e-01*G18_2_0 + 4.807692307692301e-01*G26_2_0;
  block[142] = 6.410256410256402e-01*G18_2_1 + 4.807692307692302e-01*G26_2_1;
  block[143] = 6.410256410256402e-01*G18_2_2 + 4.807692307692302e-01*G26_2_2;
}

// No contribution from the boundary
void BilinearForm::eval(real block[], const AffineMap& map, unsigned int facet) const {}   
/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class LinearForm : public dolfin::LinearForm
{
public:

  class TestElement;

  class FunctionElement_0;

  LinearForm(Function& w0);
  

  void eval(real block[], const AffineMap& map) const;

  void eval(real block[], const AffineMap& map, unsigned int facet) const;

};

class LinearForm::TestElement : public dolfin::FiniteElement
{
public:

  TestElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 3;

    // Element is simple, don't need to initialize subelements
  }

  ~TestElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 12;
  }

  inline unsigned int shapedim() const
  {
    return 3;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.vertexID(0);
    nodes[1] = cell.vertexID(1);
    nodes[2] = cell.vertexID(2);
    nodes[3] = cell.vertexID(3);
    int offset = mesh.numVertices();
    nodes[4] = offset + cell.vertexID(0);
    nodes[5] = offset + cell.vertexID(1);
    nodes[6] = offset + cell.vertexID(2);
    nodes[7] = offset + cell.vertexID(3);
    offset = offset + mesh.numVertices();
    nodes[8] = offset + cell.vertexID(0);
    nodes[9] = offset + cell.vertexID(1);
    nodes[10] = offset + cell.vertexID(2);
    nodes[11] = offset + cell.vertexID(3);
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[4] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[6] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[7] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[8] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[9] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[10] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[11] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
    components[4] = 1;
    components[5] = 1;
    components[6] = 1;
    components[7] = 1;
    components[8] = 2;
    components[9] = 2;
    components[10] = 2;
    components[11] = 2;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.numVertices();
    vertex_nodes[1] = offset + vertex;
    offset = offset + mesh.numVertices();
    vertex_nodes[2] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "tetrahedron", 1, 3);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class LinearForm::FunctionElement_0 : public dolfin::FiniteElement
{
public:

  FunctionElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 3;

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 12;
  }

  inline unsigned int shapedim() const
  {
    return 3;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.vertexID(0);
    nodes[1] = cell.vertexID(1);
    nodes[2] = cell.vertexID(2);
    nodes[3] = cell.vertexID(3);
    int offset = mesh.numVertices();
    nodes[4] = offset + cell.vertexID(0);
    nodes[5] = offset + cell.vertexID(1);
    nodes[6] = offset + cell.vertexID(2);
    nodes[7] = offset + cell.vertexID(3);
    offset = offset + mesh.numVertices();
    nodes[8] = offset + cell.vertexID(0);
    nodes[9] = offset + cell.vertexID(1);
    nodes[10] = offset + cell.vertexID(2);
    nodes[11] = offset + cell.vertexID(3);
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[4] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[6] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[7] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[8] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[9] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[10] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[11] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
    components[4] = 1;
    components[5] = 1;
    components[6] = 1;
    components[7] = 1;
    components[8] = 2;
    components[9] = 2;
    components[10] = 2;
    components[11] = 2;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.numVertices();
    vertex_nodes[1] = offset + vertex;
    offset = offset + mesh.numVertices();
    vertex_nodes[2] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "tetrahedron", 1, 3);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

LinearForm::LinearForm(Function& w0) : dolfin::LinearForm(1)
{
  // Create finite element for test space
  _test = new TestElement();

  // Add functions
  initFunction(0, w0, new FunctionElement_0());
}

void LinearForm::eval(real block[], const AffineMap& map) const
{
  // Compute coefficients
  const real c0_0 = c[0][0];
  const real c0_1 = c[0][1];
  const real c0_2 = c[0][2];
  const real c0_3 = c[0][3];
  const real c0_4 = c[0][4];
  const real c0_5 = c[0][5];
  const real c0_6 = c[0][6];
  const real c0_7 = c[0][7];
  const real c0_8 = c[0][8];
  const real c0_9 = c[0][9];
  const real c0_10 = c[0][10];
  const real c0_11 = c[0][11];

  // Compute geometry tensors
  const real G0_0 = map.det*c0_0;
  const real G0_1 = map.det*c0_1;
  const real G0_2 = map.det*c0_2;
  const real G0_3 = map.det*c0_3;
  const real G0_4 = map.det*c0_4;
  const real G0_5 = map.det*c0_5;
  const real G0_6 = map.det*c0_6;
  const real G0_7 = map.det*c0_7;
  const real G0_8 = map.det*c0_8;
  const real G0_9 = map.det*c0_9;
  const real G0_10 = map.det*c0_10;
  const real G0_11 = map.det*c0_11;

  // Compute element tensor
  block[0] = 1.666666666666662e-02*G0_0 + 8.333333333333307e-03*G0_1 + 8.333333333333309e-03*G0_2 + 8.333333333333311e-03*G0_3;
  block[1] = 8.333333333333309e-03*G0_0 + 1.666666666666661e-02*G0_1 + 8.333333333333309e-03*G0_2 + 8.333333333333307e-03*G0_3;
  block[2] = 8.333333333333309e-03*G0_0 + 8.333333333333309e-03*G0_1 + 1.666666666666662e-02*G0_2 + 8.333333333333311e-03*G0_3;
  block[3] = 8.333333333333311e-03*G0_0 + 8.333333333333309e-03*G0_1 + 8.333333333333311e-03*G0_2 + 1.666666666666662e-02*G0_3;
  block[4] = 1.666666666666662e-02*G0_4 + 8.333333333333307e-03*G0_5 + 8.333333333333311e-03*G0_6 + 8.333333333333309e-03*G0_7;
  block[5] = 8.333333333333307e-03*G0_4 + 1.666666666666662e-02*G0_5 + 8.333333333333312e-03*G0_6 + 8.333333333333311e-03*G0_7;
  block[6] = 8.333333333333309e-03*G0_4 + 8.333333333333312e-03*G0_5 + 1.666666666666662e-02*G0_6 + 8.333333333333314e-03*G0_7;
  block[7] = 8.333333333333309e-03*G0_4 + 8.333333333333311e-03*G0_5 + 8.333333333333314e-03*G0_6 + 1.666666666666662e-02*G0_7;
  block[8] = 1.666666666666662e-02*G0_8 + 8.333333333333309e-03*G0_9 + 8.333333333333307e-03*G0_10 + 8.333333333333309e-03*G0_11;
  block[9] = 8.333333333333309e-03*G0_8 + 1.666666666666662e-02*G0_9 + 8.333333333333311e-03*G0_10 + 8.333333333333311e-03*G0_11;
  block[10] = 8.333333333333307e-03*G0_8 + 8.333333333333311e-03*G0_9 + 1.666666666666662e-02*G0_10 + 8.333333333333311e-03*G0_11;
  block[11] = 8.333333333333309e-03*G0_8 + 8.333333333333312e-03*G0_9 + 8.333333333333311e-03*G0_10 + 1.666666666666662e-02*G0_11;
}

// No contribution from the boundary
void LinearForm::eval(real block[], const AffineMap& map, unsigned int facet) const {}   
} }

#endif
