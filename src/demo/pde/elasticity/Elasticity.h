// This code conforms with the UFC specification version 1.0
// and was automatically generated by FFC version 0.3.5.

#ifndef __ELASTICITY_H
#define __ELASTICITY_H

#include <ufc.h>

/// This class defines the interface for a finite element.

class ElasticityBilinearForm_finite_element_0_2: public ufc::finite_element
{
public:

  /// Constructor
  ElasticityBilinearForm_finite_element_0_2() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ElasticityBilinearForm_finite_element_0_2()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Lagrange finite element of degree 1 on a tetrahedron";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 4;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Not implemented
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    double values[1];
    double coordinates[3];
    
    // Nodal coordinates on reference cell
    static double X[4][3] = {{0, 0, 0}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}};
    
    // Components for each dof
    static unsigned int components[4] = {0, 0, 0, 0};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0] - X[i][1] - X[i][2];
    const double w1 = X[i][0];
    const double w2 = X[i][1];
    const double w3 = X[i][2];
    
    // Compute affine mapping x = F(X)
    coordinates[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    coordinates[0] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    coordinates[0] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at coordinates
    f.evaluate(values, coordinates, c);
    
    // Pick component for evaluation
    return values[components[i]];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new ElasticityBilinearForm_finite_element_0_2();
  }

};

/// This class defines the interface for a finite element.

class ElasticityBilinearForm_finite_element_0_1: public ufc::finite_element
{
public:

  /// Constructor
  ElasticityBilinearForm_finite_element_0_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ElasticityBilinearForm_finite_element_0_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Lagrange finite element of degree 1 on a tetrahedron";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 4;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Not implemented
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    double values[1];
    double coordinates[3];
    
    // Nodal coordinates on reference cell
    static double X[4][3] = {{0, 0, 0}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}};
    
    // Components for each dof
    static unsigned int components[4] = {0, 0, 0, 0};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0] - X[i][1] - X[i][2];
    const double w1 = X[i][0];
    const double w2 = X[i][1];
    const double w3 = X[i][2];
    
    // Compute affine mapping x = F(X)
    coordinates[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    coordinates[0] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    coordinates[0] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at coordinates
    f.evaluate(values, coordinates, c);
    
    // Pick component for evaluation
    return values[components[i]];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new ElasticityBilinearForm_finite_element_0_1();
  }

};

/// This class defines the interface for a finite element.

class ElasticityBilinearForm_finite_element_0_0: public ufc::finite_element
{
public:

  /// Constructor
  ElasticityBilinearForm_finite_element_0_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ElasticityBilinearForm_finite_element_0_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Lagrange finite element of degree 1 on a tetrahedron";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 4;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Not implemented
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    double values[1];
    double coordinates[3];
    
    // Nodal coordinates on reference cell
    static double X[4][3] = {{0, 0, 0}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}};
    
    // Components for each dof
    static unsigned int components[4] = {0, 0, 0, 0};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0] - X[i][1] - X[i][2];
    const double w1 = X[i][0];
    const double w2 = X[i][1];
    const double w3 = X[i][2];
    
    // Compute affine mapping x = F(X)
    coordinates[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    coordinates[0] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    coordinates[0] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at coordinates
    f.evaluate(values, coordinates, c);
    
    // Pick component for evaluation
    return values[components[i]];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new ElasticityBilinearForm_finite_element_0_0();
  }

};

/// This class defines the interface for a finite element.

class ElasticityBilinearForm_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  ElasticityBilinearForm_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ElasticityBilinearForm_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Mixed finite element: [Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron]";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 12;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 3;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Not implemented
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    double values[3];
    double coordinates[3];
    
    // Nodal coordinates on reference cell
    static double X[12][3] = {{0, 0, 0}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}, {0, 0, 0}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}, {0, 0, 0}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}};
    
    // Components for each dof
    static unsigned int components[12] = {0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0] - X[i][1] - X[i][2];
    const double w1 = X[i][0];
    const double w2 = X[i][1];
    const double w3 = X[i][2];
    
    // Compute affine mapping x = F(X)
    coordinates[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    coordinates[0] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    coordinates[0] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at coordinates
    f.evaluate(values, coordinates, c);
    
    // Pick component for evaluation
    return values[components[i]];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
    vertex_values[4] = dof_values[4];
    vertex_values[5] = dof_values[5];
    vertex_values[6] = dof_values[6];
    vertex_values[7] = dof_values[7];
    vertex_values[8] = dof_values[8];
    vertex_values[9] = dof_values[9];
    vertex_values[10] = dof_values[10];
    vertex_values[11] = dof_values[11];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 3;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new ElasticityBilinearForm_finite_element_0_0();
      break;
    case 1:
      return new ElasticityBilinearForm_finite_element_0_1();
      break;
    case 2:
      return new ElasticityBilinearForm_finite_element_0_2();
      break;
    }
    return 0;
  }

};

/// This class defines the interface for a finite element.

class ElasticityBilinearForm_finite_element_1_2: public ufc::finite_element
{
public:

  /// Constructor
  ElasticityBilinearForm_finite_element_1_2() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ElasticityBilinearForm_finite_element_1_2()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Lagrange finite element of degree 1 on a tetrahedron";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 4;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Not implemented
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    double values[1];
    double coordinates[3];
    
    // Nodal coordinates on reference cell
    static double X[4][3] = {{0, 0, 0}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}};
    
    // Components for each dof
    static unsigned int components[4] = {0, 0, 0, 0};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0] - X[i][1] - X[i][2];
    const double w1 = X[i][0];
    const double w2 = X[i][1];
    const double w3 = X[i][2];
    
    // Compute affine mapping x = F(X)
    coordinates[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    coordinates[0] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    coordinates[0] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at coordinates
    f.evaluate(values, coordinates, c);
    
    // Pick component for evaluation
    return values[components[i]];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new ElasticityBilinearForm_finite_element_1_2();
  }

};

/// This class defines the interface for a finite element.

class ElasticityBilinearForm_finite_element_1_1: public ufc::finite_element
{
public:

  /// Constructor
  ElasticityBilinearForm_finite_element_1_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ElasticityBilinearForm_finite_element_1_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Lagrange finite element of degree 1 on a tetrahedron";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 4;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Not implemented
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    double values[1];
    double coordinates[3];
    
    // Nodal coordinates on reference cell
    static double X[4][3] = {{0, 0, 0}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}};
    
    // Components for each dof
    static unsigned int components[4] = {0, 0, 0, 0};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0] - X[i][1] - X[i][2];
    const double w1 = X[i][0];
    const double w2 = X[i][1];
    const double w3 = X[i][2];
    
    // Compute affine mapping x = F(X)
    coordinates[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    coordinates[0] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    coordinates[0] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at coordinates
    f.evaluate(values, coordinates, c);
    
    // Pick component for evaluation
    return values[components[i]];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new ElasticityBilinearForm_finite_element_1_1();
  }

};

/// This class defines the interface for a finite element.

class ElasticityBilinearForm_finite_element_1_0: public ufc::finite_element
{
public:

  /// Constructor
  ElasticityBilinearForm_finite_element_1_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ElasticityBilinearForm_finite_element_1_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Lagrange finite element of degree 1 on a tetrahedron";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 4;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Not implemented
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    double values[1];
    double coordinates[3];
    
    // Nodal coordinates on reference cell
    static double X[4][3] = {{0, 0, 0}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}};
    
    // Components for each dof
    static unsigned int components[4] = {0, 0, 0, 0};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0] - X[i][1] - X[i][2];
    const double w1 = X[i][0];
    const double w2 = X[i][1];
    const double w3 = X[i][2];
    
    // Compute affine mapping x = F(X)
    coordinates[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    coordinates[0] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    coordinates[0] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at coordinates
    f.evaluate(values, coordinates, c);
    
    // Pick component for evaluation
    return values[components[i]];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new ElasticityBilinearForm_finite_element_1_0();
  }

};

/// This class defines the interface for a finite element.

class ElasticityBilinearForm_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  ElasticityBilinearForm_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ElasticityBilinearForm_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Mixed finite element: [Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron]";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 12;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 3;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Not implemented
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    double values[3];
    double coordinates[3];
    
    // Nodal coordinates on reference cell
    static double X[12][3] = {{0, 0, 0}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}, {0, 0, 0}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}, {0, 0, 0}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}};
    
    // Components for each dof
    static unsigned int components[12] = {0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0] - X[i][1] - X[i][2];
    const double w1 = X[i][0];
    const double w2 = X[i][1];
    const double w3 = X[i][2];
    
    // Compute affine mapping x = F(X)
    coordinates[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    coordinates[0] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    coordinates[0] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at coordinates
    f.evaluate(values, coordinates, c);
    
    // Pick component for evaluation
    return values[components[i]];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
    vertex_values[4] = dof_values[4];
    vertex_values[5] = dof_values[5];
    vertex_values[6] = dof_values[6];
    vertex_values[7] = dof_values[7];
    vertex_values[8] = dof_values[8];
    vertex_values[9] = dof_values[9];
    vertex_values[10] = dof_values[10];
    vertex_values[11] = dof_values[11];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 3;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new ElasticityBilinearForm_finite_element_1_0();
      break;
    case 1:
      return new ElasticityBilinearForm_finite_element_1_1();
      break;
    case 2:
      return new ElasticityBilinearForm_finite_element_1_2();
      break;
    }
    return 0;
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ElasticityBilinearForm_dof_map_0: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  ElasticityBilinearForm_dof_map_0() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~ElasticityBilinearForm_dof_map_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for Mixed finite element: [Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron]";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return false;
      break;
    case 2:
      return false;
      break;
    case 3:
      return false;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = 3*m.num_entities[0];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 12;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 9;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
    unsigned int offset = m.num_entities[0];
    dofs[4] = offset + c.entity_indices[0][0];
    dofs[5] = offset + c.entity_indices[0][1];
    dofs[6] = offset + c.entity_indices[0][2];
    dofs[7] = offset + c.entity_indices[0][3];
    offset = offset + m.num_entities[0];
    dofs[8] = offset + c.entity_indices[0][0];
    dofs[9] = offset + c.entity_indices[0][1];
    dofs[10] = offset + c.entity_indices[0][2];
    dofs[11] = offset + c.entity_indices[0][3];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   const ufc::mesh& m,
                                   const ufc::cell& c,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 9;
      dofs[7] = 10;
      dofs[8] = 11;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 10;
      dofs[8] = 11;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 11;
      break;
    case 3:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 10;
      break;
    }
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double **coordinates,
                                    const ufc::mesh& m,
                                    const ufc::cell& c) const
  {
    // Not implemented
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    // Not implemented
    return 0;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    // Not implemented
    return 0;
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ElasticityBilinearForm_dof_map_1: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  ElasticityBilinearForm_dof_map_1() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~ElasticityBilinearForm_dof_map_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for Mixed finite element: [Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron]";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return false;
      break;
    case 2:
      return false;
      break;
    case 3:
      return false;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = 3*m.num_entities[0];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 12;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 9;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
    unsigned int offset = m.num_entities[0];
    dofs[4] = offset + c.entity_indices[0][0];
    dofs[5] = offset + c.entity_indices[0][1];
    dofs[6] = offset + c.entity_indices[0][2];
    dofs[7] = offset + c.entity_indices[0][3];
    offset = offset + m.num_entities[0];
    dofs[8] = offset + c.entity_indices[0][0];
    dofs[9] = offset + c.entity_indices[0][1];
    dofs[10] = offset + c.entity_indices[0][2];
    dofs[11] = offset + c.entity_indices[0][3];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   const ufc::mesh& m,
                                   const ufc::cell& c,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 9;
      dofs[7] = 10;
      dofs[8] = 11;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 10;
      dofs[8] = 11;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 11;
      break;
    case 3:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 10;
      break;
    }
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double **coordinates,
                                    const ufc::mesh& m,
                                    const ufc::cell& c) const
  {
    // Not implemented
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    // Not implemented
    return 0;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    // Not implemented
    return 0;
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class ElasticityBilinearForm_cell_integral_0: public ufc::cell_integral
{
public:

  /// Constructor
  ElasticityBilinearForm_cell_integral_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ElasticityBilinearForm_cell_integral_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
      
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    const double d01 = J_12*J_20 - J_10*J_22;
    const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    const double d11 = J_00*J_22 - J_02*J_20;
    const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    const double d21 = J_02*J_10 - J_00*J_12;
    const double d22 = J_00*J_11 - J_01*J_10;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
      
    // Compute inverse of Jacobian
    const double Jinv_00 = d00 / detJ;
    const double Jinv_01 = d10 / detJ;
    const double Jinv_02 = d20 / detJ;
    const double Jinv_10 = d01 / detJ;
    const double Jinv_11 = d11 / detJ;
    const double Jinv_12 = d21 / detJ;
    const double Jinv_20 = d02 / detJ;
    const double Jinv_21 = d12 / detJ;
    const double Jinv_22 = d22 / detJ;
    
    // Take absolute value of determinant
    detJ = std::abs(detJ);
    
    // Set scale factor
    const double det = detJ;
    
    // Compute geometry tensors
    const double G0_0_0 = det*Jinv_00*Jinv_00 + det*Jinv_00*Jinv_00 + det*Jinv_01*Jinv_01 + det*Jinv_02*Jinv_02;
    const double G0_0_1 = det*Jinv_00*Jinv_10 + det*Jinv_00*Jinv_10 + det*Jinv_01*Jinv_11 + det*Jinv_02*Jinv_12;
    const double G0_0_2 = det*Jinv_00*Jinv_20 + det*Jinv_00*Jinv_20 + det*Jinv_01*Jinv_21 + det*Jinv_02*Jinv_22;
    const double G0_1_0 = det*Jinv_10*Jinv_00 + det*Jinv_10*Jinv_00 + det*Jinv_11*Jinv_01 + det*Jinv_12*Jinv_02;
    const double G0_1_1 = det*Jinv_10*Jinv_10 + det*Jinv_10*Jinv_10 + det*Jinv_11*Jinv_11 + det*Jinv_12*Jinv_12;
    const double G0_1_2 = det*Jinv_10*Jinv_20 + det*Jinv_10*Jinv_20 + det*Jinv_11*Jinv_21 + det*Jinv_12*Jinv_22;
    const double G0_2_0 = det*Jinv_20*Jinv_00 + det*Jinv_20*Jinv_00 + det*Jinv_21*Jinv_01 + det*Jinv_22*Jinv_02;
    const double G0_2_1 = det*Jinv_20*Jinv_10 + det*Jinv_20*Jinv_10 + det*Jinv_21*Jinv_11 + det*Jinv_22*Jinv_12;
    const double G0_2_2 = det*Jinv_20*Jinv_20 + det*Jinv_20*Jinv_20 + det*Jinv_21*Jinv_21 + det*Jinv_22*Jinv_22;
    const double G1_0_0 = det*Jinv_00*Jinv_02 + det*Jinv_00*Jinv_02;
    const double G1_0_1 = det*Jinv_00*Jinv_12 + det*Jinv_00*Jinv_12;
    const double G1_0_2 = det*Jinv_00*Jinv_22 + det*Jinv_00*Jinv_22;
    const double G1_1_0 = det*Jinv_10*Jinv_02 + det*Jinv_10*Jinv_02;
    const double G1_1_1 = det*Jinv_10*Jinv_12 + det*Jinv_10*Jinv_12;
    const double G1_1_2 = det*Jinv_10*Jinv_22 + det*Jinv_10*Jinv_22;
    const double G1_2_0 = det*Jinv_20*Jinv_02 + det*Jinv_20*Jinv_02;
    const double G1_2_1 = det*Jinv_20*Jinv_12 + det*Jinv_20*Jinv_12;
    const double G1_2_2 = det*Jinv_20*Jinv_22 + det*Jinv_20*Jinv_22;
    const double G2_0_0 = det*Jinv_00*Jinv_01 + det*Jinv_00*Jinv_01;
    const double G2_0_1 = det*Jinv_00*Jinv_11 + det*Jinv_00*Jinv_11;
    const double G2_0_2 = det*Jinv_00*Jinv_21 + det*Jinv_00*Jinv_21;
    const double G2_1_0 = det*Jinv_10*Jinv_01 + det*Jinv_10*Jinv_01;
    const double G2_1_1 = det*Jinv_10*Jinv_11 + det*Jinv_10*Jinv_11;
    const double G2_1_2 = det*Jinv_10*Jinv_21 + det*Jinv_10*Jinv_21;
    const double G2_2_0 = det*Jinv_20*Jinv_01 + det*Jinv_20*Jinv_01;
    const double G2_2_1 = det*Jinv_20*Jinv_11 + det*Jinv_20*Jinv_11;
    const double G2_2_2 = det*Jinv_20*Jinv_21 + det*Jinv_20*Jinv_21;
    const double G3_0_0 = det*Jinv_00*Jinv_00 + det*Jinv_00*Jinv_00;
    const double G3_0_1 = det*Jinv_00*Jinv_10 + det*Jinv_00*Jinv_10;
    const double G3_0_2 = det*Jinv_00*Jinv_20 + det*Jinv_00*Jinv_20;
    const double G3_1_0 = det*Jinv_10*Jinv_00 + det*Jinv_10*Jinv_00;
    const double G3_1_1 = det*Jinv_10*Jinv_10 + det*Jinv_10*Jinv_10;
    const double G3_1_2 = det*Jinv_10*Jinv_20 + det*Jinv_10*Jinv_20;
    const double G3_2_0 = det*Jinv_20*Jinv_00 + det*Jinv_20*Jinv_00;
    const double G3_2_1 = det*Jinv_20*Jinv_10 + det*Jinv_20*Jinv_10;
    const double G3_2_2 = det*Jinv_20*Jinv_20 + det*Jinv_20*Jinv_20;
    const double G4_0_0 = det*Jinv_01*Jinv_00;
    const double G4_0_1 = det*Jinv_01*Jinv_10;
    const double G4_0_2 = det*Jinv_01*Jinv_20;
    const double G4_1_0 = det*Jinv_11*Jinv_00;
    const double G4_1_1 = det*Jinv_11*Jinv_10;
    const double G4_1_2 = det*Jinv_11*Jinv_20;
    const double G4_2_0 = det*Jinv_21*Jinv_00;
    const double G4_2_1 = det*Jinv_21*Jinv_10;
    const double G4_2_2 = det*Jinv_21*Jinv_20;
    // const double G5_0_0 = det*Jinv_01*Jinv_02 + det*Jinv_01*Jinv_02 + det*Jinv_02*Jinv_02 + det*Jinv_02*Jinv_02;
    // const double G5_0_1 = det*Jinv_01*Jinv_12 + det*Jinv_01*Jinv_12 + det*Jinv_02*Jinv_12 + det*Jinv_02*Jinv_12;
    // const double G5_0_2 = det*Jinv_01*Jinv_22 + det*Jinv_01*Jinv_22 + det*Jinv_02*Jinv_22 + det*Jinv_02*Jinv_22;
    // const double G5_1_0 = det*Jinv_11*Jinv_02 + det*Jinv_11*Jinv_02 + det*Jinv_12*Jinv_02 + det*Jinv_12*Jinv_02;
    // const double G5_1_1 = det*Jinv_11*Jinv_12 + det*Jinv_11*Jinv_12 + det*Jinv_12*Jinv_12 + det*Jinv_12*Jinv_12;
    // const double G5_1_2 = det*Jinv_11*Jinv_22 + det*Jinv_11*Jinv_22 + det*Jinv_12*Jinv_22 + det*Jinv_12*Jinv_22;
    // const double G5_2_0 = det*Jinv_21*Jinv_02 + det*Jinv_21*Jinv_02 + det*Jinv_22*Jinv_02 + det*Jinv_22*Jinv_02;
    // const double G5_2_1 = det*Jinv_21*Jinv_12 + det*Jinv_21*Jinv_12 + det*Jinv_22*Jinv_12 + det*Jinv_22*Jinv_12;
    // const double G5_2_2 = det*Jinv_21*Jinv_22 + det*Jinv_21*Jinv_22 + det*Jinv_22*Jinv_22 + det*Jinv_22*Jinv_22;
    // const double G6_0_0 = det*Jinv_01*Jinv_01 + det*Jinv_01*Jinv_01 + det*Jinv_02*Jinv_01 + det*Jinv_02*Jinv_01;
    // const double G6_0_1 = det*Jinv_01*Jinv_11 + det*Jinv_01*Jinv_11 + det*Jinv_02*Jinv_11 + det*Jinv_02*Jinv_11;
    // const double G6_0_2 = det*Jinv_01*Jinv_21 + det*Jinv_01*Jinv_21 + det*Jinv_02*Jinv_21 + det*Jinv_02*Jinv_21;
    // const double G6_1_0 = det*Jinv_11*Jinv_01 + det*Jinv_11*Jinv_01 + det*Jinv_12*Jinv_01 + det*Jinv_12*Jinv_01;
    // const double G6_1_1 = det*Jinv_11*Jinv_11 + det*Jinv_11*Jinv_11 + det*Jinv_12*Jinv_11 + det*Jinv_12*Jinv_11;
    // const double G6_1_2 = det*Jinv_11*Jinv_21 + det*Jinv_11*Jinv_21 + det*Jinv_12*Jinv_21 + det*Jinv_12*Jinv_21;
    // const double G6_2_0 = det*Jinv_21*Jinv_01 + det*Jinv_21*Jinv_01 + det*Jinv_22*Jinv_01 + det*Jinv_22*Jinv_01;
    // const double G6_2_1 = det*Jinv_21*Jinv_11 + det*Jinv_21*Jinv_11 + det*Jinv_22*Jinv_11 + det*Jinv_22*Jinv_11;
    // const double G6_2_2 = det*Jinv_21*Jinv_21 + det*Jinv_21*Jinv_21 + det*Jinv_22*Jinv_21 + det*Jinv_22*Jinv_21;
    // const double G7_0_0 = det*Jinv_01*Jinv_00 + det*Jinv_01*Jinv_00 + det*Jinv_02*Jinv_00 + det*Jinv_02*Jinv_00;
    // const double G7_0_1 = det*Jinv_01*Jinv_10 + det*Jinv_01*Jinv_10 + det*Jinv_02*Jinv_10 + det*Jinv_02*Jinv_10;
    // const double G7_0_2 = det*Jinv_01*Jinv_20 + det*Jinv_01*Jinv_20 + det*Jinv_02*Jinv_20 + det*Jinv_02*Jinv_20;
    // const double G7_1_0 = det*Jinv_11*Jinv_00 + det*Jinv_11*Jinv_00 + det*Jinv_12*Jinv_00 + det*Jinv_12*Jinv_00;
    // const double G7_1_1 = det*Jinv_11*Jinv_10 + det*Jinv_11*Jinv_10 + det*Jinv_12*Jinv_10 + det*Jinv_12*Jinv_10;
    // const double G7_1_2 = det*Jinv_11*Jinv_20 + det*Jinv_11*Jinv_20 + det*Jinv_12*Jinv_20 + det*Jinv_12*Jinv_20;
    // const double G7_2_0 = det*Jinv_21*Jinv_00 + det*Jinv_21*Jinv_00 + det*Jinv_22*Jinv_00 + det*Jinv_22*Jinv_00;
    // const double G7_2_1 = det*Jinv_21*Jinv_10 + det*Jinv_21*Jinv_10 + det*Jinv_22*Jinv_10 + det*Jinv_22*Jinv_10;
    // const double G7_2_2 = det*Jinv_21*Jinv_20 + det*Jinv_21*Jinv_20 + det*Jinv_22*Jinv_20 + det*Jinv_22*Jinv_20;
    const double G8_0_0 = det*Jinv_02*Jinv_00;
    const double G8_0_1 = det*Jinv_02*Jinv_10;
    const double G8_0_2 = det*Jinv_02*Jinv_20;
    const double G8_1_0 = det*Jinv_12*Jinv_00;
    const double G8_1_1 = det*Jinv_12*Jinv_10;
    const double G8_1_2 = det*Jinv_12*Jinv_20;
    const double G8_2_0 = det*Jinv_22*Jinv_00;
    const double G8_2_1 = det*Jinv_22*Jinv_10;
    const double G8_2_2 = det*Jinv_22*Jinv_20;
    const double G9_0_0 = det*Jinv_00*Jinv_00 + det*Jinv_01*Jinv_01 + det*Jinv_01*Jinv_01 + det*Jinv_02*Jinv_02;
    const double G9_0_1 = det*Jinv_00*Jinv_10 + det*Jinv_01*Jinv_11 + det*Jinv_01*Jinv_11 + det*Jinv_02*Jinv_12;
    const double G9_0_2 = det*Jinv_00*Jinv_20 + det*Jinv_01*Jinv_21 + det*Jinv_01*Jinv_21 + det*Jinv_02*Jinv_22;
    const double G9_1_0 = det*Jinv_10*Jinv_00 + det*Jinv_11*Jinv_01 + det*Jinv_11*Jinv_01 + det*Jinv_12*Jinv_02;
    const double G9_1_1 = det*Jinv_10*Jinv_10 + det*Jinv_11*Jinv_11 + det*Jinv_11*Jinv_11 + det*Jinv_12*Jinv_12;
    const double G9_1_2 = det*Jinv_10*Jinv_20 + det*Jinv_11*Jinv_21 + det*Jinv_11*Jinv_21 + det*Jinv_12*Jinv_22;
    const double G9_2_0 = det*Jinv_20*Jinv_00 + det*Jinv_21*Jinv_01 + det*Jinv_21*Jinv_01 + det*Jinv_22*Jinv_02;
    const double G9_2_1 = det*Jinv_20*Jinv_10 + det*Jinv_21*Jinv_11 + det*Jinv_21*Jinv_11 + det*Jinv_22*Jinv_12;
    const double G9_2_2 = det*Jinv_20*Jinv_20 + det*Jinv_21*Jinv_21 + det*Jinv_21*Jinv_21 + det*Jinv_22*Jinv_22;
    const double G10_0_0 = det*Jinv_00*Jinv_01;
    const double G10_0_1 = det*Jinv_00*Jinv_11;
    const double G10_0_2 = det*Jinv_00*Jinv_21;
    const double G10_1_0 = det*Jinv_10*Jinv_01;
    const double G10_1_1 = det*Jinv_10*Jinv_11;
    const double G10_1_2 = det*Jinv_10*Jinv_21;
    const double G10_2_0 = det*Jinv_20*Jinv_01;
    const double G10_2_1 = det*Jinv_20*Jinv_11;
    const double G10_2_2 = det*Jinv_20*Jinv_21;
    // const double G11_0_0 = det*Jinv_00*Jinv_02 + det*Jinv_00*Jinv_02 + det*Jinv_02*Jinv_02 + det*Jinv_02*Jinv_02;
    // const double G11_0_1 = det*Jinv_00*Jinv_12 + det*Jinv_00*Jinv_12 + det*Jinv_02*Jinv_12 + det*Jinv_02*Jinv_12;
    // const double G11_0_2 = det*Jinv_00*Jinv_22 + det*Jinv_00*Jinv_22 + det*Jinv_02*Jinv_22 + det*Jinv_02*Jinv_22;
    // const double G11_1_0 = det*Jinv_10*Jinv_02 + det*Jinv_10*Jinv_02 + det*Jinv_12*Jinv_02 + det*Jinv_12*Jinv_02;
    // const double G11_1_1 = det*Jinv_10*Jinv_12 + det*Jinv_10*Jinv_12 + det*Jinv_12*Jinv_12 + det*Jinv_12*Jinv_12;
    // const double G11_1_2 = det*Jinv_10*Jinv_22 + det*Jinv_10*Jinv_22 + det*Jinv_12*Jinv_22 + det*Jinv_12*Jinv_22;
    // const double G11_2_0 = det*Jinv_20*Jinv_02 + det*Jinv_20*Jinv_02 + det*Jinv_22*Jinv_02 + det*Jinv_22*Jinv_02;
    // const double G11_2_1 = det*Jinv_20*Jinv_12 + det*Jinv_20*Jinv_12 + det*Jinv_22*Jinv_12 + det*Jinv_22*Jinv_12;
    // const double G11_2_2 = det*Jinv_20*Jinv_22 + det*Jinv_20*Jinv_22 + det*Jinv_22*Jinv_22 + det*Jinv_22*Jinv_22;
    // const double G12_0_0 = det*Jinv_00*Jinv_01 + det*Jinv_00*Jinv_01 + det*Jinv_02*Jinv_01 + det*Jinv_02*Jinv_01;
    // const double G12_0_1 = det*Jinv_00*Jinv_11 + det*Jinv_00*Jinv_11 + det*Jinv_02*Jinv_11 + det*Jinv_02*Jinv_11;
    // const double G12_0_2 = det*Jinv_00*Jinv_21 + det*Jinv_00*Jinv_21 + det*Jinv_02*Jinv_21 + det*Jinv_02*Jinv_21;
    // const double G12_1_0 = det*Jinv_10*Jinv_01 + det*Jinv_10*Jinv_01 + det*Jinv_12*Jinv_01 + det*Jinv_12*Jinv_01;
    // const double G12_1_1 = det*Jinv_10*Jinv_11 + det*Jinv_10*Jinv_11 + det*Jinv_12*Jinv_11 + det*Jinv_12*Jinv_11;
    // const double G12_1_2 = det*Jinv_10*Jinv_21 + det*Jinv_10*Jinv_21 + det*Jinv_12*Jinv_21 + det*Jinv_12*Jinv_21;
    // const double G12_2_0 = det*Jinv_20*Jinv_01 + det*Jinv_20*Jinv_01 + det*Jinv_22*Jinv_01 + det*Jinv_22*Jinv_01;
    // const double G12_2_1 = det*Jinv_20*Jinv_11 + det*Jinv_20*Jinv_11 + det*Jinv_22*Jinv_11 + det*Jinv_22*Jinv_11;
    // const double G12_2_2 = det*Jinv_20*Jinv_21 + det*Jinv_20*Jinv_21 + det*Jinv_22*Jinv_21 + det*Jinv_22*Jinv_21;
    // const double G13_0_0 = det*Jinv_00*Jinv_00 + det*Jinv_00*Jinv_00 + det*Jinv_02*Jinv_00 + det*Jinv_02*Jinv_00;
    // const double G13_0_1 = det*Jinv_00*Jinv_10 + det*Jinv_00*Jinv_10 + det*Jinv_02*Jinv_10 + det*Jinv_02*Jinv_10;
    // const double G13_0_2 = det*Jinv_00*Jinv_20 + det*Jinv_00*Jinv_20 + det*Jinv_02*Jinv_20 + det*Jinv_02*Jinv_20;
    // const double G13_1_0 = det*Jinv_10*Jinv_00 + det*Jinv_10*Jinv_00 + det*Jinv_12*Jinv_00 + det*Jinv_12*Jinv_00;
    // const double G13_1_1 = det*Jinv_10*Jinv_10 + det*Jinv_10*Jinv_10 + det*Jinv_12*Jinv_10 + det*Jinv_12*Jinv_10;
    // const double G13_1_2 = det*Jinv_10*Jinv_20 + det*Jinv_10*Jinv_20 + det*Jinv_12*Jinv_20 + det*Jinv_12*Jinv_20;
    // const double G13_2_0 = det*Jinv_20*Jinv_00 + det*Jinv_20*Jinv_00 + det*Jinv_22*Jinv_00 + det*Jinv_22*Jinv_00;
    // const double G13_2_1 = det*Jinv_20*Jinv_10 + det*Jinv_20*Jinv_10 + det*Jinv_22*Jinv_10 + det*Jinv_22*Jinv_10;
    // const double G13_2_2 = det*Jinv_20*Jinv_20 + det*Jinv_20*Jinv_20 + det*Jinv_22*Jinv_20 + det*Jinv_22*Jinv_20;
    const double G14_0_0 = det*Jinv_01*Jinv_02 + det*Jinv_01*Jinv_02;
    const double G14_0_1 = det*Jinv_01*Jinv_12 + det*Jinv_01*Jinv_12;
    const double G14_0_2 = det*Jinv_01*Jinv_22 + det*Jinv_01*Jinv_22;
    const double G14_1_0 = det*Jinv_11*Jinv_02 + det*Jinv_11*Jinv_02;
    const double G14_1_1 = det*Jinv_11*Jinv_12 + det*Jinv_11*Jinv_12;
    const double G14_1_2 = det*Jinv_11*Jinv_22 + det*Jinv_11*Jinv_22;
    const double G14_2_0 = det*Jinv_21*Jinv_02 + det*Jinv_21*Jinv_02;
    const double G14_2_1 = det*Jinv_21*Jinv_12 + det*Jinv_21*Jinv_12;
    const double G14_2_2 = det*Jinv_21*Jinv_22 + det*Jinv_21*Jinv_22;
    const double G15_0_0 = det*Jinv_01*Jinv_01 + det*Jinv_01*Jinv_01;
    const double G15_0_1 = det*Jinv_01*Jinv_11 + det*Jinv_01*Jinv_11;
    const double G15_0_2 = det*Jinv_01*Jinv_21 + det*Jinv_01*Jinv_21;
    const double G15_1_0 = det*Jinv_11*Jinv_01 + det*Jinv_11*Jinv_01;
    const double G15_1_1 = det*Jinv_11*Jinv_11 + det*Jinv_11*Jinv_11;
    const double G15_1_2 = det*Jinv_11*Jinv_21 + det*Jinv_11*Jinv_21;
    const double G15_2_0 = det*Jinv_21*Jinv_01 + det*Jinv_21*Jinv_01;
    const double G15_2_1 = det*Jinv_21*Jinv_11 + det*Jinv_21*Jinv_11;
    const double G15_2_2 = det*Jinv_21*Jinv_21 + det*Jinv_21*Jinv_21;
    const double G16_0_0 = det*Jinv_01*Jinv_00 + det*Jinv_01*Jinv_00;
    const double G16_0_1 = det*Jinv_01*Jinv_10 + det*Jinv_01*Jinv_10;
    const double G16_0_2 = det*Jinv_01*Jinv_20 + det*Jinv_01*Jinv_20;
    const double G16_1_0 = det*Jinv_11*Jinv_00 + det*Jinv_11*Jinv_00;
    const double G16_1_1 = det*Jinv_11*Jinv_10 + det*Jinv_11*Jinv_10;
    const double G16_1_2 = det*Jinv_11*Jinv_20 + det*Jinv_11*Jinv_20;
    const double G16_2_0 = det*Jinv_21*Jinv_00 + det*Jinv_21*Jinv_00;
    const double G16_2_1 = det*Jinv_21*Jinv_10 + det*Jinv_21*Jinv_10;
    const double G16_2_2 = det*Jinv_21*Jinv_20 + det*Jinv_21*Jinv_20;
    const double G17_0_0 = det*Jinv_02*Jinv_01;
    const double G17_0_1 = det*Jinv_02*Jinv_11;
    const double G17_0_2 = det*Jinv_02*Jinv_21;
    const double G17_1_0 = det*Jinv_12*Jinv_01;
    const double G17_1_1 = det*Jinv_12*Jinv_11;
    const double G17_1_2 = det*Jinv_12*Jinv_21;
    const double G17_2_0 = det*Jinv_22*Jinv_01;
    const double G17_2_1 = det*Jinv_22*Jinv_11;
    const double G17_2_2 = det*Jinv_22*Jinv_21;
    const double G18_0_0 = det*Jinv_00*Jinv_00 + det*Jinv_01*Jinv_01 + det*Jinv_02*Jinv_02 + det*Jinv_02*Jinv_02;
    const double G18_0_1 = det*Jinv_00*Jinv_10 + det*Jinv_01*Jinv_11 + det*Jinv_02*Jinv_12 + det*Jinv_02*Jinv_12;
    const double G18_0_2 = det*Jinv_00*Jinv_20 + det*Jinv_01*Jinv_21 + det*Jinv_02*Jinv_22 + det*Jinv_02*Jinv_22;
    const double G18_1_0 = det*Jinv_10*Jinv_00 + det*Jinv_11*Jinv_01 + det*Jinv_12*Jinv_02 + det*Jinv_12*Jinv_02;
    const double G18_1_1 = det*Jinv_10*Jinv_10 + det*Jinv_11*Jinv_11 + det*Jinv_12*Jinv_12 + det*Jinv_12*Jinv_12;
    const double G18_1_2 = det*Jinv_10*Jinv_20 + det*Jinv_11*Jinv_21 + det*Jinv_12*Jinv_22 + det*Jinv_12*Jinv_22;
    const double G18_2_0 = det*Jinv_20*Jinv_00 + det*Jinv_21*Jinv_01 + det*Jinv_22*Jinv_02 + det*Jinv_22*Jinv_02;
    const double G18_2_1 = det*Jinv_20*Jinv_10 + det*Jinv_21*Jinv_11 + det*Jinv_22*Jinv_12 + det*Jinv_22*Jinv_12;
    const double G18_2_2 = det*Jinv_20*Jinv_20 + det*Jinv_21*Jinv_21 + det*Jinv_22*Jinv_22 + det*Jinv_22*Jinv_22;
    const double G19_0_0 = det*Jinv_00*Jinv_02;
    const double G19_0_1 = det*Jinv_00*Jinv_12;
    const double G19_0_2 = det*Jinv_00*Jinv_22;
    const double G19_1_0 = det*Jinv_10*Jinv_02;
    const double G19_1_1 = det*Jinv_10*Jinv_12;
    const double G19_1_2 = det*Jinv_10*Jinv_22;
    const double G19_2_0 = det*Jinv_20*Jinv_02;
    const double G19_2_1 = det*Jinv_20*Jinv_12;
    const double G19_2_2 = det*Jinv_20*Jinv_22;
    // const double G20_0_0 = det*Jinv_00*Jinv_02 + det*Jinv_00*Jinv_02 + det*Jinv_01*Jinv_02 + det*Jinv_01*Jinv_02;
    // const double G20_0_1 = det*Jinv_00*Jinv_12 + det*Jinv_00*Jinv_12 + det*Jinv_01*Jinv_12 + det*Jinv_01*Jinv_12;
    // const double G20_0_2 = det*Jinv_00*Jinv_22 + det*Jinv_00*Jinv_22 + det*Jinv_01*Jinv_22 + det*Jinv_01*Jinv_22;
    // const double G20_1_0 = det*Jinv_10*Jinv_02 + det*Jinv_10*Jinv_02 + det*Jinv_11*Jinv_02 + det*Jinv_11*Jinv_02;
    // const double G20_1_1 = det*Jinv_10*Jinv_12 + det*Jinv_10*Jinv_12 + det*Jinv_11*Jinv_12 + det*Jinv_11*Jinv_12;
    // const double G20_1_2 = det*Jinv_10*Jinv_22 + det*Jinv_10*Jinv_22 + det*Jinv_11*Jinv_22 + det*Jinv_11*Jinv_22;
    // const double G20_2_0 = det*Jinv_20*Jinv_02 + det*Jinv_20*Jinv_02 + det*Jinv_21*Jinv_02 + det*Jinv_21*Jinv_02;
    // const double G20_2_1 = det*Jinv_20*Jinv_12 + det*Jinv_20*Jinv_12 + det*Jinv_21*Jinv_12 + det*Jinv_21*Jinv_12;
    // const double G20_2_2 = det*Jinv_20*Jinv_22 + det*Jinv_20*Jinv_22 + det*Jinv_21*Jinv_22 + det*Jinv_21*Jinv_22;
    // const double G21_0_0 = det*Jinv_00*Jinv_01 + det*Jinv_00*Jinv_01 + det*Jinv_01*Jinv_01 + det*Jinv_01*Jinv_01;
    // const double G21_0_1 = det*Jinv_00*Jinv_11 + det*Jinv_00*Jinv_11 + det*Jinv_01*Jinv_11 + det*Jinv_01*Jinv_11;
    // const double G21_0_2 = det*Jinv_00*Jinv_21 + det*Jinv_00*Jinv_21 + det*Jinv_01*Jinv_21 + det*Jinv_01*Jinv_21;
    // const double G21_1_0 = det*Jinv_10*Jinv_01 + det*Jinv_10*Jinv_01 + det*Jinv_11*Jinv_01 + det*Jinv_11*Jinv_01;
    // const double G21_1_1 = det*Jinv_10*Jinv_11 + det*Jinv_10*Jinv_11 + det*Jinv_11*Jinv_11 + det*Jinv_11*Jinv_11;
    // const double G21_1_2 = det*Jinv_10*Jinv_21 + det*Jinv_10*Jinv_21 + det*Jinv_11*Jinv_21 + det*Jinv_11*Jinv_21;
    // const double G21_2_0 = det*Jinv_20*Jinv_01 + det*Jinv_20*Jinv_01 + det*Jinv_21*Jinv_01 + det*Jinv_21*Jinv_01;
    // const double G21_2_1 = det*Jinv_20*Jinv_11 + det*Jinv_20*Jinv_11 + det*Jinv_21*Jinv_11 + det*Jinv_21*Jinv_11;
    // const double G21_2_2 = det*Jinv_20*Jinv_21 + det*Jinv_20*Jinv_21 + det*Jinv_21*Jinv_21 + det*Jinv_21*Jinv_21;
    // const double G22_0_0 = det*Jinv_00*Jinv_00 + det*Jinv_00*Jinv_00 + det*Jinv_01*Jinv_00 + det*Jinv_01*Jinv_00;
    // const double G22_0_1 = det*Jinv_00*Jinv_10 + det*Jinv_00*Jinv_10 + det*Jinv_01*Jinv_10 + det*Jinv_01*Jinv_10;
    // const double G22_0_2 = det*Jinv_00*Jinv_20 + det*Jinv_00*Jinv_20 + det*Jinv_01*Jinv_20 + det*Jinv_01*Jinv_20;
    // const double G22_1_0 = det*Jinv_10*Jinv_00 + det*Jinv_10*Jinv_00 + det*Jinv_11*Jinv_00 + det*Jinv_11*Jinv_00;
    // const double G22_1_1 = det*Jinv_10*Jinv_10 + det*Jinv_10*Jinv_10 + det*Jinv_11*Jinv_10 + det*Jinv_11*Jinv_10;
    // const double G22_1_2 = det*Jinv_10*Jinv_20 + det*Jinv_10*Jinv_20 + det*Jinv_11*Jinv_20 + det*Jinv_11*Jinv_20;
    // const double G22_2_0 = det*Jinv_20*Jinv_00 + det*Jinv_20*Jinv_00 + det*Jinv_21*Jinv_00 + det*Jinv_21*Jinv_00;
    // const double G22_2_1 = det*Jinv_20*Jinv_10 + det*Jinv_20*Jinv_10 + det*Jinv_21*Jinv_10 + det*Jinv_21*Jinv_10;
    // const double G22_2_2 = det*Jinv_20*Jinv_20 + det*Jinv_20*Jinv_20 + det*Jinv_21*Jinv_20 + det*Jinv_21*Jinv_20;
    const double G23_0_0 = det*Jinv_01*Jinv_02;
    const double G23_0_1 = det*Jinv_01*Jinv_12;
    const double G23_0_2 = det*Jinv_01*Jinv_22;
    const double G23_1_0 = det*Jinv_11*Jinv_02;
    const double G23_1_1 = det*Jinv_11*Jinv_12;
    const double G23_1_2 = det*Jinv_11*Jinv_22;
    const double G23_2_0 = det*Jinv_21*Jinv_02;
    const double G23_2_1 = det*Jinv_21*Jinv_12;
    const double G23_2_2 = det*Jinv_21*Jinv_22;
    const double G24_0_0 = det*Jinv_02*Jinv_02 + det*Jinv_02*Jinv_02;
    const double G24_0_1 = det*Jinv_02*Jinv_12 + det*Jinv_02*Jinv_12;
    const double G24_0_2 = det*Jinv_02*Jinv_22 + det*Jinv_02*Jinv_22;
    const double G24_1_0 = det*Jinv_12*Jinv_02 + det*Jinv_12*Jinv_02;
    const double G24_1_1 = det*Jinv_12*Jinv_12 + det*Jinv_12*Jinv_12;
    const double G24_1_2 = det*Jinv_12*Jinv_22 + det*Jinv_12*Jinv_22;
    const double G24_2_0 = det*Jinv_22*Jinv_02 + det*Jinv_22*Jinv_02;
    const double G24_2_1 = det*Jinv_22*Jinv_12 + det*Jinv_22*Jinv_12;
    const double G24_2_2 = det*Jinv_22*Jinv_22 + det*Jinv_22*Jinv_22;
    const double G25_0_0 = det*Jinv_02*Jinv_01 + det*Jinv_02*Jinv_01;
    const double G25_0_1 = det*Jinv_02*Jinv_11 + det*Jinv_02*Jinv_11;
    const double G25_0_2 = det*Jinv_02*Jinv_21 + det*Jinv_02*Jinv_21;
    const double G25_1_0 = det*Jinv_12*Jinv_01 + det*Jinv_12*Jinv_01;
    const double G25_1_1 = det*Jinv_12*Jinv_11 + det*Jinv_12*Jinv_11;
    const double G25_1_2 = det*Jinv_12*Jinv_21 + det*Jinv_12*Jinv_21;
    const double G25_2_0 = det*Jinv_22*Jinv_01 + det*Jinv_22*Jinv_01;
    const double G25_2_1 = det*Jinv_22*Jinv_11 + det*Jinv_22*Jinv_11;
    const double G25_2_2 = det*Jinv_22*Jinv_21 + det*Jinv_22*Jinv_21;
    const double G26_0_0 = det*Jinv_02*Jinv_00 + det*Jinv_02*Jinv_00;
    const double G26_0_1 = det*Jinv_02*Jinv_10 + det*Jinv_02*Jinv_10;
    const double G26_0_2 = det*Jinv_02*Jinv_20 + det*Jinv_02*Jinv_20;
    const double G26_1_0 = det*Jinv_12*Jinv_00 + det*Jinv_12*Jinv_00;
    const double G26_1_1 = det*Jinv_12*Jinv_10 + det*Jinv_12*Jinv_10;
    const double G26_1_2 = det*Jinv_12*Jinv_20 + det*Jinv_12*Jinv_20;
    const double G26_2_0 = det*Jinv_22*Jinv_00 + det*Jinv_22*Jinv_00;
    const double G26_2_1 = det*Jinv_22*Jinv_10 + det*Jinv_22*Jinv_10;
    const double G26_2_2 = det*Jinv_22*Jinv_20 + det*Jinv_22*Jinv_20;
    
    // Compute element tensor
    A[0] = 0.6410256410256*G0_0_0 + 0.6410256410256*G0_0_1 + 0.6410256410256*G0_0_2 + 0.6410256410256*G0_1_0 + 0.6410256410256*G0_1_1 + 0.6410256410256*G0_1_2 + 0.6410256410256*G0_2_0 + 0.6410256410256*G0_2_1 + 0.6410256410256*G0_2_2 + 0.4807692307692*G3_0_0 + 0.4807692307692*G3_0_1 + 0.4807692307692*G3_0_2 + 0.4807692307692*G3_1_0 + 0.4807692307692*G3_1_1 + 0.4807692307692*G3_1_2 + 0.4807692307692*G3_2_0 + 0.4807692307692*G3_2_1 + 0.4807692307692*G3_2_2;
    A[1] = -0.6410256410256*G0_0_0 - 0.6410256410256*G0_1_0 - 0.6410256410256*G0_2_0 - 0.4807692307692*G3_0_0 - 0.4807692307692*G3_1_0 - 0.4807692307692*G3_2_0;
    A[2] = -0.6410256410256*G0_0_1 - 0.6410256410256*G0_1_1 - 0.6410256410256*G0_2_1 - 0.4807692307692*G3_0_1 - 0.4807692307692*G3_1_1 - 0.4807692307692*G3_2_1;
    A[3] = -0.6410256410256*G0_0_2 - 0.6410256410256*G0_1_2 - 0.6410256410256*G0_2_2 - 0.4807692307692*G3_0_2 - 0.4807692307692*G3_1_2 - 0.4807692307692*G3_2_2;
    A[4] = 0.4807692307692*G2_0_0 + 0.4807692307692*G2_0_1 + 0.4807692307692*G2_0_2 + 0.4807692307692*G2_1_0 + 0.4807692307692*G2_1_1 + 0.4807692307692*G2_1_2 + 0.4807692307692*G2_2_0 + 0.4807692307692*G2_2_1 + 0.4807692307692*G2_2_2 + 0.6410256410256*G4_0_0 + 0.6410256410256*G4_0_1 + 0.6410256410256*G4_0_2 + 0.6410256410256*G4_1_0 + 0.6410256410256*G4_1_1 + 0.6410256410256*G4_1_2 + 0.6410256410256*G4_2_0 + 0.6410256410256*G4_2_1 + 0.6410256410256*G4_2_2;
    A[5] = -0.4807692307692*G2_0_0 - 0.4807692307692*G2_1_0 - 0.4807692307692*G2_2_0 - 0.6410256410256*G4_0_0 - 0.6410256410256*G4_1_0 - 0.6410256410256*G4_2_0;
    A[6] = -0.4807692307692*G2_0_1 - 0.4807692307692*G2_1_1 - 0.4807692307692*G2_2_1 - 0.6410256410256*G4_0_1 - 0.6410256410256*G4_1_1 - 0.6410256410256*G4_2_1;
    A[7] = -0.4807692307692*G2_0_2 - 0.4807692307692*G2_1_2 - 0.4807692307692*G2_2_2 - 0.6410256410256*G4_0_2 - 0.6410256410256*G4_1_2 - 0.6410256410256*G4_2_2;
    A[8] = 0.4807692307692*G1_0_0 + 0.4807692307692*G1_0_1 + 0.4807692307692*G1_0_2 + 0.4807692307692*G1_1_0 + 0.4807692307692*G1_1_1 + 0.4807692307692*G1_1_2 + 0.4807692307692*G1_2_0 + 0.4807692307692*G1_2_1 + 0.4807692307692*G1_2_2 + 0.6410256410256*G8_0_0 + 0.6410256410256*G8_0_1 + 0.6410256410256*G8_0_2 + 0.6410256410256*G8_1_0 + 0.6410256410256*G8_1_1 + 0.6410256410256*G8_1_2 + 0.6410256410256*G8_2_0 + 0.6410256410256*G8_2_1 + 0.6410256410256*G8_2_2;
    A[9] = -0.4807692307692*G1_0_0 - 0.4807692307692*G1_1_0 - 0.4807692307692*G1_2_0 - 0.6410256410256*G8_0_0 - 0.6410256410256*G8_1_0 - 0.6410256410256*G8_2_0;
    A[10] = -0.4807692307692*G1_0_1 - 0.4807692307692*G1_1_1 - 0.4807692307692*G1_2_1 - 0.6410256410256*G8_0_1 - 0.6410256410256*G8_1_1 - 0.6410256410256*G8_2_1;
    A[11] = -0.4807692307692*G1_0_2 - 0.4807692307692*G1_1_2 - 0.4807692307692*G1_2_2 - 0.6410256410256*G8_0_2 - 0.6410256410256*G8_1_2 - 0.6410256410256*G8_2_2;
    A[12] = -0.6410256410256*G0_0_0 - 0.6410256410256*G0_0_1 - 0.6410256410256*G0_0_2 - 0.4807692307692*G3_0_0 - 0.4807692307692*G3_0_1 - 0.4807692307692*G3_0_2;
    A[13] = 0.6410256410256*G0_0_0 + 0.4807692307692*G3_0_0;
    A[14] = 0.6410256410256*G0_0_1 + 0.4807692307692*G3_0_1;
    A[15] = 0.6410256410256*G0_0_2 + 0.4807692307692*G3_0_2;
    A[16] = -0.4807692307692*G2_0_0 - 0.4807692307692*G2_0_1 - 0.4807692307692*G2_0_2 - 0.6410256410256*G4_0_0 - 0.6410256410256*G4_0_1 - 0.6410256410256*G4_0_2;
    A[17] = 0.4807692307692*G2_0_0 + 0.6410256410256*G4_0_0;
    A[18] = 0.4807692307692*G2_0_1 + 0.6410256410256*G4_0_1;
    A[19] = 0.4807692307692*G2_0_2 + 0.6410256410256*G4_0_2;
    A[20] = -0.4807692307692*G1_0_0 - 0.4807692307692*G1_0_1 - 0.4807692307692*G1_0_2 - 0.6410256410256*G8_0_0 - 0.6410256410256*G8_0_1 - 0.6410256410256*G8_0_2;
    A[21] = 0.4807692307692*G1_0_0 + 0.6410256410256*G8_0_0;
    A[22] = 0.4807692307692*G1_0_1 + 0.6410256410256*G8_0_1;
    A[23] = 0.4807692307692*G1_0_2 + 0.6410256410256*G8_0_2;
    A[24] = -0.6410256410256*G0_1_0 - 0.6410256410256*G0_1_1 - 0.6410256410256*G0_1_2 - 0.4807692307692*G3_1_0 - 0.4807692307692*G3_1_1 - 0.4807692307692*G3_1_2;
    A[25] = 0.6410256410256*G0_1_0 + 0.4807692307692*G3_1_0;
    A[26] = 0.6410256410256*G0_1_1 + 0.4807692307692*G3_1_1;
    A[27] = 0.6410256410256*G0_1_2 + 0.4807692307692*G3_1_2;
    A[28] = -0.4807692307692*G2_1_0 - 0.4807692307692*G2_1_1 - 0.4807692307692*G2_1_2 - 0.6410256410256*G4_1_0 - 0.6410256410256*G4_1_1 - 0.6410256410256*G4_1_2;
    A[29] = 0.4807692307692*G2_1_0 + 0.6410256410256*G4_1_0;
    A[30] = 0.4807692307692*G2_1_1 + 0.6410256410256*G4_1_1;
    A[31] = 0.4807692307692*G2_1_2 + 0.6410256410256*G4_1_2;
    A[32] = -0.4807692307692*G1_1_0 - 0.4807692307692*G1_1_1 - 0.4807692307692*G1_1_2 - 0.6410256410256*G8_1_0 - 0.6410256410256*G8_1_1 - 0.6410256410256*G8_1_2;
    A[33] = 0.4807692307692*G1_1_0 + 0.6410256410256*G8_1_0;
    A[34] = 0.4807692307692*G1_1_1 + 0.6410256410256*G8_1_1;
    A[35] = 0.4807692307692*G1_1_2 + 0.6410256410256*G8_1_2;
    A[36] = -0.6410256410256*G0_2_0 - 0.6410256410256*G0_2_1 - 0.6410256410256*G0_2_2 - 0.4807692307692*G3_2_0 - 0.4807692307692*G3_2_1 - 0.4807692307692*G3_2_2;
    A[37] = 0.6410256410256*G0_2_0 + 0.4807692307692*G3_2_0;
    A[38] = 0.6410256410256*G0_2_1 + 0.4807692307692*G3_2_1;
    A[39] = 0.6410256410256*G0_2_2 + 0.4807692307692*G3_2_2;
    A[40] = -0.4807692307692*G2_2_0 - 0.4807692307692*G2_2_1 - 0.4807692307692*G2_2_2 - 0.6410256410256*G4_2_0 - 0.6410256410256*G4_2_1 - 0.6410256410256*G4_2_2;
    A[41] = 0.4807692307692*G2_2_0 + 0.6410256410256*G4_2_0;
    A[42] = 0.4807692307692*G2_2_1 + 0.6410256410256*G4_2_1;
    A[43] = 0.4807692307692*G2_2_2 + 0.6410256410256*G4_2_2;
    A[44] = -0.4807692307692*G1_2_0 - 0.4807692307692*G1_2_1 - 0.4807692307692*G1_2_2 - 0.6410256410256*G8_2_0 - 0.6410256410256*G8_2_1 - 0.6410256410256*G8_2_2;
    A[45] = 0.4807692307692*G1_2_0 + 0.6410256410256*G8_2_0;
    A[46] = 0.4807692307692*G1_2_1 + 0.6410256410256*G8_2_1;
    A[47] = 0.4807692307692*G1_2_2 + 0.6410256410256*G8_2_2;
    A[48] = 0.6410256410256*G10_0_0 + 0.6410256410256*G10_0_1 + 0.6410256410256*G10_0_2 + 0.6410256410256*G10_1_0 + 0.6410256410256*G10_1_1 + 0.6410256410256*G10_1_2 + 0.6410256410256*G10_2_0 + 0.6410256410256*G10_2_1 + 0.6410256410256*G10_2_2 + 0.4807692307692*G16_0_0 + 0.4807692307692*G16_0_1 + 0.4807692307692*G16_0_2 + 0.4807692307692*G16_1_0 + 0.4807692307692*G16_1_1 + 0.4807692307692*G16_1_2 + 0.4807692307692*G16_2_0 + 0.4807692307692*G16_2_1 + 0.4807692307692*G16_2_2;
    A[49] = -0.6410256410256*G10_0_0 - 0.6410256410256*G10_1_0 - 0.6410256410256*G10_2_0 - 0.4807692307692*G16_0_0 - 0.4807692307692*G16_1_0 - 0.4807692307692*G16_2_0;
    A[50] = -0.6410256410256*G10_0_1 - 0.6410256410256*G10_1_1 - 0.6410256410256*G10_2_1 - 0.4807692307692*G16_0_1 - 0.4807692307692*G16_1_1 - 0.4807692307692*G16_2_1;
    A[51] = -0.6410256410256*G10_0_2 - 0.6410256410256*G10_1_2 - 0.6410256410256*G10_2_2 - 0.4807692307692*G16_0_2 - 0.4807692307692*G16_1_2 - 0.4807692307692*G16_2_2;
    A[52] = 0.6410256410256*G9_0_0 + 0.6410256410256*G9_0_1 + 0.6410256410256*G9_0_2 + 0.6410256410256*G9_1_0 + 0.6410256410256*G9_1_1 + 0.6410256410256*G9_1_2 + 0.6410256410256*G9_2_0 + 0.6410256410256*G9_2_1 + 0.6410256410256*G9_2_2 + 0.4807692307692*G15_0_0 + 0.4807692307692*G15_0_1 + 0.4807692307692*G15_0_2 + 0.4807692307692*G15_1_0 + 0.4807692307692*G15_1_1 + 0.4807692307692*G15_1_2 + 0.4807692307692*G15_2_0 + 0.4807692307692*G15_2_1 + 0.4807692307692*G15_2_2;
    A[53] = -0.6410256410256*G9_0_0 - 0.6410256410256*G9_1_0 - 0.6410256410256*G9_2_0 - 0.4807692307692*G15_0_0 - 0.4807692307692*G15_1_0 - 0.4807692307692*G15_2_0;
    A[54] = -0.6410256410256*G9_0_1 - 0.6410256410256*G9_1_1 - 0.6410256410256*G9_2_1 - 0.4807692307692*G15_0_1 - 0.4807692307692*G15_1_1 - 0.4807692307692*G15_2_1;
    A[55] = -0.6410256410256*G9_0_2 - 0.6410256410256*G9_1_2 - 0.6410256410256*G9_2_2 - 0.4807692307692*G15_0_2 - 0.4807692307692*G15_1_2 - 0.4807692307692*G15_2_2;
    A[56] = 0.4807692307692*G14_0_0 + 0.4807692307692*G14_0_1 + 0.4807692307692*G14_0_2 + 0.4807692307692*G14_1_0 + 0.4807692307692*G14_1_1 + 0.4807692307692*G14_1_2 + 0.4807692307692*G14_2_0 + 0.4807692307692*G14_2_1 + 0.4807692307692*G14_2_2 + 0.6410256410256*G17_0_0 + 0.6410256410256*G17_0_1 + 0.6410256410256*G17_0_2 + 0.6410256410256*G17_1_0 + 0.6410256410256*G17_1_1 + 0.6410256410256*G17_1_2 + 0.6410256410256*G17_2_0 + 0.6410256410256*G17_2_1 + 0.6410256410256*G17_2_2;
    A[57] = -0.4807692307692*G14_0_0 - 0.4807692307692*G14_1_0 - 0.4807692307692*G14_2_0 - 0.6410256410256*G17_0_0 - 0.6410256410256*G17_1_0 - 0.6410256410256*G17_2_0;
    A[58] = -0.4807692307692*G14_0_1 - 0.4807692307692*G14_1_1 - 0.4807692307692*G14_2_1 - 0.6410256410256*G17_0_1 - 0.6410256410256*G17_1_1 - 0.6410256410256*G17_2_1;
    A[59] = -0.4807692307692*G14_0_2 - 0.4807692307692*G14_1_2 - 0.4807692307692*G14_2_2 - 0.6410256410256*G17_0_2 - 0.6410256410256*G17_1_2 - 0.6410256410256*G17_2_2;
    A[60] = -0.6410256410256*G10_0_0 - 0.6410256410256*G10_0_1 - 0.6410256410256*G10_0_2 - 0.4807692307692*G16_0_0 - 0.4807692307692*G16_0_1 - 0.4807692307692*G16_0_2;
    A[61] = 0.6410256410256*G10_0_0 + 0.4807692307692*G16_0_0;
    A[62] = 0.6410256410256*G10_0_1 + 0.4807692307692*G16_0_1;
    A[63] = 0.6410256410256*G10_0_2 + 0.4807692307692*G16_0_2;
    A[64] = -0.6410256410256*G9_0_0 - 0.6410256410256*G9_0_1 - 0.6410256410256*G9_0_2 - 0.4807692307692*G15_0_0 - 0.4807692307692*G15_0_1 - 0.4807692307692*G15_0_2;
    A[65] = 0.6410256410256*G9_0_0 + 0.4807692307692*G15_0_0;
    A[66] = 0.6410256410256*G9_0_1 + 0.4807692307692*G15_0_1;
    A[67] = 0.6410256410256*G9_0_2 + 0.4807692307692*G15_0_2;
    A[68] = -0.4807692307692*G14_0_0 - 0.4807692307692*G14_0_1 - 0.4807692307692*G14_0_2 - 0.6410256410256*G17_0_0 - 0.6410256410256*G17_0_1 - 0.6410256410256*G17_0_2;
    A[69] = 0.4807692307692*G14_0_0 + 0.6410256410256*G17_0_0;
    A[70] = 0.4807692307692*G14_0_1 + 0.6410256410256*G17_0_1;
    A[71] = 0.4807692307692*G14_0_2 + 0.6410256410256*G17_0_2;
    A[72] = -0.6410256410256*G10_1_0 - 0.6410256410256*G10_1_1 - 0.6410256410256*G10_1_2 - 0.4807692307692*G16_1_0 - 0.4807692307692*G16_1_1 - 0.4807692307692*G16_1_2;
    A[73] = 0.6410256410256*G10_1_0 + 0.4807692307692*G16_1_0;
    A[74] = 0.6410256410256*G10_1_1 + 0.4807692307692*G16_1_1;
    A[75] = 0.6410256410256*G10_1_2 + 0.4807692307692*G16_1_2;
    A[76] = -0.6410256410256*G9_1_0 - 0.6410256410256*G9_1_1 - 0.6410256410256*G9_1_2 - 0.4807692307692*G15_1_0 - 0.4807692307692*G15_1_1 - 0.4807692307692*G15_1_2;
    A[77] = 0.6410256410256*G9_1_0 + 0.4807692307692*G15_1_0;
    A[78] = 0.6410256410256*G9_1_1 + 0.4807692307692*G15_1_1;
    A[79] = 0.6410256410256*G9_1_2 + 0.4807692307692*G15_1_2;
    A[80] = -0.4807692307692*G14_1_0 - 0.4807692307692*G14_1_1 - 0.4807692307692*G14_1_2 - 0.6410256410256*G17_1_0 - 0.6410256410256*G17_1_1 - 0.6410256410256*G17_1_2;
    A[81] = 0.4807692307692*G14_1_0 + 0.6410256410256*G17_1_0;
    A[82] = 0.4807692307692*G14_1_1 + 0.6410256410256*G17_1_1;
    A[83] = 0.4807692307692*G14_1_2 + 0.6410256410256*G17_1_2;
    A[84] = -0.6410256410256*G10_2_0 - 0.6410256410256*G10_2_1 - 0.6410256410256*G10_2_2 - 0.4807692307692*G16_2_0 - 0.4807692307692*G16_2_1 - 0.4807692307692*G16_2_2;
    A[85] = 0.6410256410256*G10_2_0 + 0.4807692307692*G16_2_0;
    A[86] = 0.6410256410256*G10_2_1 + 0.4807692307692*G16_2_1;
    A[87] = 0.6410256410256*G10_2_2 + 0.4807692307692*G16_2_2;
    A[88] = -0.6410256410256*G9_2_0 - 0.6410256410256*G9_2_1 - 0.6410256410256*G9_2_2 - 0.4807692307692*G15_2_0 - 0.4807692307692*G15_2_1 - 0.4807692307692*G15_2_2;
    A[89] = 0.6410256410256*G9_2_0 + 0.4807692307692*G15_2_0;
    A[90] = 0.6410256410256*G9_2_1 + 0.4807692307692*G15_2_1;
    A[91] = 0.6410256410256*G9_2_2 + 0.4807692307692*G15_2_2;
    A[92] = -0.4807692307692*G14_2_0 - 0.4807692307692*G14_2_1 - 0.4807692307692*G14_2_2 - 0.6410256410256*G17_2_0 - 0.6410256410256*G17_2_1 - 0.6410256410256*G17_2_2;
    A[93] = 0.4807692307692*G14_2_0 + 0.6410256410256*G17_2_0;
    A[94] = 0.4807692307692*G14_2_1 + 0.6410256410256*G17_2_1;
    A[95] = 0.4807692307692*G14_2_2 + 0.6410256410256*G17_2_2;
    A[96] = 0.6410256410256*G19_0_0 + 0.6410256410256*G19_0_1 + 0.6410256410256*G19_0_2 + 0.6410256410256*G19_1_0 + 0.6410256410256*G19_1_1 + 0.6410256410256*G19_1_2 + 0.6410256410256*G19_2_0 + 0.6410256410256*G19_2_1 + 0.6410256410256*G19_2_2 + 0.4807692307692*G26_0_0 + 0.4807692307692*G26_0_1 + 0.4807692307692*G26_0_2 + 0.4807692307692*G26_1_0 + 0.4807692307692*G26_1_1 + 0.4807692307692*G26_1_2 + 0.4807692307692*G26_2_0 + 0.4807692307692*G26_2_1 + 0.4807692307692*G26_2_2;
    A[97] = -0.6410256410256*G19_0_0 - 0.6410256410256*G19_1_0 - 0.6410256410256*G19_2_0 - 0.4807692307692*G26_0_0 - 0.4807692307692*G26_1_0 - 0.4807692307692*G26_2_0;
    A[98] = -0.6410256410256*G19_0_1 - 0.6410256410256*G19_1_1 - 0.6410256410256*G19_2_1 - 0.4807692307692*G26_0_1 - 0.4807692307692*G26_1_1 - 0.4807692307692*G26_2_1;
    A[99] = -0.6410256410256*G19_0_2 - 0.6410256410256*G19_1_2 - 0.6410256410256*G19_2_2 - 0.4807692307692*G26_0_2 - 0.4807692307692*G26_1_2 - 0.4807692307692*G26_2_2;
    A[100] = 0.6410256410256*G23_0_0 + 0.6410256410256*G23_0_1 + 0.6410256410256*G23_0_2 + 0.6410256410256*G23_1_0 + 0.6410256410256*G23_1_1 + 0.6410256410256*G23_1_2 + 0.6410256410256*G23_2_0 + 0.6410256410256*G23_2_1 + 0.6410256410256*G23_2_2 + 0.4807692307692*G25_0_0 + 0.4807692307692*G25_0_1 + 0.4807692307692*G25_0_2 + 0.4807692307692*G25_1_0 + 0.4807692307692*G25_1_1 + 0.4807692307692*G25_1_2 + 0.4807692307692*G25_2_0 + 0.4807692307692*G25_2_1 + 0.4807692307692*G25_2_2;
    A[101] = -0.6410256410256*G23_0_0 - 0.6410256410256*G23_1_0 - 0.6410256410256*G23_2_0 - 0.4807692307692*G25_0_0 - 0.4807692307692*G25_1_0 - 0.4807692307692*G25_2_0;
    A[102] = -0.6410256410256*G23_0_1 - 0.6410256410256*G23_1_1 - 0.6410256410256*G23_2_1 - 0.4807692307692*G25_0_1 - 0.4807692307692*G25_1_1 - 0.4807692307692*G25_2_1;
    A[103] = -0.6410256410256*G23_0_2 - 0.6410256410256*G23_1_2 - 0.6410256410256*G23_2_2 - 0.4807692307692*G25_0_2 - 0.4807692307692*G25_1_2 - 0.4807692307692*G25_2_2;
    A[104] = 0.6410256410256*G18_0_0 + 0.6410256410256*G18_0_1 + 0.6410256410256*G18_0_2 + 0.6410256410256*G18_1_0 + 0.6410256410256*G18_1_1 + 0.6410256410256*G18_1_2 + 0.6410256410256*G18_2_0 + 0.6410256410256*G18_2_1 + 0.6410256410256*G18_2_2 + 0.4807692307692*G24_0_0 + 0.4807692307692*G24_0_1 + 0.4807692307692*G24_0_2 + 0.4807692307692*G24_1_0 + 0.4807692307692*G24_1_1 + 0.4807692307692*G24_1_2 + 0.4807692307692*G24_2_0 + 0.4807692307692*G24_2_1 + 0.4807692307692*G24_2_2;
    A[105] = -0.6410256410256*G18_0_0 - 0.6410256410256*G18_1_0 - 0.6410256410256*G18_2_0 - 0.4807692307692*G24_0_0 - 0.4807692307692*G24_1_0 - 0.4807692307692*G24_2_0;
    A[106] = -0.6410256410256*G18_0_1 - 0.6410256410256*G18_1_1 - 0.6410256410256*G18_2_1 - 0.4807692307692*G24_0_1 - 0.4807692307692*G24_1_1 - 0.4807692307692*G24_2_1;
    A[107] = -0.6410256410256*G18_0_2 - 0.6410256410256*G18_1_2 - 0.6410256410256*G18_2_2 - 0.4807692307692*G24_0_2 - 0.4807692307692*G24_1_2 - 0.4807692307692*G24_2_2;
    A[108] = -0.6410256410256*G19_0_0 - 0.6410256410256*G19_0_1 - 0.6410256410256*G19_0_2 - 0.4807692307692*G26_0_0 - 0.4807692307692*G26_0_1 - 0.4807692307692*G26_0_2;
    A[109] = 0.6410256410256*G19_0_0 + 0.4807692307692*G26_0_0;
    A[110] = 0.6410256410256*G19_0_1 + 0.4807692307692*G26_0_1;
    A[111] = 0.6410256410256*G19_0_2 + 0.4807692307692*G26_0_2;
    A[112] = -0.6410256410256*G23_0_0 - 0.6410256410256*G23_0_1 - 0.6410256410256*G23_0_2 - 0.4807692307692*G25_0_0 - 0.4807692307692*G25_0_1 - 0.4807692307692*G25_0_2;
    A[113] = 0.6410256410256*G23_0_0 + 0.4807692307692*G25_0_0;
    A[114] = 0.6410256410256*G23_0_1 + 0.4807692307692*G25_0_1;
    A[115] = 0.6410256410256*G23_0_2 + 0.4807692307692*G25_0_2;
    A[116] = -0.6410256410256*G18_0_0 - 0.6410256410256*G18_0_1 - 0.6410256410256*G18_0_2 - 0.4807692307692*G24_0_0 - 0.4807692307692*G24_0_1 - 0.4807692307692*G24_0_2;
    A[117] = 0.6410256410256*G18_0_0 + 0.4807692307692*G24_0_0;
    A[118] = 0.6410256410256*G18_0_1 + 0.4807692307692*G24_0_1;
    A[119] = 0.6410256410256*G18_0_2 + 0.4807692307692*G24_0_2;
    A[120] = -0.6410256410256*G19_1_0 - 0.6410256410256*G19_1_1 - 0.6410256410256*G19_1_2 - 0.4807692307692*G26_1_0 - 0.4807692307692*G26_1_1 - 0.4807692307692*G26_1_2;
    A[121] = 0.6410256410256*G19_1_0 + 0.4807692307692*G26_1_0;
    A[122] = 0.6410256410256*G19_1_1 + 0.4807692307692*G26_1_1;
    A[123] = 0.6410256410256*G19_1_2 + 0.4807692307692*G26_1_2;
    A[124] = -0.6410256410256*G23_1_0 - 0.6410256410256*G23_1_1 - 0.6410256410256*G23_1_2 - 0.4807692307692*G25_1_0 - 0.4807692307692*G25_1_1 - 0.4807692307692*G25_1_2;
    A[125] = 0.6410256410256*G23_1_0 + 0.4807692307692*G25_1_0;
    A[126] = 0.6410256410256*G23_1_1 + 0.4807692307692*G25_1_1;
    A[127] = 0.6410256410256*G23_1_2 + 0.4807692307692*G25_1_2;
    A[128] = -0.6410256410256*G18_1_0 - 0.6410256410256*G18_1_1 - 0.6410256410256*G18_1_2 - 0.4807692307692*G24_1_0 - 0.4807692307692*G24_1_1 - 0.4807692307692*G24_1_2;
    A[129] = 0.6410256410256*G18_1_0 + 0.4807692307692*G24_1_0;
    A[130] = 0.6410256410256*G18_1_1 + 0.4807692307692*G24_1_1;
    A[131] = 0.6410256410256*G18_1_2 + 0.4807692307692*G24_1_2;
    A[132] = -0.6410256410256*G19_2_0 - 0.6410256410256*G19_2_1 - 0.6410256410256*G19_2_2 - 0.4807692307692*G26_2_0 - 0.4807692307692*G26_2_1 - 0.4807692307692*G26_2_2;
    A[133] = 0.6410256410256*G19_2_0 + 0.4807692307692*G26_2_0;
    A[134] = 0.6410256410256*G19_2_1 + 0.4807692307692*G26_2_1;
    A[135] = 0.6410256410256*G19_2_2 + 0.4807692307692*G26_2_2;
    A[136] = -0.6410256410256*G23_2_0 - 0.6410256410256*G23_2_1 - 0.6410256410256*G23_2_2 - 0.4807692307692*G25_2_0 - 0.4807692307692*G25_2_1 - 0.4807692307692*G25_2_2;
    A[137] = 0.6410256410256*G23_2_0 + 0.4807692307692*G25_2_0;
    A[138] = 0.6410256410256*G23_2_1 + 0.4807692307692*G25_2_1;
    A[139] = 0.6410256410256*G23_2_2 + 0.4807692307692*G25_2_2;
    A[140] = -0.6410256410256*G18_2_0 - 0.6410256410256*G18_2_1 - 0.6410256410256*G18_2_2 - 0.4807692307692*G24_2_0 - 0.4807692307692*G24_2_1 - 0.4807692307692*G24_2_2;
    A[141] = 0.6410256410256*G18_2_0 + 0.4807692307692*G24_2_0;
    A[142] = 0.6410256410256*G18_2_1 + 0.4807692307692*G24_2_1;
    A[143] = 0.6410256410256*G18_2_2 + 0.4807692307692*G24_2_2;
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class ElasticityBilinearForm: public ufc::form
{
public:

  /// Constructor
  ElasticityBilinearForm() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ElasticityBilinearForm()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "3.84615384615|det F'|(dXa0/dx0)(dXa1/dx0) | ((d/dXa0)vi0[0])*((d/dXa1)vi1[0])*dX(0) + 3.84615384615|det F'|(dXa0/dx0)(dXa1/dx0) | ((d/dXa0)vi0[0])*((d/dXa1)vi1[0])*dX(0) + 2.88461538462|det F'|(dXa0/dx0)(dXa1/dx2) | ((d/dXa0)vi0[0])*((d/dXa1)vi1[2])*dX(0) + 2.88461538462|det F'|(dXa0/dx0)(dXa1/dx2) | ((d/dXa0)vi0[0])*((d/dXa1)vi1[2])*dX(0) + 2.88461538462|det F'|(dXa0/dx0)(dXa1/dx1) | ((d/dXa0)vi0[0])*((d/dXa1)vi1[1])*dX(0) + 2.88461538462|det F'|(dXa0/dx0)(dXa1/dx1) | ((d/dXa0)vi0[0])*((d/dXa1)vi1[1])*dX(0) + 2.88461538462|det F'|(dXa0/dx0)(dXa1/dx0) | ((d/dXa0)vi0[0])*((d/dXa1)vi1[0])*dX(0) + 2.88461538462|det F'|(dXa0/dx0)(dXa1/dx0) | ((d/dXa0)vi0[0])*((d/dXa1)vi1[0])*dX(0) + 3.84615384615|det F'|(dXa0/dx1)(dXa1/dx1) | ((d/dXa0)vi0[0])*((d/dXa1)vi1[0])*dX(0) + 3.84615384615|det F'|(dXa0/dx1)(dXa1/dx0) | ((d/dXa0)vi0[0])*((d/dXa1)vi1[1])*dX(0) + 0.0|det F'|(dXa0/dx1)(dXa1/dx2) | ((d/dXa0)vi0[0])*((d/dXa1)vi1[2])*dX(0) + 0.0|det F'|(dXa0/dx1)(dXa1/dx2) | ((d/dXa0)vi0[0])*((d/dXa1)vi1[2])*dX(0) + 0.0|det F'|(dXa0/dx1)(dXa1/dx1) | ((d/dXa0)vi0[0])*((d/dXa1)vi1[1])*dX(0) + 0.0|det F'|(dXa0/dx1)(dXa1/dx1) | ((d/dXa0)vi0[0])*((d/dXa1)vi1[1])*dX(0) + 0.0|det F'|(dXa0/dx1)(dXa1/dx0) | ((d/dXa0)vi0[0])*((d/dXa1)vi1[0])*dX(0) + 0.0|det F'|(dXa0/dx1)(dXa1/dx0) | ((d/dXa0)vi0[0])*((d/dXa1)vi1[0])*dX(0) + 3.84615384615|det F'|(dXa0/dx2)(dXa1/dx2) | ((d/dXa0)vi0[0])*((d/dXa1)vi1[0])*dX(0) + 3.84615384615|det F'|(dXa0/dx2)(dXa1/dx0) | ((d/dXa0)vi0[0])*((d/dXa1)vi1[2])*dX(0) + 0.0|det F'|(dXa0/dx2)(dXa1/dx2) | ((d/dXa0)vi0[0])*((d/dXa1)vi1[2])*dX(0) + 0.0|det F'|(dXa0/dx2)(dXa1/dx2) | ((d/dXa0)vi0[0])*((d/dXa1)vi1[2])*dX(0) + 0.0|det F'|(dXa0/dx2)(dXa1/dx1) | ((d/dXa0)vi0[0])*((d/dXa1)vi1[1])*dX(0) + 0.0|det F'|(dXa0/dx2)(dXa1/dx1) | ((d/dXa0)vi0[0])*((d/dXa1)vi1[1])*dX(0) + 0.0|det F'|(dXa0/dx2)(dXa1/dx0) | ((d/dXa0)vi0[0])*((d/dXa1)vi1[0])*dX(0) + 0.0|det F'|(dXa0/dx2)(dXa1/dx0) | ((d/dXa0)vi0[0])*((d/dXa1)vi1[0])*dX(0) + 3.84615384615|det F'|(dXa0/dx0)(dXa1/dx0) | ((d/dXa0)vi0[1])*((d/dXa1)vi1[1])*dX(0) + 3.84615384615|det F'|(dXa0/dx0)(dXa1/dx1) | ((d/dXa0)vi0[1])*((d/dXa1)vi1[0])*dX(0) + 0.0|det F'|(dXa0/dx0)(dXa1/dx2) | ((d/dXa0)vi0[1])*((d/dXa1)vi1[2])*dX(0) + 0.0|det F'|(dXa0/dx0)(dXa1/dx2) | ((d/dXa0)vi0[1])*((d/dXa1)vi1[2])*dX(0) + 0.0|det F'|(dXa0/dx0)(dXa1/dx1) | ((d/dXa0)vi0[1])*((d/dXa1)vi1[1])*dX(0) + 0.0|det F'|(dXa0/dx0)(dXa1/dx1) | ((d/dXa0)vi0[1])*((d/dXa1)vi1[1])*dX(0) + 0.0|det F'|(dXa0/dx0)(dXa1/dx0) | ((d/dXa0)vi0[1])*((d/dXa1)vi1[0])*dX(0) + 0.0|det F'|(dXa0/dx0)(dXa1/dx0) | ((d/dXa0)vi0[1])*((d/dXa1)vi1[0])*dX(0) + 3.84615384615|det F'|(dXa0/dx1)(dXa1/dx1) | ((d/dXa0)vi0[1])*((d/dXa1)vi1[1])*dX(0) + 3.84615384615|det F'|(dXa0/dx1)(dXa1/dx1) | ((d/dXa0)vi0[1])*((d/dXa1)vi1[1])*dX(0) + 2.88461538462|det F'|(dXa0/dx1)(dXa1/dx2) | ((d/dXa0)vi0[1])*((d/dXa1)vi1[2])*dX(0) + 2.88461538462|det F'|(dXa0/dx1)(dXa1/dx2) | ((d/dXa0)vi0[1])*((d/dXa1)vi1[2])*dX(0) + 2.88461538462|det F'|(dXa0/dx1)(dXa1/dx1) | ((d/dXa0)vi0[1])*((d/dXa1)vi1[1])*dX(0) + 2.88461538462|det F'|(dXa0/dx1)(dXa1/dx1) | ((d/dXa0)vi0[1])*((d/dXa1)vi1[1])*dX(0) + 2.88461538462|det F'|(dXa0/dx1)(dXa1/dx0) | ((d/dXa0)vi0[1])*((d/dXa1)vi1[0])*dX(0) + 2.88461538462|det F'|(dXa0/dx1)(dXa1/dx0) | ((d/dXa0)vi0[1])*((d/dXa1)vi1[0])*dX(0) + 3.84615384615|det F'|(dXa0/dx2)(dXa1/dx2) | ((d/dXa0)vi0[1])*((d/dXa1)vi1[1])*dX(0) + 3.84615384615|det F'|(dXa0/dx2)(dXa1/dx1) | ((d/dXa0)vi0[1])*((d/dXa1)vi1[2])*dX(0) + 0.0|det F'|(dXa0/dx2)(dXa1/dx2) | ((d/dXa0)vi0[1])*((d/dXa1)vi1[2])*dX(0) + 0.0|det F'|(dXa0/dx2)(dXa1/dx2) | ((d/dXa0)vi0[1])*((d/dXa1)vi1[2])*dX(0) + 0.0|det F'|(dXa0/dx2)(dXa1/dx1) | ((d/dXa0)vi0[1])*((d/dXa1)vi1[1])*dX(0) + 0.0|det F'|(dXa0/dx2)(dXa1/dx1) | ((d/dXa0)vi0[1])*((d/dXa1)vi1[1])*dX(0) + 0.0|det F'|(dXa0/dx2)(dXa1/dx0) | ((d/dXa0)vi0[1])*((d/dXa1)vi1[0])*dX(0) + 0.0|det F'|(dXa0/dx2)(dXa1/dx0) | ((d/dXa0)vi0[1])*((d/dXa1)vi1[0])*dX(0) + 3.84615384615|det F'|(dXa0/dx0)(dXa1/dx0) | ((d/dXa0)vi0[2])*((d/dXa1)vi1[2])*dX(0) + 3.84615384615|det F'|(dXa0/dx0)(dXa1/dx2) | ((d/dXa0)vi0[2])*((d/dXa1)vi1[0])*dX(0) + 0.0|det F'|(dXa0/dx0)(dXa1/dx2) | ((d/dXa0)vi0[2])*((d/dXa1)vi1[2])*dX(0) + 0.0|det F'|(dXa0/dx0)(dXa1/dx2) | ((d/dXa0)vi0[2])*((d/dXa1)vi1[2])*dX(0) + 0.0|det F'|(dXa0/dx0)(dXa1/dx1) | ((d/dXa0)vi0[2])*((d/dXa1)vi1[1])*dX(0) + 0.0|det F'|(dXa0/dx0)(dXa1/dx1) | ((d/dXa0)vi0[2])*((d/dXa1)vi1[1])*dX(0) + 0.0|det F'|(dXa0/dx0)(dXa1/dx0) | ((d/dXa0)vi0[2])*((d/dXa1)vi1[0])*dX(0) + 0.0|det F'|(dXa0/dx0)(dXa1/dx0) | ((d/dXa0)vi0[2])*((d/dXa1)vi1[0])*dX(0) + 3.84615384615|det F'|(dXa0/dx1)(dXa1/dx1) | ((d/dXa0)vi0[2])*((d/dXa1)vi1[2])*dX(0) + 3.84615384615|det F'|(dXa0/dx1)(dXa1/dx2) | ((d/dXa0)vi0[2])*((d/dXa1)vi1[1])*dX(0) + 0.0|det F'|(dXa0/dx1)(dXa1/dx2) | ((d/dXa0)vi0[2])*((d/dXa1)vi1[2])*dX(0) + 0.0|det F'|(dXa0/dx1)(dXa1/dx2) | ((d/dXa0)vi0[2])*((d/dXa1)vi1[2])*dX(0) + 0.0|det F'|(dXa0/dx1)(dXa1/dx1) | ((d/dXa0)vi0[2])*((d/dXa1)vi1[1])*dX(0) + 0.0|det F'|(dXa0/dx1)(dXa1/dx1) | ((d/dXa0)vi0[2])*((d/dXa1)vi1[1])*dX(0) + 0.0|det F'|(dXa0/dx1)(dXa1/dx0) | ((d/dXa0)vi0[2])*((d/dXa1)vi1[0])*dX(0) + 0.0|det F'|(dXa0/dx1)(dXa1/dx0) | ((d/dXa0)vi0[2])*((d/dXa1)vi1[0])*dX(0) + 3.84615384615|det F'|(dXa0/dx2)(dXa1/dx2) | ((d/dXa0)vi0[2])*((d/dXa1)vi1[2])*dX(0) + 3.84615384615|det F'|(dXa0/dx2)(dXa1/dx2) | ((d/dXa0)vi0[2])*((d/dXa1)vi1[2])*dX(0) + 2.88461538462|det F'|(dXa0/dx2)(dXa1/dx2) | ((d/dXa0)vi0[2])*((d/dXa1)vi1[2])*dX(0) + 2.88461538462|det F'|(dXa0/dx2)(dXa1/dx2) | ((d/dXa0)vi0[2])*((d/dXa1)vi1[2])*dX(0) + 2.88461538462|det F'|(dXa0/dx2)(dXa1/dx1) | ((d/dXa0)vi0[2])*((d/dXa1)vi1[1])*dX(0) + 2.88461538462|det F'|(dXa0/dx2)(dXa1/dx1) | ((d/dXa0)vi0[2])*((d/dXa1)vi1[1])*dX(0) + 2.88461538462|det F'|(dXa0/dx2)(dXa1/dx0) | ((d/dXa0)vi0[2])*((d/dXa1)vi1[0])*dX(0) + 2.88461538462|det F'|(dXa0/dx2)(dXa1/dx0) | ((d/dXa0)vi0[2])*((d/dXa1)vi1[0])*dX(0)";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 2;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 0;
  }

  /// Return the number of cell integrals
  virtual unsigned int num_cell_integrals() const
  {
    return 1;
  }
  
  /// Return the number of exterior facet integrals
  virtual unsigned int num_exterior_facet_integrals() const
  {
    return 0;
  }
  
  /// Return the number of interior facet integrals
  virtual unsigned int num_interior_facet_integrals() const
  {
    return 0;
  }
    
  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new ElasticityBilinearForm_finite_element_0();
      break;
    case 1:
      return new ElasticityBilinearForm_finite_element_1();
      break;
    }
    return 0;
  }
  
  /// Create a new dof map for argument function i
  virtual ufc::dof_map* create_dof_map(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new ElasticityBilinearForm_dof_map_0();
      break;
    case 1:
      return new ElasticityBilinearForm_dof_map_1();
      break;
    }
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    return new ElasticityBilinearForm_cell_integral_0();
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

/// This class defines the interface for a finite element.

class ElasticityLinearForm_finite_element_0_2: public ufc::finite_element
{
public:

  /// Constructor
  ElasticityLinearForm_finite_element_0_2() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ElasticityLinearForm_finite_element_0_2()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Lagrange finite element of degree 1 on a tetrahedron";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 4;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Not implemented
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    double values[1];
    double coordinates[3];
    
    // Nodal coordinates on reference cell
    static double X[4][3] = {{0, 0, 0}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}};
    
    // Components for each dof
    static unsigned int components[4] = {0, 0, 0, 0};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0] - X[i][1] - X[i][2];
    const double w1 = X[i][0];
    const double w2 = X[i][1];
    const double w3 = X[i][2];
    
    // Compute affine mapping x = F(X)
    coordinates[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    coordinates[0] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    coordinates[0] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at coordinates
    f.evaluate(values, coordinates, c);
    
    // Pick component for evaluation
    return values[components[i]];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new ElasticityLinearForm_finite_element_0_2();
  }

};

/// This class defines the interface for a finite element.

class ElasticityLinearForm_finite_element_0_1: public ufc::finite_element
{
public:

  /// Constructor
  ElasticityLinearForm_finite_element_0_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ElasticityLinearForm_finite_element_0_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Lagrange finite element of degree 1 on a tetrahedron";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 4;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Not implemented
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    double values[1];
    double coordinates[3];
    
    // Nodal coordinates on reference cell
    static double X[4][3] = {{0, 0, 0}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}};
    
    // Components for each dof
    static unsigned int components[4] = {0, 0, 0, 0};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0] - X[i][1] - X[i][2];
    const double w1 = X[i][0];
    const double w2 = X[i][1];
    const double w3 = X[i][2];
    
    // Compute affine mapping x = F(X)
    coordinates[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    coordinates[0] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    coordinates[0] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at coordinates
    f.evaluate(values, coordinates, c);
    
    // Pick component for evaluation
    return values[components[i]];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new ElasticityLinearForm_finite_element_0_1();
  }

};

/// This class defines the interface for a finite element.

class ElasticityLinearForm_finite_element_0_0: public ufc::finite_element
{
public:

  /// Constructor
  ElasticityLinearForm_finite_element_0_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ElasticityLinearForm_finite_element_0_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Lagrange finite element of degree 1 on a tetrahedron";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 4;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Not implemented
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    double values[1];
    double coordinates[3];
    
    // Nodal coordinates on reference cell
    static double X[4][3] = {{0, 0, 0}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}};
    
    // Components for each dof
    static unsigned int components[4] = {0, 0, 0, 0};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0] - X[i][1] - X[i][2];
    const double w1 = X[i][0];
    const double w2 = X[i][1];
    const double w3 = X[i][2];
    
    // Compute affine mapping x = F(X)
    coordinates[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    coordinates[0] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    coordinates[0] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at coordinates
    f.evaluate(values, coordinates, c);
    
    // Pick component for evaluation
    return values[components[i]];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new ElasticityLinearForm_finite_element_0_0();
  }

};

/// This class defines the interface for a finite element.

class ElasticityLinearForm_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  ElasticityLinearForm_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ElasticityLinearForm_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Mixed finite element: [Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron]";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 12;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 3;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Not implemented
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    double values[3];
    double coordinates[3];
    
    // Nodal coordinates on reference cell
    static double X[12][3] = {{0, 0, 0}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}, {0, 0, 0}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}, {0, 0, 0}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}};
    
    // Components for each dof
    static unsigned int components[12] = {0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0] - X[i][1] - X[i][2];
    const double w1 = X[i][0];
    const double w2 = X[i][1];
    const double w3 = X[i][2];
    
    // Compute affine mapping x = F(X)
    coordinates[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    coordinates[0] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    coordinates[0] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at coordinates
    f.evaluate(values, coordinates, c);
    
    // Pick component for evaluation
    return values[components[i]];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
    vertex_values[4] = dof_values[4];
    vertex_values[5] = dof_values[5];
    vertex_values[6] = dof_values[6];
    vertex_values[7] = dof_values[7];
    vertex_values[8] = dof_values[8];
    vertex_values[9] = dof_values[9];
    vertex_values[10] = dof_values[10];
    vertex_values[11] = dof_values[11];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 3;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new ElasticityLinearForm_finite_element_0_0();
      break;
    case 1:
      return new ElasticityLinearForm_finite_element_0_1();
      break;
    case 2:
      return new ElasticityLinearForm_finite_element_0_2();
      break;
    }
    return 0;
  }

};

/// This class defines the interface for a finite element.

class ElasticityLinearForm_finite_element_1_2: public ufc::finite_element
{
public:

  /// Constructor
  ElasticityLinearForm_finite_element_1_2() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ElasticityLinearForm_finite_element_1_2()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Lagrange finite element of degree 1 on a tetrahedron";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 4;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Not implemented
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    double values[1];
    double coordinates[3];
    
    // Nodal coordinates on reference cell
    static double X[4][3] = {{0, 0, 0}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}};
    
    // Components for each dof
    static unsigned int components[4] = {0, 0, 0, 0};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0] - X[i][1] - X[i][2];
    const double w1 = X[i][0];
    const double w2 = X[i][1];
    const double w3 = X[i][2];
    
    // Compute affine mapping x = F(X)
    coordinates[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    coordinates[0] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    coordinates[0] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at coordinates
    f.evaluate(values, coordinates, c);
    
    // Pick component for evaluation
    return values[components[i]];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new ElasticityLinearForm_finite_element_1_2();
  }

};

/// This class defines the interface for a finite element.

class ElasticityLinearForm_finite_element_1_1: public ufc::finite_element
{
public:

  /// Constructor
  ElasticityLinearForm_finite_element_1_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ElasticityLinearForm_finite_element_1_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Lagrange finite element of degree 1 on a tetrahedron";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 4;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Not implemented
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    double values[1];
    double coordinates[3];
    
    // Nodal coordinates on reference cell
    static double X[4][3] = {{0, 0, 0}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}};
    
    // Components for each dof
    static unsigned int components[4] = {0, 0, 0, 0};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0] - X[i][1] - X[i][2];
    const double w1 = X[i][0];
    const double w2 = X[i][1];
    const double w3 = X[i][2];
    
    // Compute affine mapping x = F(X)
    coordinates[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    coordinates[0] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    coordinates[0] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at coordinates
    f.evaluate(values, coordinates, c);
    
    // Pick component for evaluation
    return values[components[i]];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new ElasticityLinearForm_finite_element_1_1();
  }

};

/// This class defines the interface for a finite element.

class ElasticityLinearForm_finite_element_1_0: public ufc::finite_element
{
public:

  /// Constructor
  ElasticityLinearForm_finite_element_1_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ElasticityLinearForm_finite_element_1_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Lagrange finite element of degree 1 on a tetrahedron";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 4;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Not implemented
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    double values[1];
    double coordinates[3];
    
    // Nodal coordinates on reference cell
    static double X[4][3] = {{0, 0, 0}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}};
    
    // Components for each dof
    static unsigned int components[4] = {0, 0, 0, 0};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0] - X[i][1] - X[i][2];
    const double w1 = X[i][0];
    const double w2 = X[i][1];
    const double w3 = X[i][2];
    
    // Compute affine mapping x = F(X)
    coordinates[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    coordinates[0] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    coordinates[0] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at coordinates
    f.evaluate(values, coordinates, c);
    
    // Pick component for evaluation
    return values[components[i]];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new ElasticityLinearForm_finite_element_1_0();
  }

};

/// This class defines the interface for a finite element.

class ElasticityLinearForm_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  ElasticityLinearForm_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ElasticityLinearForm_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Mixed finite element: [Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron]";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 12;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 3;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Not implemented
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    double values[3];
    double coordinates[3];
    
    // Nodal coordinates on reference cell
    static double X[12][3] = {{0, 0, 0}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}, {0, 0, 0}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}, {0, 0, 0}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}};
    
    // Components for each dof
    static unsigned int components[12] = {0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0] - X[i][1] - X[i][2];
    const double w1 = X[i][0];
    const double w2 = X[i][1];
    const double w3 = X[i][2];
    
    // Compute affine mapping x = F(X)
    coordinates[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    coordinates[0] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    coordinates[0] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at coordinates
    f.evaluate(values, coordinates, c);
    
    // Pick component for evaluation
    return values[components[i]];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
    vertex_values[4] = dof_values[4];
    vertex_values[5] = dof_values[5];
    vertex_values[6] = dof_values[6];
    vertex_values[7] = dof_values[7];
    vertex_values[8] = dof_values[8];
    vertex_values[9] = dof_values[9];
    vertex_values[10] = dof_values[10];
    vertex_values[11] = dof_values[11];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 3;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new ElasticityLinearForm_finite_element_1_0();
      break;
    case 1:
      return new ElasticityLinearForm_finite_element_1_1();
      break;
    case 2:
      return new ElasticityLinearForm_finite_element_1_2();
      break;
    }
    return 0;
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ElasticityLinearForm_dof_map_0: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  ElasticityLinearForm_dof_map_0() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~ElasticityLinearForm_dof_map_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for Mixed finite element: [Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron]";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return false;
      break;
    case 2:
      return false;
      break;
    case 3:
      return false;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = 3*m.num_entities[0];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 12;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 9;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
    unsigned int offset = m.num_entities[0];
    dofs[4] = offset + c.entity_indices[0][0];
    dofs[5] = offset + c.entity_indices[0][1];
    dofs[6] = offset + c.entity_indices[0][2];
    dofs[7] = offset + c.entity_indices[0][3];
    offset = offset + m.num_entities[0];
    dofs[8] = offset + c.entity_indices[0][0];
    dofs[9] = offset + c.entity_indices[0][1];
    dofs[10] = offset + c.entity_indices[0][2];
    dofs[11] = offset + c.entity_indices[0][3];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   const ufc::mesh& m,
                                   const ufc::cell& c,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 9;
      dofs[7] = 10;
      dofs[8] = 11;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 10;
      dofs[8] = 11;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 11;
      break;
    case 3:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 10;
      break;
    }
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double **coordinates,
                                    const ufc::mesh& m,
                                    const ufc::cell& c) const
  {
    // Not implemented
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    // Not implemented
    return 0;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    // Not implemented
    return 0;
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ElasticityLinearForm_dof_map_1: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  ElasticityLinearForm_dof_map_1() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~ElasticityLinearForm_dof_map_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for Mixed finite element: [Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron, Lagrange finite element of degree 1 on a tetrahedron]";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return false;
      break;
    case 2:
      return false;
      break;
    case 3:
      return false;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = 3*m.num_entities[0];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 12;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 9;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
    unsigned int offset = m.num_entities[0];
    dofs[4] = offset + c.entity_indices[0][0];
    dofs[5] = offset + c.entity_indices[0][1];
    dofs[6] = offset + c.entity_indices[0][2];
    dofs[7] = offset + c.entity_indices[0][3];
    offset = offset + m.num_entities[0];
    dofs[8] = offset + c.entity_indices[0][0];
    dofs[9] = offset + c.entity_indices[0][1];
    dofs[10] = offset + c.entity_indices[0][2];
    dofs[11] = offset + c.entity_indices[0][3];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   const ufc::mesh& m,
                                   const ufc::cell& c,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 9;
      dofs[7] = 10;
      dofs[8] = 11;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 10;
      dofs[8] = 11;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 11;
      break;
    case 3:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 10;
      break;
    }
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double **coordinates,
                                    const ufc::mesh& m,
                                    const ufc::cell& c) const
  {
    // Not implemented
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    // Not implemented
    return 0;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    // Not implemented
    return 0;
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class ElasticityLinearForm_cell_integral_0: public ufc::cell_integral
{
public:

  /// Constructor
  ElasticityLinearForm_cell_integral_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ElasticityLinearForm_cell_integral_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
      
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    // const double d01 = J_12*J_20 - J_10*J_22;
    // const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    // const double d11 = J_00*J_22 - J_02*J_20;
    // const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    // const double d21 = J_02*J_10 - J_00*J_12;
    // const double d22 = J_00*J_11 - J_01*J_10;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
      
    // Compute inverse of Jacobian
    // const double Jinv_00 = d00 / detJ;
    // const double Jinv_01 = d10 / detJ;
    // const double Jinv_02 = d20 / detJ;
    // const double Jinv_10 = d01 / detJ;
    // const double Jinv_11 = d11 / detJ;
    // const double Jinv_12 = d21 / detJ;
    // const double Jinv_20 = d02 / detJ;
    // const double Jinv_21 = d12 / detJ;
    // const double Jinv_22 = d22 / detJ;
    
    // Take absolute value of determinant
    detJ = std::abs(detJ);
    
    // Set scale factor
    const double det = detJ;
    
    // Compute geometry tensors
    const double G0_0 = det*w[0][0];
    const double G0_1 = det*w[0][1];
    const double G0_2 = det*w[0][2];
    const double G0_3 = det*w[0][3];
    const double G0_4 = det*w[0][4];
    const double G0_5 = det*w[0][5];
    const double G0_6 = det*w[0][6];
    const double G0_7 = det*w[0][7];
    const double G0_8 = det*w[0][8];
    const double G0_9 = det*w[0][9];
    const double G0_10 = det*w[0][10];
    const double G0_11 = det*w[0][11];
    
    // Compute element tensor
    A[0] = 0.01666666666667*G0_0 + 0.008333333333333*G0_1 + 0.008333333333333*G0_2 + 0.008333333333333*G0_3;
    A[1] = 0.008333333333333*G0_0 + 0.01666666666667*G0_1 + 0.008333333333333*G0_2 + 0.008333333333333*G0_3;
    A[2] = 0.008333333333333*G0_0 + 0.008333333333333*G0_1 + 0.01666666666667*G0_2 + 0.008333333333333*G0_3;
    A[3] = 0.008333333333333*G0_0 + 0.008333333333333*G0_1 + 0.008333333333333*G0_2 + 0.01666666666667*G0_3;
    A[4] = 0.01666666666667*G0_4 + 0.008333333333333*G0_5 + 0.008333333333333*G0_6 + 0.008333333333333*G0_7;
    A[5] = 0.008333333333333*G0_4 + 0.01666666666667*G0_5 + 0.008333333333333*G0_6 + 0.008333333333333*G0_7;
    A[6] = 0.008333333333333*G0_4 + 0.008333333333333*G0_5 + 0.01666666666667*G0_6 + 0.008333333333333*G0_7;
    A[7] = 0.008333333333333*G0_4 + 0.008333333333333*G0_5 + 0.008333333333333*G0_6 + 0.01666666666667*G0_7;
    A[8] = 0.01666666666667*G0_8 + 0.008333333333333*G0_9 + 0.008333333333333*G0_10 + 0.008333333333333*G0_11;
    A[9] = 0.008333333333333*G0_8 + 0.01666666666667*G0_9 + 0.008333333333333*G0_10 + 0.008333333333333*G0_11;
    A[10] = 0.008333333333333*G0_8 + 0.008333333333333*G0_9 + 0.01666666666667*G0_10 + 0.008333333333333*G0_11;
    A[11] = 0.008333333333333*G0_8 + 0.008333333333333*G0_9 + 0.008333333333333*G0_10 + 0.01666666666667*G0_11;
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class ElasticityLinearForm: public ufc::form
{
public:

  /// Constructor
  ElasticityLinearForm() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ElasticityLinearForm()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "|det F'|w0_a0 | vi0[b0]*va0[b0]*dX(0)";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 1;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 1;
  }

  /// Return the number of cell integrals
  virtual unsigned int num_cell_integrals() const
  {
    return 1;
  }
  
  /// Return the number of exterior facet integrals
  virtual unsigned int num_exterior_facet_integrals() const
  {
    return 0;
  }
  
  /// Return the number of interior facet integrals
  virtual unsigned int num_interior_facet_integrals() const
  {
    return 0;
  }
    
  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new ElasticityLinearForm_finite_element_0();
      break;
    case 1:
      return new ElasticityLinearForm_finite_element_1();
      break;
    }
    return 0;
  }
  
  /// Create a new dof map for argument function i
  virtual ufc::dof_map* create_dof_map(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new ElasticityLinearForm_dof_map_0();
      break;
    case 1:
      return new ElasticityLinearForm_dof_map_1();
      break;
    }
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    return new ElasticityLinearForm_cell_integral_0();
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

#endif
