// Automatically generated by FFC, the FEniCS Form Compiler, version 0.3.4.
// For further information, go to http://www/fenics.org/ffc/.
// Licensed under the GNU GPL Version 2.

#ifndef __STOKES_H
#define __STOKES_H

#include <dolfin/Mesh.h>
#include <dolfin/Cell.h>
#include <dolfin/Point.h>
#include <dolfin/AffineMap.h>
#include <dolfin/FiniteElement.h>
#include <dolfin/FiniteElementSpec.h>
#include <dolfin/BilinearForm.h>
#include <dolfin/LinearForm.h>
#include <dolfin/Functional.h>
#include <dolfin/FEM.h>

namespace dolfin { namespace Stokes {

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class BilinearForm : public dolfin::BilinearForm
{
public:

  class TestElement;

  class TrialElement;

  class FunctionElement_0;

  BilinearForm(Function& w0);
  

  bool interior_contribution() const;

  void eval(real block[], const AffineMap& map) const;

  bool boundary_contribution() const;

  void eval(real block[], const AffineMap& map, unsigned int facet) const;

};

class BilinearForm::TestElement : public dolfin::FiniteElement
{
public:

  TestElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 3;

    subelements = new FiniteElement* [2];
    subelements[0] = new SubElement_0();
    subelements[1] = new SubElement_1();
  }

  ~TestElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 9;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 2;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(0)[0];
    nodes[4] = offset + cell.entities(0)[1];
    nodes[5] = offset + cell.entities(0)[2];
    offset = offset + mesh.topology().size(0);
    nodes[6] = offset + cell.entities(0)[0];
    nodes[7] = offset + cell.entities(0)[1];
    nodes[8] = offset + cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[4] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 1;
    components[4] = 1;
    components[5] = 1;
    points[6] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[7] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[8] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[6] = 2;
    components[7] = 2;
    components[8] = 2;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
    offset = offset + mesh.topology().size(0);
    vertex_nodes[2] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *subelements[i];
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *subelements[i];
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("mixed");
    return s;
  }
  
private:

class SubElement_0 : public dolfin::FiniteElement
{
public:

  SubElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 2;

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 6;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(0)[0];
    nodes[4] = offset + cell.entities(0)[1];
    nodes[5] = offset + cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[4] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 1;
    components[4] = 1;
    components[5] = 1;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "triangle", 1, 2);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class SubElement_1 : public dolfin::FiniteElement
{
public:

  SubElement_1() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_1()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 3;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class BilinearForm::TrialElement : public dolfin::FiniteElement
{
public:

  TrialElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 3;

    subelements = new FiniteElement* [2];
    subelements[0] = new SubElement_0();
    subelements[1] = new SubElement_1();
  }

  ~TrialElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 9;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 2;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(0)[0];
    nodes[4] = offset + cell.entities(0)[1];
    nodes[5] = offset + cell.entities(0)[2];
    offset = offset + mesh.topology().size(0);
    nodes[6] = offset + cell.entities(0)[0];
    nodes[7] = offset + cell.entities(0)[1];
    nodes[8] = offset + cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[4] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 1;
    components[4] = 1;
    components[5] = 1;
    points[6] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[7] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[8] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[6] = 2;
    components[7] = 2;
    components[8] = 2;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
    offset = offset + mesh.topology().size(0);
    vertex_nodes[2] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *subelements[i];
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *subelements[i];
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("mixed");
    return s;
  }
  
private:

class SubElement_0 : public dolfin::FiniteElement
{
public:

  SubElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 2;

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 6;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(0)[0];
    nodes[4] = offset + cell.entities(0)[1];
    nodes[5] = offset + cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[4] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 1;
    components[4] = 1;
    components[5] = 1;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "triangle", 1, 2);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class SubElement_1 : public dolfin::FiniteElement
{
public:

  SubElement_1() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_1()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 3;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class BilinearForm::FunctionElement_0 : public dolfin::FiniteElement
{
public:

  FunctionElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 3;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

BilinearForm::BilinearForm(Function& w0) : dolfin::BilinearForm(1)
{
  // Create finite element for test space
  _test = new TestElement();

  // Create finite element for trial space
  _trial = new TrialElement();

  // Add functions
  initFunction(0, w0, new FunctionElement_0());
}

// Contribution from the interior
bool BilinearForm::interior_contribution() const { return true; }

void BilinearForm::eval(real block[], const AffineMap& map) const
{
  // Compute coefficients
  const real c0_0 = c[0][0];
  const real c0_1 = c[0][1];
  const real c0_2 = c[0][2];

  // Compute geometry tensors
  const real G0_0_0 = map.det*map.g00*map.g00 + map.det*map.g01*map.g01;
  const real G0_0_1 = map.det*map.g00*map.g10 + map.det*map.g01*map.g11;
  const real G0_1_0 = map.det*map.g10*map.g00 + map.det*map.g11*map.g01;
  const real G0_1_1 = map.det*map.g10*map.g10 + map.det*map.g11*map.g11;
  const real G1_0_0 = map.det*map.g00*map.g00 + map.det*map.g01*map.g01;
  const real G1_0_1 = map.det*map.g00*map.g10 + map.det*map.g01*map.g11;
  const real G1_1_0 = map.det*map.g10*map.g00 + map.det*map.g11*map.g01;
  const real G1_1_1 = map.det*map.g10*map.g10 + map.det*map.g11*map.g11;
  const real G2_0 = map.det*map.g00;
  const real G2_1 = map.det*map.g10;
  const real G3_0 = map.det*map.g01;
  const real G3_1 = map.det*map.g11;
  const real G4_0 = map.det*map.g00;
  const real G4_1 = map.det*map.g10;
  const real G5_0 = map.det*map.g01;
  const real G5_1 = map.det*map.g11;
  const real G6_0_0_0_0 = map.det*c0_0*c0_0*map.g00*map.g00 + map.det*c0_0*c0_0*map.g01*map.g01;
  const real G6_0_0_0_1 = map.det*c0_0*c0_0*map.g00*map.g10 + map.det*c0_0*c0_0*map.g01*map.g11;
  const real G6_0_0_1_0 = map.det*c0_0*c0_0*map.g10*map.g00 + map.det*c0_0*c0_0*map.g11*map.g01;
  const real G6_0_0_1_1 = map.det*c0_0*c0_0*map.g10*map.g10 + map.det*c0_0*c0_0*map.g11*map.g11;
  const real G6_0_1_0_0 = map.det*c0_0*c0_1*map.g00*map.g00 + map.det*c0_0*c0_1*map.g01*map.g01;
  const real G6_0_1_0_1 = map.det*c0_0*c0_1*map.g00*map.g10 + map.det*c0_0*c0_1*map.g01*map.g11;
  const real G6_0_1_1_0 = map.det*c0_0*c0_1*map.g10*map.g00 + map.det*c0_0*c0_1*map.g11*map.g01;
  const real G6_0_1_1_1 = map.det*c0_0*c0_1*map.g10*map.g10 + map.det*c0_0*c0_1*map.g11*map.g11;
  const real G6_0_2_0_0 = map.det*c0_0*c0_2*map.g00*map.g00 + map.det*c0_0*c0_2*map.g01*map.g01;
  const real G6_0_2_0_1 = map.det*c0_0*c0_2*map.g00*map.g10 + map.det*c0_0*c0_2*map.g01*map.g11;
  const real G6_0_2_1_0 = map.det*c0_0*c0_2*map.g10*map.g00 + map.det*c0_0*c0_2*map.g11*map.g01;
  const real G6_0_2_1_1 = map.det*c0_0*c0_2*map.g10*map.g10 + map.det*c0_0*c0_2*map.g11*map.g11;
  const real G6_1_0_0_0 = map.det*c0_1*c0_0*map.g00*map.g00 + map.det*c0_1*c0_0*map.g01*map.g01;
  const real G6_1_0_0_1 = map.det*c0_1*c0_0*map.g00*map.g10 + map.det*c0_1*c0_0*map.g01*map.g11;
  const real G6_1_0_1_0 = map.det*c0_1*c0_0*map.g10*map.g00 + map.det*c0_1*c0_0*map.g11*map.g01;
  const real G6_1_0_1_1 = map.det*c0_1*c0_0*map.g10*map.g10 + map.det*c0_1*c0_0*map.g11*map.g11;
  const real G6_1_1_0_0 = map.det*c0_1*c0_1*map.g00*map.g00 + map.det*c0_1*c0_1*map.g01*map.g01;
  const real G6_1_1_0_1 = map.det*c0_1*c0_1*map.g00*map.g10 + map.det*c0_1*c0_1*map.g01*map.g11;
  const real G6_1_1_1_0 = map.det*c0_1*c0_1*map.g10*map.g00 + map.det*c0_1*c0_1*map.g11*map.g01;
  const real G6_1_1_1_1 = map.det*c0_1*c0_1*map.g10*map.g10 + map.det*c0_1*c0_1*map.g11*map.g11;
  const real G6_1_2_0_0 = map.det*c0_1*c0_2*map.g00*map.g00 + map.det*c0_1*c0_2*map.g01*map.g01;
  const real G6_1_2_0_1 = map.det*c0_1*c0_2*map.g00*map.g10 + map.det*c0_1*c0_2*map.g01*map.g11;
  const real G6_1_2_1_0 = map.det*c0_1*c0_2*map.g10*map.g00 + map.det*c0_1*c0_2*map.g11*map.g01;
  const real G6_1_2_1_1 = map.det*c0_1*c0_2*map.g10*map.g10 + map.det*c0_1*c0_2*map.g11*map.g11;
  const real G6_2_0_0_0 = map.det*c0_2*c0_0*map.g00*map.g00 + map.det*c0_2*c0_0*map.g01*map.g01;
  const real G6_2_0_0_1 = map.det*c0_2*c0_0*map.g00*map.g10 + map.det*c0_2*c0_0*map.g01*map.g11;
  const real G6_2_0_1_0 = map.det*c0_2*c0_0*map.g10*map.g00 + map.det*c0_2*c0_0*map.g11*map.g01;
  const real G6_2_0_1_1 = map.det*c0_2*c0_0*map.g10*map.g10 + map.det*c0_2*c0_0*map.g11*map.g11;
  const real G6_2_1_0_0 = map.det*c0_2*c0_1*map.g00*map.g00 + map.det*c0_2*c0_1*map.g01*map.g01;
  const real G6_2_1_0_1 = map.det*c0_2*c0_1*map.g00*map.g10 + map.det*c0_2*c0_1*map.g01*map.g11;
  const real G6_2_1_1_0 = map.det*c0_2*c0_1*map.g10*map.g00 + map.det*c0_2*c0_1*map.g11*map.g01;
  const real G6_2_1_1_1 = map.det*c0_2*c0_1*map.g10*map.g10 + map.det*c0_2*c0_1*map.g11*map.g11;
  const real G6_2_2_0_0 = map.det*c0_2*c0_2*map.g00*map.g00 + map.det*c0_2*c0_2*map.g01*map.g01;
  const real G6_2_2_0_1 = map.det*c0_2*c0_2*map.g00*map.g10 + map.det*c0_2*c0_2*map.g01*map.g11;
  const real G6_2_2_1_0 = map.det*c0_2*c0_2*map.g10*map.g00 + map.det*c0_2*c0_2*map.g11*map.g01;
  const real G6_2_2_1_1 = map.det*c0_2*c0_2*map.g10*map.g10 + map.det*c0_2*c0_2*map.g11*map.g11;

  // Compute element tensor
  block[0] = 4.999999999999998e-01*G0_0_0 + 4.999999999999997e-01*G0_0_1 + 4.999999999999997e-01*G0_1_0 + 4.999999999999996e-01*G0_1_1;
  block[1] = -4.999999999999998e-01*G0_0_0 - 4.999999999999997e-01*G0_1_0;
  block[2] = -4.999999999999997e-01*G0_0_1 - 4.999999999999996e-01*G0_1_1;
  block[3] = 0.000000000000000e+00;
  block[4] = 0.000000000000000e+00;
  block[5] = 0.000000000000000e+00;
  block[6] = 1.666666666666665e-01*G2_0 + 1.666666666666665e-01*G2_1;
  block[7] = 1.666666666666666e-01*G2_0 + 1.666666666666665e-01*G2_1;
  block[8] = 1.666666666666665e-01*G2_0 + 1.666666666666665e-01*G2_1;
  block[9] = -4.999999999999998e-01*G0_0_0 - 4.999999999999997e-01*G0_0_1;
  block[10] = 4.999999999999998e-01*G0_0_0;
  block[11] = 4.999999999999997e-01*G0_0_1;
  block[12] = 0.000000000000000e+00;
  block[13] = 0.000000000000000e+00;
  block[14] = 0.000000000000000e+00;
  block[15] = -1.666666666666665e-01*G2_0;
  block[16] = -1.666666666666666e-01*G2_0;
  block[17] = -1.666666666666665e-01*G2_0;
  block[18] = -4.999999999999997e-01*G0_1_0 - 4.999999999999996e-01*G0_1_1;
  block[19] = 4.999999999999997e-01*G0_1_0;
  block[20] = 4.999999999999996e-01*G0_1_1;
  block[21] = 0.000000000000000e+00;
  block[22] = 0.000000000000000e+00;
  block[23] = 0.000000000000000e+00;
  block[24] = -1.666666666666665e-01*G2_1;
  block[25] = -1.666666666666665e-01*G2_1;
  block[26] = -1.666666666666665e-01*G2_1;
  block[27] = 0.000000000000000e+00;
  block[28] = 0.000000000000000e+00;
  block[29] = 0.000000000000000e+00;
  block[30] = 4.999999999999998e-01*G1_0_0 + 4.999999999999997e-01*G1_0_1 + 4.999999999999997e-01*G1_1_0 + 4.999999999999996e-01*G1_1_1;
  block[31] = -4.999999999999998e-01*G1_0_0 - 4.999999999999997e-01*G1_1_0;
  block[32] = -4.999999999999997e-01*G1_0_1 - 4.999999999999996e-01*G1_1_1;
  block[33] = 1.666666666666665e-01*G3_0 + 1.666666666666665e-01*G3_1;
  block[34] = 1.666666666666666e-01*G3_0 + 1.666666666666665e-01*G3_1;
  block[35] = 1.666666666666665e-01*G3_0 + 1.666666666666665e-01*G3_1;
  block[36] = 0.000000000000000e+00;
  block[37] = 0.000000000000000e+00;
  block[38] = 0.000000000000000e+00;
  block[39] = -4.999999999999998e-01*G1_0_0 - 4.999999999999997e-01*G1_0_1;
  block[40] = 4.999999999999998e-01*G1_0_0;
  block[41] = 4.999999999999997e-01*G1_0_1;
  block[42] = -1.666666666666665e-01*G3_0;
  block[43] = -1.666666666666666e-01*G3_0;
  block[44] = -1.666666666666665e-01*G3_0;
  block[45] = 0.000000000000000e+00;
  block[46] = 0.000000000000000e+00;
  block[47] = 0.000000000000000e+00;
  block[48] = -4.999999999999997e-01*G1_1_0 - 4.999999999999996e-01*G1_1_1;
  block[49] = 4.999999999999997e-01*G1_1_0;
  block[50] = 4.999999999999996e-01*G1_1_1;
  block[51] = -1.666666666666665e-01*G3_1;
  block[52] = -1.666666666666665e-01*G3_1;
  block[53] = -1.666666666666665e-01*G3_1;
  block[54] = -1.666666666666665e-01*G4_0 - 1.666666666666665e-01*G4_1;
  block[55] = 1.666666666666665e-01*G4_0;
  block[56] = 1.666666666666665e-01*G4_1;
  block[57] = -1.666666666666665e-01*G5_0 - 1.666666666666665e-01*G5_1;
  block[58] = 1.666666666666665e-01*G5_0;
  block[59] = 1.666666666666665e-01*G5_1;
  block[60] = 1.666666666666664e-02*G6_0_0_0_0 + 1.666666666666664e-02*G6_0_0_0_1 + 1.666666666666664e-02*G6_0_0_1_0 + 1.666666666666664e-02*G6_0_0_1_1 + 8.333333333333321e-03*G6_0_1_0_0 + 8.333333333333319e-03*G6_0_1_0_1 + 8.333333333333319e-03*G6_0_1_1_0 + 8.333333333333318e-03*G6_0_1_1_1 + 8.333333333333321e-03*G6_0_2_0_0 + 8.333333333333319e-03*G6_0_2_0_1 + 8.333333333333319e-03*G6_0_2_1_0 + 8.333333333333318e-03*G6_0_2_1_1 + 8.333333333333321e-03*G6_1_0_0_0 + 8.333333333333318e-03*G6_1_0_0_1 + 8.333333333333318e-03*G6_1_0_1_0 + 8.333333333333316e-03*G6_1_0_1_1 + 1.666666666666664e-02*G6_1_1_0_0 + 1.666666666666664e-02*G6_1_1_0_1 + 1.666666666666664e-02*G6_1_1_1_0 + 1.666666666666664e-02*G6_1_1_1_1 + 8.333333333333323e-03*G6_1_2_0_0 + 8.333333333333321e-03*G6_1_2_0_1 + 8.333333333333321e-03*G6_1_2_1_0 + 8.333333333333318e-03*G6_1_2_1_1 + 8.333333333333321e-03*G6_2_0_0_0 + 8.333333333333319e-03*G6_2_0_0_1 + 8.333333333333319e-03*G6_2_0_1_0 + 8.333333333333318e-03*G6_2_0_1_1 + 8.333333333333323e-03*G6_2_1_0_0 + 8.333333333333321e-03*G6_2_1_0_1 + 8.333333333333321e-03*G6_2_1_1_0 + 8.333333333333318e-03*G6_2_1_1_1 + 1.666666666666664e-02*G6_2_2_0_0 + 1.666666666666664e-02*G6_2_2_0_1 + 1.666666666666664e-02*G6_2_2_1_0 + 1.666666666666664e-02*G6_2_2_1_1;
  block[61] = -1.666666666666664e-02*G6_0_0_0_0 - 1.666666666666664e-02*G6_0_0_1_0 - 8.333333333333321e-03*G6_0_1_0_0 - 8.333333333333319e-03*G6_0_1_1_0 - 8.333333333333321e-03*G6_0_2_0_0 - 8.333333333333319e-03*G6_0_2_1_0 - 8.333333333333321e-03*G6_1_0_0_0 - 8.333333333333318e-03*G6_1_0_1_0 - 1.666666666666664e-02*G6_1_1_0_0 - 1.666666666666664e-02*G6_1_1_1_0 - 8.333333333333323e-03*G6_1_2_0_0 - 8.333333333333321e-03*G6_1_2_1_0 - 8.333333333333321e-03*G6_2_0_0_0 - 8.333333333333319e-03*G6_2_0_1_0 - 8.333333333333323e-03*G6_2_1_0_0 - 8.333333333333321e-03*G6_2_1_1_0 - 1.666666666666664e-02*G6_2_2_0_0 - 1.666666666666664e-02*G6_2_2_1_0;
  block[62] = -1.666666666666664e-02*G6_0_0_0_1 - 1.666666666666664e-02*G6_0_0_1_1 - 8.333333333333319e-03*G6_0_1_0_1 - 8.333333333333318e-03*G6_0_1_1_1 - 8.333333333333319e-03*G6_0_2_0_1 - 8.333333333333318e-03*G6_0_2_1_1 - 8.333333333333318e-03*G6_1_0_0_1 - 8.333333333333316e-03*G6_1_0_1_1 - 1.666666666666664e-02*G6_1_1_0_1 - 1.666666666666664e-02*G6_1_1_1_1 - 8.333333333333321e-03*G6_1_2_0_1 - 8.333333333333318e-03*G6_1_2_1_1 - 8.333333333333319e-03*G6_2_0_0_1 - 8.333333333333318e-03*G6_2_0_1_1 - 8.333333333333321e-03*G6_2_1_0_1 - 8.333333333333318e-03*G6_2_1_1_1 - 1.666666666666664e-02*G6_2_2_0_1 - 1.666666666666664e-02*G6_2_2_1_1;
  block[63] = -1.666666666666666e-01*G4_0 - 1.666666666666665e-01*G4_1;
  block[64] = 1.666666666666666e-01*G4_0;
  block[65] = 1.666666666666665e-01*G4_1;
  block[66] = -1.666666666666666e-01*G5_0 - 1.666666666666665e-01*G5_1;
  block[67] = 1.666666666666666e-01*G5_0;
  block[68] = 1.666666666666665e-01*G5_1;
  block[69] = -1.666666666666664e-02*G6_0_0_0_0 - 1.666666666666664e-02*G6_0_0_0_1 - 8.333333333333321e-03*G6_0_1_0_0 - 8.333333333333319e-03*G6_0_1_0_1 - 8.333333333333321e-03*G6_0_2_0_0 - 8.333333333333319e-03*G6_0_2_0_1 - 8.333333333333321e-03*G6_1_0_0_0 - 8.333333333333318e-03*G6_1_0_0_1 - 1.666666666666664e-02*G6_1_1_0_0 - 1.666666666666664e-02*G6_1_1_0_1 - 8.333333333333323e-03*G6_1_2_0_0 - 8.333333333333321e-03*G6_1_2_0_1 - 8.333333333333321e-03*G6_2_0_0_0 - 8.333333333333319e-03*G6_2_0_0_1 - 8.333333333333323e-03*G6_2_1_0_0 - 8.333333333333321e-03*G6_2_1_0_1 - 1.666666666666664e-02*G6_2_2_0_0 - 1.666666666666664e-02*G6_2_2_0_1;
  block[70] = 1.666666666666664e-02*G6_0_0_0_0 + 8.333333333333321e-03*G6_0_1_0_0 + 8.333333333333321e-03*G6_0_2_0_0 + 8.333333333333321e-03*G6_1_0_0_0 + 1.666666666666664e-02*G6_1_1_0_0 + 8.333333333333323e-03*G6_1_2_0_0 + 8.333333333333321e-03*G6_2_0_0_0 + 8.333333333333323e-03*G6_2_1_0_0 + 1.666666666666664e-02*G6_2_2_0_0;
  block[71] = 1.666666666666664e-02*G6_0_0_0_1 + 8.333333333333319e-03*G6_0_1_0_1 + 8.333333333333319e-03*G6_0_2_0_1 + 8.333333333333318e-03*G6_1_0_0_1 + 1.666666666666664e-02*G6_1_1_0_1 + 8.333333333333321e-03*G6_1_2_0_1 + 8.333333333333319e-03*G6_2_0_0_1 + 8.333333333333321e-03*G6_2_1_0_1 + 1.666666666666664e-02*G6_2_2_0_1;
  block[72] = -1.666666666666665e-01*G4_0 - 1.666666666666665e-01*G4_1;
  block[73] = 1.666666666666665e-01*G4_0;
  block[74] = 1.666666666666665e-01*G4_1;
  block[75] = -1.666666666666665e-01*G5_0 - 1.666666666666665e-01*G5_1;
  block[76] = 1.666666666666665e-01*G5_0;
  block[77] = 1.666666666666665e-01*G5_1;
  block[78] = -1.666666666666664e-02*G6_0_0_1_0 - 1.666666666666664e-02*G6_0_0_1_1 - 8.333333333333319e-03*G6_0_1_1_0 - 8.333333333333318e-03*G6_0_1_1_1 - 8.333333333333319e-03*G6_0_2_1_0 - 8.333333333333318e-03*G6_0_2_1_1 - 8.333333333333318e-03*G6_1_0_1_0 - 8.333333333333316e-03*G6_1_0_1_1 - 1.666666666666664e-02*G6_1_1_1_0 - 1.666666666666664e-02*G6_1_1_1_1 - 8.333333333333321e-03*G6_1_2_1_0 - 8.333333333333318e-03*G6_1_2_1_1 - 8.333333333333319e-03*G6_2_0_1_0 - 8.333333333333318e-03*G6_2_0_1_1 - 8.333333333333321e-03*G6_2_1_1_0 - 8.333333333333318e-03*G6_2_1_1_1 - 1.666666666666664e-02*G6_2_2_1_0 - 1.666666666666664e-02*G6_2_2_1_1;
  block[79] = 1.666666666666664e-02*G6_0_0_1_0 + 8.333333333333319e-03*G6_0_1_1_0 + 8.333333333333319e-03*G6_0_2_1_0 + 8.333333333333318e-03*G6_1_0_1_0 + 1.666666666666664e-02*G6_1_1_1_0 + 8.333333333333321e-03*G6_1_2_1_0 + 8.333333333333319e-03*G6_2_0_1_0 + 8.333333333333321e-03*G6_2_1_1_0 + 1.666666666666664e-02*G6_2_2_1_0;
  block[80] = 1.666666666666664e-02*G6_0_0_1_1 + 8.333333333333318e-03*G6_0_1_1_1 + 8.333333333333318e-03*G6_0_2_1_1 + 8.333333333333316e-03*G6_1_0_1_1 + 1.666666666666664e-02*G6_1_1_1_1 + 8.333333333333318e-03*G6_1_2_1_1 + 8.333333333333318e-03*G6_2_0_1_1 + 8.333333333333318e-03*G6_2_1_1_1 + 1.666666666666664e-02*G6_2_2_1_1;
}

// No contribution from the boundary
bool BilinearForm::boundary_contribution() const { return false; }

void BilinearForm::eval(real block[], const AffineMap& map, unsigned int facet) const {}

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class LinearForm : public dolfin::LinearForm
{
public:

  class TestElement;

  class FunctionElement_0;

  class FunctionElement_1;

  LinearForm(Function& w0, Function& w1);
  

  bool interior_contribution() const;

  void eval(real block[], const AffineMap& map) const;

  bool boundary_contribution() const;

  void eval(real block[], const AffineMap& map, unsigned int facet) const;

};

class LinearForm::TestElement : public dolfin::FiniteElement
{
public:

  TestElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 3;

    subelements = new FiniteElement* [2];
    subelements[0] = new SubElement_0();
    subelements[1] = new SubElement_1();
  }

  ~TestElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 9;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 2;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(0)[0];
    nodes[4] = offset + cell.entities(0)[1];
    nodes[5] = offset + cell.entities(0)[2];
    offset = offset + mesh.topology().size(0);
    nodes[6] = offset + cell.entities(0)[0];
    nodes[7] = offset + cell.entities(0)[1];
    nodes[8] = offset + cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[4] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 1;
    components[4] = 1;
    components[5] = 1;
    points[6] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[7] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[8] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[6] = 2;
    components[7] = 2;
    components[8] = 2;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
    offset = offset + mesh.topology().size(0);
    vertex_nodes[2] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *subelements[i];
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *subelements[i];
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("mixed");
    return s;
  }
  
private:

class SubElement_0 : public dolfin::FiniteElement
{
public:

  SubElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 2;

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 6;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(0)[0];
    nodes[4] = offset + cell.entities(0)[1];
    nodes[5] = offset + cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[4] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 1;
    components[4] = 1;
    components[5] = 1;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "triangle", 1, 2);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class SubElement_1 : public dolfin::FiniteElement
{
public:

  SubElement_1() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_1()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 3;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class LinearForm::FunctionElement_0 : public dolfin::FiniteElement
{
public:

  FunctionElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 2;

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 6;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(0)[0];
    nodes[4] = offset + cell.entities(0)[1];
    nodes[5] = offset + cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[4] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 1;
    components[4] = 1;
    components[5] = 1;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "triangle", 1, 2);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class LinearForm::FunctionElement_1 : public dolfin::FiniteElement
{
public:

  FunctionElement_1() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_1()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 3;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

LinearForm::LinearForm(Function& w0, Function& w1) : dolfin::LinearForm(2)
{
  // Create finite element for test space
  _test = new TestElement();

  // Add functions
  initFunction(0, w0, new FunctionElement_0());
  initFunction(1, w1, new FunctionElement_1());
}

// Contribution from the interior
bool LinearForm::interior_contribution() const { return true; }

void LinearForm::eval(real block[], const AffineMap& map) const
{
  // Compute coefficients
  const real c0_0 = c[0][0];
  const real c0_1 = c[0][1];
  const real c0_2 = c[0][2];
  const real c0_3 = c[0][3];
  const real c0_4 = c[0][4];
  const real c0_5 = c[0][5];
  const real c1_0 = c[1][0];
  const real c1_1 = c[1][1];
  const real c1_2 = c[1][2];

  // Compute geometry tensors
  const real G0_0 = map.det*c0_0;
  const real G0_1 = map.det*c0_1;
  const real G0_2 = map.det*c0_2;
  const real G1_0_0_0_0 = map.det*c1_0*c1_0*c0_0*map.g00;
  const real G1_0_0_0_1 = map.det*c1_0*c1_0*c0_1*map.g00;
  const real G1_0_0_0_2 = map.det*c1_0*c1_0*c0_2*map.g00;
  const real G1_0_0_1_0 = map.det*c1_0*c1_0*c0_0*map.g10;
  const real G1_0_0_1_1 = map.det*c1_0*c1_0*c0_1*map.g10;
  const real G1_0_0_1_2 = map.det*c1_0*c1_0*c0_2*map.g10;
  const real G1_0_1_0_0 = map.det*c1_0*c1_1*c0_0*map.g00;
  const real G1_0_1_0_1 = map.det*c1_0*c1_1*c0_1*map.g00;
  const real G1_0_1_0_2 = map.det*c1_0*c1_1*c0_2*map.g00;
  const real G1_0_1_1_0 = map.det*c1_0*c1_1*c0_0*map.g10;
  const real G1_0_1_1_1 = map.det*c1_0*c1_1*c0_1*map.g10;
  const real G1_0_1_1_2 = map.det*c1_0*c1_1*c0_2*map.g10;
  const real G1_0_2_0_0 = map.det*c1_0*c1_2*c0_0*map.g00;
  const real G1_0_2_0_1 = map.det*c1_0*c1_2*c0_1*map.g00;
  const real G1_0_2_0_2 = map.det*c1_0*c1_2*c0_2*map.g00;
  const real G1_0_2_1_0 = map.det*c1_0*c1_2*c0_0*map.g10;
  const real G1_0_2_1_1 = map.det*c1_0*c1_2*c0_1*map.g10;
  const real G1_0_2_1_2 = map.det*c1_0*c1_2*c0_2*map.g10;
  const real G1_1_0_0_0 = map.det*c1_1*c1_0*c0_0*map.g00;
  const real G1_1_0_0_1 = map.det*c1_1*c1_0*c0_1*map.g00;
  const real G1_1_0_0_2 = map.det*c1_1*c1_0*c0_2*map.g00;
  const real G1_1_0_1_0 = map.det*c1_1*c1_0*c0_0*map.g10;
  const real G1_1_0_1_1 = map.det*c1_1*c1_0*c0_1*map.g10;
  const real G1_1_0_1_2 = map.det*c1_1*c1_0*c0_2*map.g10;
  const real G1_1_1_0_0 = map.det*c1_1*c1_1*c0_0*map.g00;
  const real G1_1_1_0_1 = map.det*c1_1*c1_1*c0_1*map.g00;
  const real G1_1_1_0_2 = map.det*c1_1*c1_1*c0_2*map.g00;
  const real G1_1_1_1_0 = map.det*c1_1*c1_1*c0_0*map.g10;
  const real G1_1_1_1_1 = map.det*c1_1*c1_1*c0_1*map.g10;
  const real G1_1_1_1_2 = map.det*c1_1*c1_1*c0_2*map.g10;
  const real G1_1_2_0_0 = map.det*c1_1*c1_2*c0_0*map.g00;
  const real G1_1_2_0_1 = map.det*c1_1*c1_2*c0_1*map.g00;
  const real G1_1_2_0_2 = map.det*c1_1*c1_2*c0_2*map.g00;
  const real G1_1_2_1_0 = map.det*c1_1*c1_2*c0_0*map.g10;
  const real G1_1_2_1_1 = map.det*c1_1*c1_2*c0_1*map.g10;
  const real G1_1_2_1_2 = map.det*c1_1*c1_2*c0_2*map.g10;
  const real G1_2_0_0_0 = map.det*c1_2*c1_0*c0_0*map.g00;
  const real G1_2_0_0_1 = map.det*c1_2*c1_0*c0_1*map.g00;
  const real G1_2_0_0_2 = map.det*c1_2*c1_0*c0_2*map.g00;
  const real G1_2_0_1_0 = map.det*c1_2*c1_0*c0_0*map.g10;
  const real G1_2_0_1_1 = map.det*c1_2*c1_0*c0_1*map.g10;
  const real G1_2_0_1_2 = map.det*c1_2*c1_0*c0_2*map.g10;
  const real G1_2_1_0_0 = map.det*c1_2*c1_1*c0_0*map.g00;
  const real G1_2_1_0_1 = map.det*c1_2*c1_1*c0_1*map.g00;
  const real G1_2_1_0_2 = map.det*c1_2*c1_1*c0_2*map.g00;
  const real G1_2_1_1_0 = map.det*c1_2*c1_1*c0_0*map.g10;
  const real G1_2_1_1_1 = map.det*c1_2*c1_1*c0_1*map.g10;
  const real G1_2_1_1_2 = map.det*c1_2*c1_1*c0_2*map.g10;
  const real G1_2_2_0_0 = map.det*c1_2*c1_2*c0_0*map.g00;
  const real G1_2_2_0_1 = map.det*c1_2*c1_2*c0_1*map.g00;
  const real G1_2_2_0_2 = map.det*c1_2*c1_2*c0_2*map.g00;
  const real G1_2_2_1_0 = map.det*c1_2*c1_2*c0_0*map.g10;
  const real G1_2_2_1_1 = map.det*c1_2*c1_2*c0_1*map.g10;
  const real G1_2_2_1_2 = map.det*c1_2*c1_2*c0_2*map.g10;
  const real G2_3 = map.det*c0_3;
  const real G2_4 = map.det*c0_4;
  const real G2_5 = map.det*c0_5;
  const real G3_0_0_0_3 = map.det*c1_0*c1_0*c0_3*map.g01;
  const real G3_0_0_0_4 = map.det*c1_0*c1_0*c0_4*map.g01;
  const real G3_0_0_0_5 = map.det*c1_0*c1_0*c0_5*map.g01;
  const real G3_0_0_1_3 = map.det*c1_0*c1_0*c0_3*map.g11;
  const real G3_0_0_1_4 = map.det*c1_0*c1_0*c0_4*map.g11;
  const real G3_0_0_1_5 = map.det*c1_0*c1_0*c0_5*map.g11;
  const real G3_0_1_0_3 = map.det*c1_0*c1_1*c0_3*map.g01;
  const real G3_0_1_0_4 = map.det*c1_0*c1_1*c0_4*map.g01;
  const real G3_0_1_0_5 = map.det*c1_0*c1_1*c0_5*map.g01;
  const real G3_0_1_1_3 = map.det*c1_0*c1_1*c0_3*map.g11;
  const real G3_0_1_1_4 = map.det*c1_0*c1_1*c0_4*map.g11;
  const real G3_0_1_1_5 = map.det*c1_0*c1_1*c0_5*map.g11;
  const real G3_0_2_0_3 = map.det*c1_0*c1_2*c0_3*map.g01;
  const real G3_0_2_0_4 = map.det*c1_0*c1_2*c0_4*map.g01;
  const real G3_0_2_0_5 = map.det*c1_0*c1_2*c0_5*map.g01;
  const real G3_0_2_1_3 = map.det*c1_0*c1_2*c0_3*map.g11;
  const real G3_0_2_1_4 = map.det*c1_0*c1_2*c0_4*map.g11;
  const real G3_0_2_1_5 = map.det*c1_0*c1_2*c0_5*map.g11;
  const real G3_1_0_0_3 = map.det*c1_1*c1_0*c0_3*map.g01;
  const real G3_1_0_0_4 = map.det*c1_1*c1_0*c0_4*map.g01;
  const real G3_1_0_0_5 = map.det*c1_1*c1_0*c0_5*map.g01;
  const real G3_1_0_1_3 = map.det*c1_1*c1_0*c0_3*map.g11;
  const real G3_1_0_1_4 = map.det*c1_1*c1_0*c0_4*map.g11;
  const real G3_1_0_1_5 = map.det*c1_1*c1_0*c0_5*map.g11;
  const real G3_1_1_0_3 = map.det*c1_1*c1_1*c0_3*map.g01;
  const real G3_1_1_0_4 = map.det*c1_1*c1_1*c0_4*map.g01;
  const real G3_1_1_0_5 = map.det*c1_1*c1_1*c0_5*map.g01;
  const real G3_1_1_1_3 = map.det*c1_1*c1_1*c0_3*map.g11;
  const real G3_1_1_1_4 = map.det*c1_1*c1_1*c0_4*map.g11;
  const real G3_1_1_1_5 = map.det*c1_1*c1_1*c0_5*map.g11;
  const real G3_1_2_0_3 = map.det*c1_1*c1_2*c0_3*map.g01;
  const real G3_1_2_0_4 = map.det*c1_1*c1_2*c0_4*map.g01;
  const real G3_1_2_0_5 = map.det*c1_1*c1_2*c0_5*map.g01;
  const real G3_1_2_1_3 = map.det*c1_1*c1_2*c0_3*map.g11;
  const real G3_1_2_1_4 = map.det*c1_1*c1_2*c0_4*map.g11;
  const real G3_1_2_1_5 = map.det*c1_1*c1_2*c0_5*map.g11;
  const real G3_2_0_0_3 = map.det*c1_2*c1_0*c0_3*map.g01;
  const real G3_2_0_0_4 = map.det*c1_2*c1_0*c0_4*map.g01;
  const real G3_2_0_0_5 = map.det*c1_2*c1_0*c0_5*map.g01;
  const real G3_2_0_1_3 = map.det*c1_2*c1_0*c0_3*map.g11;
  const real G3_2_0_1_4 = map.det*c1_2*c1_0*c0_4*map.g11;
  const real G3_2_0_1_5 = map.det*c1_2*c1_0*c0_5*map.g11;
  const real G3_2_1_0_3 = map.det*c1_2*c1_1*c0_3*map.g01;
  const real G3_2_1_0_4 = map.det*c1_2*c1_1*c0_4*map.g01;
  const real G3_2_1_0_5 = map.det*c1_2*c1_1*c0_5*map.g01;
  const real G3_2_1_1_3 = map.det*c1_2*c1_1*c0_3*map.g11;
  const real G3_2_1_1_4 = map.det*c1_2*c1_1*c0_4*map.g11;
  const real G3_2_1_1_5 = map.det*c1_2*c1_1*c0_5*map.g11;
  const real G3_2_2_0_3 = map.det*c1_2*c1_2*c0_3*map.g01;
  const real G3_2_2_0_4 = map.det*c1_2*c1_2*c0_4*map.g01;
  const real G3_2_2_0_5 = map.det*c1_2*c1_2*c0_5*map.g01;
  const real G3_2_2_1_3 = map.det*c1_2*c1_2*c0_3*map.g11;
  const real G3_2_2_1_4 = map.det*c1_2*c1_2*c0_4*map.g11;
  const real G3_2_2_1_5 = map.det*c1_2*c1_2*c0_5*map.g11;

  // Compute element tensor
  block[0] = 8.333333333333318e-02*G0_0 + 4.166666666666659e-02*G0_1 + 4.166666666666657e-02*G0_2;
  block[1] = 4.166666666666659e-02*G0_0 + 8.333333333333318e-02*G0_1 + 4.166666666666659e-02*G0_2;
  block[2] = 4.166666666666657e-02*G0_0 + 4.166666666666659e-02*G0_1 + 8.333333333333316e-02*G0_2;
  block[3] = 8.333333333333318e-02*G2_3 + 4.166666666666659e-02*G2_4 + 4.166666666666657e-02*G2_5;
  block[4] = 4.166666666666659e-02*G2_3 + 8.333333333333318e-02*G2_4 + 4.166666666666659e-02*G2_5;
  block[5] = 4.166666666666657e-02*G2_3 + 4.166666666666659e-02*G2_4 + 8.333333333333316e-02*G2_5;
  block[6] = -9.999999999999983e-03*G1_0_0_0_0 - 3.333333333333328e-03*G1_0_0_0_1 - 3.333333333333327e-03*G1_0_0_0_2 - 9.999999999999981e-03*G1_0_0_1_0 - 3.333333333333327e-03*G1_0_0_1_1 - 3.333333333333327e-03*G1_0_0_1_2 - 3.333333333333328e-03*G1_0_1_0_0 - 3.333333333333327e-03*G1_0_1_0_1 - 1.666666666666664e-03*G1_0_1_0_2 - 3.333333333333327e-03*G1_0_1_1_0 - 3.333333333333327e-03*G1_0_1_1_1 - 1.666666666666663e-03*G1_0_1_1_2 - 3.333333333333328e-03*G1_0_2_0_0 - 1.666666666666664e-03*G1_0_2_0_1 - 3.333333333333327e-03*G1_0_2_0_2 - 3.333333333333327e-03*G1_0_2_1_0 - 1.666666666666663e-03*G1_0_2_1_1 - 3.333333333333327e-03*G1_0_2_1_2 - 3.333333333333328e-03*G1_1_0_0_0 - 3.333333333333327e-03*G1_1_0_0_1 - 1.666666666666664e-03*G1_1_0_0_2 - 3.333333333333327e-03*G1_1_0_1_0 - 3.333333333333327e-03*G1_1_0_1_1 - 1.666666666666663e-03*G1_1_0_1_2 - 3.333333333333327e-03*G1_1_1_0_0 - 9.999999999999983e-03*G1_1_1_0_1 - 3.333333333333328e-03*G1_1_1_0_2 - 3.333333333333327e-03*G1_1_1_1_0 - 9.999999999999981e-03*G1_1_1_1_1 - 3.333333333333327e-03*G1_1_1_1_2 - 1.666666666666664e-03*G1_1_2_0_0 - 3.333333333333328e-03*G1_1_2_0_1 - 3.333333333333328e-03*G1_1_2_0_2 - 1.666666666666663e-03*G1_1_2_1_0 - 3.333333333333327e-03*G1_1_2_1_1 - 3.333333333333327e-03*G1_1_2_1_2 - 3.333333333333328e-03*G1_2_0_0_0 - 1.666666666666664e-03*G1_2_0_0_1 - 3.333333333333328e-03*G1_2_0_0_2 - 3.333333333333327e-03*G1_2_0_1_0 - 1.666666666666663e-03*G1_2_0_1_1 - 3.333333333333327e-03*G1_2_0_1_2 - 1.666666666666664e-03*G1_2_1_0_0 - 3.333333333333328e-03*G1_2_1_0_1 - 3.333333333333329e-03*G1_2_1_0_2 - 1.666666666666663e-03*G1_2_1_1_0 - 3.333333333333327e-03*G1_2_1_1_1 - 3.333333333333328e-03*G1_2_1_1_2 - 3.333333333333327e-03*G1_2_2_0_0 - 3.333333333333328e-03*G1_2_2_0_1 - 9.999999999999983e-03*G1_2_2_0_2 - 3.333333333333326e-03*G1_2_2_1_0 - 3.333333333333328e-03*G1_2_2_1_1 - 9.999999999999981e-03*G1_2_2_1_2 - 9.999999999999983e-03*G3_0_0_0_3 - 3.333333333333328e-03*G3_0_0_0_4 - 3.333333333333327e-03*G3_0_0_0_5 - 9.999999999999981e-03*G3_0_0_1_3 - 3.333333333333327e-03*G3_0_0_1_4 - 3.333333333333327e-03*G3_0_0_1_5 - 3.333333333333328e-03*G3_0_1_0_3 - 3.333333333333327e-03*G3_0_1_0_4 - 1.666666666666664e-03*G3_0_1_0_5 - 3.333333333333327e-03*G3_0_1_1_3 - 3.333333333333327e-03*G3_0_1_1_4 - 1.666666666666663e-03*G3_0_1_1_5 - 3.333333333333328e-03*G3_0_2_0_3 - 1.666666666666664e-03*G3_0_2_0_4 - 3.333333333333327e-03*G3_0_2_0_5 - 3.333333333333327e-03*G3_0_2_1_3 - 1.666666666666663e-03*G3_0_2_1_4 - 3.333333333333327e-03*G3_0_2_1_5 - 3.333333333333328e-03*G3_1_0_0_3 - 3.333333333333327e-03*G3_1_0_0_4 - 1.666666666666664e-03*G3_1_0_0_5 - 3.333333333333327e-03*G3_1_0_1_3 - 3.333333333333327e-03*G3_1_0_1_4 - 1.666666666666663e-03*G3_1_0_1_5 - 3.333333333333327e-03*G3_1_1_0_3 - 9.999999999999983e-03*G3_1_1_0_4 - 3.333333333333328e-03*G3_1_1_0_5 - 3.333333333333327e-03*G3_1_1_1_3 - 9.999999999999981e-03*G3_1_1_1_4 - 3.333333333333327e-03*G3_1_1_1_5 - 1.666666666666664e-03*G3_1_2_0_3 - 3.333333333333328e-03*G3_1_2_0_4 - 3.333333333333328e-03*G3_1_2_0_5 - 1.666666666666663e-03*G3_1_2_1_3 - 3.333333333333327e-03*G3_1_2_1_4 - 3.333333333333327e-03*G3_1_2_1_5 - 3.333333333333328e-03*G3_2_0_0_3 - 1.666666666666664e-03*G3_2_0_0_4 - 3.333333333333328e-03*G3_2_0_0_5 - 3.333333333333327e-03*G3_2_0_1_3 - 1.666666666666663e-03*G3_2_0_1_4 - 3.333333333333327e-03*G3_2_0_1_5 - 1.666666666666664e-03*G3_2_1_0_3 - 3.333333333333328e-03*G3_2_1_0_4 - 3.333333333333329e-03*G3_2_1_0_5 - 1.666666666666663e-03*G3_2_1_1_3 - 3.333333333333327e-03*G3_2_1_1_4 - 3.333333333333328e-03*G3_2_1_1_5 - 3.333333333333327e-03*G3_2_2_0_3 - 3.333333333333328e-03*G3_2_2_0_4 - 9.999999999999983e-03*G3_2_2_0_5 - 3.333333333333326e-03*G3_2_2_1_3 - 3.333333333333328e-03*G3_2_2_1_4 - 9.999999999999981e-03*G3_2_2_1_5;
  block[7] = 9.999999999999983e-03*G1_0_0_0_0 + 3.333333333333328e-03*G1_0_0_0_1 + 3.333333333333327e-03*G1_0_0_0_2 + 3.333333333333328e-03*G1_0_1_0_0 + 3.333333333333327e-03*G1_0_1_0_1 + 1.666666666666664e-03*G1_0_1_0_2 + 3.333333333333328e-03*G1_0_2_0_0 + 1.666666666666664e-03*G1_0_2_0_1 + 3.333333333333327e-03*G1_0_2_0_2 + 3.333333333333328e-03*G1_1_0_0_0 + 3.333333333333327e-03*G1_1_0_0_1 + 1.666666666666664e-03*G1_1_0_0_2 + 3.333333333333327e-03*G1_1_1_0_0 + 9.999999999999983e-03*G1_1_1_0_1 + 3.333333333333328e-03*G1_1_1_0_2 + 1.666666666666664e-03*G1_1_2_0_0 + 3.333333333333328e-03*G1_1_2_0_1 + 3.333333333333328e-03*G1_1_2_0_2 + 3.333333333333328e-03*G1_2_0_0_0 + 1.666666666666664e-03*G1_2_0_0_1 + 3.333333333333328e-03*G1_2_0_0_2 + 1.666666666666664e-03*G1_2_1_0_0 + 3.333333333333328e-03*G1_2_1_0_1 + 3.333333333333329e-03*G1_2_1_0_2 + 3.333333333333327e-03*G1_2_2_0_0 + 3.333333333333328e-03*G1_2_2_0_1 + 9.999999999999983e-03*G1_2_2_0_2 + 9.999999999999983e-03*G3_0_0_0_3 + 3.333333333333328e-03*G3_0_0_0_4 + 3.333333333333327e-03*G3_0_0_0_5 + 3.333333333333328e-03*G3_0_1_0_3 + 3.333333333333327e-03*G3_0_1_0_4 + 1.666666666666664e-03*G3_0_1_0_5 + 3.333333333333328e-03*G3_0_2_0_3 + 1.666666666666664e-03*G3_0_2_0_4 + 3.333333333333327e-03*G3_0_2_0_5 + 3.333333333333328e-03*G3_1_0_0_3 + 3.333333333333327e-03*G3_1_0_0_4 + 1.666666666666664e-03*G3_1_0_0_5 + 3.333333333333327e-03*G3_1_1_0_3 + 9.999999999999983e-03*G3_1_1_0_4 + 3.333333333333328e-03*G3_1_1_0_5 + 1.666666666666664e-03*G3_1_2_0_3 + 3.333333333333328e-03*G3_1_2_0_4 + 3.333333333333328e-03*G3_1_2_0_5 + 3.333333333333328e-03*G3_2_0_0_3 + 1.666666666666664e-03*G3_2_0_0_4 + 3.333333333333328e-03*G3_2_0_0_5 + 1.666666666666664e-03*G3_2_1_0_3 + 3.333333333333328e-03*G3_2_1_0_4 + 3.333333333333329e-03*G3_2_1_0_5 + 3.333333333333327e-03*G3_2_2_0_3 + 3.333333333333328e-03*G3_2_2_0_4 + 9.999999999999983e-03*G3_2_2_0_5;
  block[8] = 9.999999999999981e-03*G1_0_0_1_0 + 3.333333333333327e-03*G1_0_0_1_1 + 3.333333333333327e-03*G1_0_0_1_2 + 3.333333333333327e-03*G1_0_1_1_0 + 3.333333333333327e-03*G1_0_1_1_1 + 1.666666666666663e-03*G1_0_1_1_2 + 3.333333333333327e-03*G1_0_2_1_0 + 1.666666666666663e-03*G1_0_2_1_1 + 3.333333333333327e-03*G1_0_2_1_2 + 3.333333333333327e-03*G1_1_0_1_0 + 3.333333333333327e-03*G1_1_0_1_1 + 1.666666666666663e-03*G1_1_0_1_2 + 3.333333333333327e-03*G1_1_1_1_0 + 9.999999999999981e-03*G1_1_1_1_1 + 3.333333333333327e-03*G1_1_1_1_2 + 1.666666666666663e-03*G1_1_2_1_0 + 3.333333333333327e-03*G1_1_2_1_1 + 3.333333333333327e-03*G1_1_2_1_2 + 3.333333333333327e-03*G1_2_0_1_0 + 1.666666666666663e-03*G1_2_0_1_1 + 3.333333333333327e-03*G1_2_0_1_2 + 1.666666666666663e-03*G1_2_1_1_0 + 3.333333333333327e-03*G1_2_1_1_1 + 3.333333333333328e-03*G1_2_1_1_2 + 3.333333333333326e-03*G1_2_2_1_0 + 3.333333333333328e-03*G1_2_2_1_1 + 9.999999999999981e-03*G1_2_2_1_2 + 9.999999999999981e-03*G3_0_0_1_3 + 3.333333333333327e-03*G3_0_0_1_4 + 3.333333333333327e-03*G3_0_0_1_5 + 3.333333333333327e-03*G3_0_1_1_3 + 3.333333333333327e-03*G3_0_1_1_4 + 1.666666666666663e-03*G3_0_1_1_5 + 3.333333333333327e-03*G3_0_2_1_3 + 1.666666666666663e-03*G3_0_2_1_4 + 3.333333333333327e-03*G3_0_2_1_5 + 3.333333333333327e-03*G3_1_0_1_3 + 3.333333333333327e-03*G3_1_0_1_4 + 1.666666666666663e-03*G3_1_0_1_5 + 3.333333333333327e-03*G3_1_1_1_3 + 9.999999999999981e-03*G3_1_1_1_4 + 3.333333333333327e-03*G3_1_1_1_5 + 1.666666666666663e-03*G3_1_2_1_3 + 3.333333333333327e-03*G3_1_2_1_4 + 3.333333333333327e-03*G3_1_2_1_5 + 3.333333333333327e-03*G3_2_0_1_3 + 1.666666666666663e-03*G3_2_0_1_4 + 3.333333333333327e-03*G3_2_0_1_5 + 1.666666666666663e-03*G3_2_1_1_3 + 3.333333333333327e-03*G3_2_1_1_4 + 3.333333333333328e-03*G3_2_1_1_5 + 3.333333333333326e-03*G3_2_2_1_3 + 3.333333333333328e-03*G3_2_2_1_4 + 9.999999999999981e-03*G3_2_2_1_5;
}

// No contribution from the boundary
bool LinearForm::boundary_contribution() const { return false; }

void LinearForm::eval(real block[], const AffineMap& map, unsigned int facet) const {}

} }

#endif
