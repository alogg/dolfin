// Automatically generated by FFC, the FEniCS Form Compiler, version 0.3.5.
// For further information, go to http://www/fenics.org/ffc/.
// Licensed under the GNU LGPL Version 2.1.

#ifndef __CNSMIX2D_H
#define __CNSMIX2D_H

#include <dolfin/Mesh.h>
#include <dolfin/Cell.h>
#include <dolfin/Point.h>
#include <dolfin/AffineMap.h>
#include <dolfin/FiniteElement.h>
#include <dolfin/FiniteElementSpec.h>
#include <dolfin/BilinearForm.h>
#include <dolfin/LinearForm.h>
#include <dolfin/Functional.h>
#include <dolfin/FEM.h>

namespace dolfin { namespace CNSmix2D {

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class BilinearForm : public dolfin::BilinearForm
{
public:

  class TestElement;

  class TrialElement;

  class FunctionElement_0;

  class FunctionElement_1;

  class FunctionElement_2;

  class FunctionElement_3;

  class FunctionElement_4;

  BilinearForm(Function& w0, Function& w1, Function& w2, Function& w3, Function& w4, const real& c0);
  

  bool interior_contribution() const;

  void eval(real block[], const AffineMap& map, real det) const;

  bool boundary_contribution() const;

  void eval(real block[], const AffineMap& map, real det, unsigned int facet) const;

  bool interior_boundary_contribution() const;

  void eval(real block[], const AffineMap& map0, const AffineMap& map1, real det, unsigned int facet0, unsigned int facet1, unsigned int alignment) const;

private:

  const real& c0;

};

class BilinearForm::TestElement : public dolfin::FiniteElement
{
public:

  TestElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 4;

    subelements = new FiniteElement* [3];
    subelements[0] = new SubElement_0();
    subelements[1] = new SubElement_1();
    subelements[2] = new SubElement_2();
  }

  ~TestElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 12;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 3;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(0)[0];
    nodes[4] = offset + cell.entities(0)[1];
    nodes[5] = offset + cell.entities(0)[2];
    offset = offset + mesh.topology().size(0);
    nodes[6] = offset + cell.entities(0)[0];
    nodes[7] = offset + cell.entities(0)[1];
    nodes[8] = offset + cell.entities(0)[2];
    offset = offset + mesh.topology().size(0);
    nodes[9] = offset + cell.entities(0)[0];
    nodes[10] = offset + cell.entities(0)[1];
    nodes[11] = offset + cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[4] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[6] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[7] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[8] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[3] = 1;
    components[4] = 1;
    components[5] = 1;
    components[6] = 2;
    components[7] = 2;
    components[8] = 2;
    points[9] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[10] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[11] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[9] = 3;
    components[10] = 3;
    components[11] = 3;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
    offset = offset + mesh.topology().size(0);
    vertex_nodes[2] = offset + vertex;
    offset = offset + mesh.topology().size(0);
    vertex_nodes[3] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *subelements[i];
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *subelements[i];
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("mixed");
    return s;
  }
  
private:

class SubElement_0 : public dolfin::FiniteElement
{
public:

  SubElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 3;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class SubElement_1 : public dolfin::FiniteElement
{
public:

  SubElement_1() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 2;

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_1()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 6;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(0)[0];
    nodes[4] = offset + cell.entities(0)[1];
    nodes[5] = offset + cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[4] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 1;
    components[4] = 1;
    components[5] = 1;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "triangle", 1, 2);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class SubElement_2 : public dolfin::FiniteElement
{
public:

  SubElement_2() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_2()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 3;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class BilinearForm::TrialElement : public dolfin::FiniteElement
{
public:

  TrialElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 4;

    subelements = new FiniteElement* [3];
    subelements[0] = new SubElement_0();
    subelements[1] = new SubElement_1();
    subelements[2] = new SubElement_2();
  }

  ~TrialElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 12;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 3;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(0)[0];
    nodes[4] = offset + cell.entities(0)[1];
    nodes[5] = offset + cell.entities(0)[2];
    offset = offset + mesh.topology().size(0);
    nodes[6] = offset + cell.entities(0)[0];
    nodes[7] = offset + cell.entities(0)[1];
    nodes[8] = offset + cell.entities(0)[2];
    offset = offset + mesh.topology().size(0);
    nodes[9] = offset + cell.entities(0)[0];
    nodes[10] = offset + cell.entities(0)[1];
    nodes[11] = offset + cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[4] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[6] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[7] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[8] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[3] = 1;
    components[4] = 1;
    components[5] = 1;
    components[6] = 2;
    components[7] = 2;
    components[8] = 2;
    points[9] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[10] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[11] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[9] = 3;
    components[10] = 3;
    components[11] = 3;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
    offset = offset + mesh.topology().size(0);
    vertex_nodes[2] = offset + vertex;
    offset = offset + mesh.topology().size(0);
    vertex_nodes[3] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *subelements[i];
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *subelements[i];
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("mixed");
    return s;
  }
  
private:

class SubElement_0 : public dolfin::FiniteElement
{
public:

  SubElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 3;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class SubElement_1 : public dolfin::FiniteElement
{
public:

  SubElement_1() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 2;

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_1()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 6;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(0)[0];
    nodes[4] = offset + cell.entities(0)[1];
    nodes[5] = offset + cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[4] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 1;
    components[4] = 1;
    components[5] = 1;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "triangle", 1, 2);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class SubElement_2 : public dolfin::FiniteElement
{
public:

  SubElement_2() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_2()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 3;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class BilinearForm::FunctionElement_0 : public dolfin::FiniteElement
{
public:

  FunctionElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 2;

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 6;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(0)[0];
    nodes[4] = offset + cell.entities(0)[1];
    nodes[5] = offset + cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[4] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 1;
    components[4] = 1;
    components[5] = 1;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "triangle", 1, 2);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class BilinearForm::FunctionElement_1 : public dolfin::FiniteElement
{
public:

  FunctionElement_1() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_1()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 1;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.index();
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(3.333333333333334e-01, 3.333333333333334e-01);
    components[0] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Discontinuous Lagrange", "triangle", 0);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class BilinearForm::FunctionElement_2 : public dolfin::FiniteElement
{
public:

  FunctionElement_2() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_2()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 1;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.index();
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(3.333333333333334e-01, 3.333333333333334e-01);
    components[0] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Discontinuous Lagrange", "triangle", 0);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class BilinearForm::FunctionElement_3 : public dolfin::FiniteElement
{
public:

  FunctionElement_3() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_3()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 1;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.index();
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(3.333333333333334e-01, 3.333333333333334e-01);
    components[0] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Discontinuous Lagrange", "triangle", 0);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class BilinearForm::FunctionElement_4 : public dolfin::FiniteElement
{
public:

  FunctionElement_4() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_4()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 1;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.index();
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(3.333333333333334e-01, 3.333333333333334e-01);
    components[0] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Discontinuous Lagrange", "triangle", 0);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

BilinearForm::BilinearForm(Function& w0, Function& w1, Function& w2, Function& w3, Function& w4, const real& c0) : dolfin::BilinearForm(5), c0(c0)
{
  // Create finite element for test space
  _test = new TestElement();

  // Create finite element for trial space
  _trial = new TrialElement();

  // Add functions
  initFunction(0, w0, new FunctionElement_0());
  initFunction(1, w1, new FunctionElement_1());
  initFunction(2, w2, new FunctionElement_2());
  initFunction(3, w3, new FunctionElement_3());
  initFunction(4, w4, new FunctionElement_4());
}

// Contribution from the interior
bool BilinearForm::interior_contribution() const { return true; }

void BilinearForm::eval(real block[], const AffineMap& map, real det) const
{
  // Compute coefficients
  const real c0_0 = 3.333333333333333e-01*c[0][0] + 3.333333333333334e-01*c[0][1] + 3.333333333333333e-01*c[0][2];
  const real c0_1 = 3.333333333333333e-01*c[0][3] + 3.333333333333334e-01*c[0][4] + 3.333333333333333e-01*c[0][5];
  const real c1_0 = c[1][0];
  const real c2_0 = c[2][0];
  const real c3_0 = c[3][0];
  const real c4_0 = c[4][0];

  // Compute geometry tensors
  const real G0_ = det;
  const real G1_0_0 = det*c0*c0_0*map.g00;
  const real G1_0_1 = det*c0*c0_0*map.g10;
  const real G2_1_0 = det*c0*c0_1*map.g01;
  const real G2_1_1 = det*c0*c0_1*map.g11;
  const real G3_0_0_0 = det*c0*c2_0*map.g00*map.g00 + det*c0*c2_0*map.g01*map.g01;
  const real G3_0_0_1 = det*c0*c2_0*map.g00*map.g10 + det*c0*c2_0*map.g01*map.g11;
  const real G3_0_1_0 = det*c0*c2_0*map.g10*map.g00 + det*c0*c2_0*map.g11*map.g01;
  const real G3_0_1_1 = det*c0*c2_0*map.g10*map.g10 + det*c0*c2_0*map.g11*map.g11;
  const real G4_0_0_0_0_0 = det*c0*c1_0*c0_0*c0_0*map.g00*map.g00;
  const real G4_0_0_0_0_1 = det*c0*c1_0*c0_0*c0_0*map.g00*map.g10;
  const real G4_0_0_1_0_0 = det*c0*c1_0*c0_0*c0_0*map.g10*map.g00;
  const real G4_0_0_1_0_1 = det*c0*c1_0*c0_0*c0_0*map.g10*map.g10;
  const real G5_0_0_0_1_0 = det*c0*c1_0*c0_0*c0_1*map.g00*map.g01;
  const real G5_0_0_0_1_1 = det*c0*c1_0*c0_0*c0_1*map.g00*map.g11;
  const real G5_0_0_1_1_0 = det*c0*c1_0*c0_0*c0_1*map.g10*map.g01;
  const real G5_0_0_1_1_1 = det*c0*c1_0*c0_0*c0_1*map.g10*map.g11;
  const real G6_0_1_0_0_0 = det*c0*c1_0*c0_1*c0_0*map.g01*map.g00;
  const real G6_0_1_0_0_1 = det*c0*c1_0*c0_1*c0_0*map.g01*map.g10;
  const real G6_0_1_1_0_0 = det*c0*c1_0*c0_1*c0_0*map.g11*map.g00;
  const real G6_0_1_1_0_1 = det*c0*c1_0*c0_1*c0_0*map.g11*map.g10;
  const real G7_0_1_0_1_0 = det*c0*c1_0*c0_1*c0_1*map.g01*map.g01;
  const real G7_0_1_0_1_1 = det*c0*c1_0*c0_1*c0_1*map.g01*map.g11;
  const real G7_0_1_1_1_0 = det*c0*c1_0*c0_1*c0_1*map.g11*map.g01;
  const real G7_0_1_1_1_1 = det*c0*c1_0*c0_1*c0_1*map.g11*map.g11;
  const real G8_ = det;
  const real G9_0_0 = det*c0*c0_0*map.g00;
  const real G9_0_1 = det*c0*c0_0*map.g10;
  const real G10_1_0 = det*c0*c0_1*map.g01;
  const real G10_1_1 = det*c0*c0_1*map.g11;
  const real G11_0_0_0 = det*c0*c3_0*map.g00*map.g00 + det*c0*c3_0*map.g01*map.g01;
  const real G11_0_0_1 = det*c0*c3_0*map.g00*map.g10 + det*c0*c3_0*map.g01*map.g11;
  const real G11_0_1_0 = det*c0*c3_0*map.g10*map.g00 + det*c0*c3_0*map.g11*map.g01;
  const real G11_0_1_1 = det*c0*c3_0*map.g10*map.g10 + det*c0*c3_0*map.g11*map.g11;
  const real G12_0_0_0_0_0 = det*c0*c1_0*c0_0*c0_0*map.g00*map.g00;
  const real G12_0_0_0_0_1 = det*c0*c1_0*c0_0*c0_0*map.g00*map.g10;
  const real G12_0_0_1_0_0 = det*c0*c1_0*c0_0*c0_0*map.g10*map.g00;
  const real G12_0_0_1_0_1 = det*c0*c1_0*c0_0*c0_0*map.g10*map.g10;
  const real G13_0_0_0_1_0 = det*c0*c1_0*c0_0*c0_1*map.g00*map.g01;
  const real G13_0_0_0_1_1 = det*c0*c1_0*c0_0*c0_1*map.g00*map.g11;
  const real G13_0_0_1_1_0 = det*c0*c1_0*c0_0*c0_1*map.g10*map.g01;
  const real G13_0_0_1_1_1 = det*c0*c1_0*c0_0*c0_1*map.g10*map.g11;
  const real G14_0_1_0_0_0 = det*c0*c1_0*c0_1*c0_0*map.g01*map.g00;
  const real G14_0_1_0_0_1 = det*c0*c1_0*c0_1*c0_0*map.g01*map.g10;
  const real G14_0_1_1_0_0 = det*c0*c1_0*c0_1*c0_0*map.g11*map.g00;
  const real G14_0_1_1_0_1 = det*c0*c1_0*c0_1*c0_0*map.g11*map.g10;
  const real G15_0_1_0_1_0 = det*c0*c1_0*c0_1*c0_1*map.g01*map.g01;
  const real G15_0_1_0_1_1 = det*c0*c1_0*c0_1*c0_1*map.g01*map.g11;
  const real G15_0_1_1_1_0 = det*c0*c1_0*c0_1*c0_1*map.g11*map.g01;
  const real G15_0_1_1_1_1 = det*c0*c1_0*c0_1*c0_1*map.g11*map.g11;
  const real G16_ = det;
  const real G17_0_0 = det*c0*c0_0*map.g00;
  const real G17_0_1 = det*c0*c0_0*map.g10;
  const real G18_1_0 = det*c0*c0_1*map.g01;
  const real G18_1_1 = det*c0*c0_1*map.g11;
  const real G19_0_0_0 = det*c0*c3_0*map.g00*map.g00 + det*c0*c3_0*map.g01*map.g01;
  const real G19_0_0_1 = det*c0*c3_0*map.g00*map.g10 + det*c0*c3_0*map.g01*map.g11;
  const real G19_0_1_0 = det*c0*c3_0*map.g10*map.g00 + det*c0*c3_0*map.g11*map.g01;
  const real G19_0_1_1 = det*c0*c3_0*map.g10*map.g10 + det*c0*c3_0*map.g11*map.g11;
  const real G20_0_0_0_0_0 = det*c0*c1_0*c0_0*c0_0*map.g00*map.g00;
  const real G20_0_0_0_0_1 = det*c0*c1_0*c0_0*c0_0*map.g00*map.g10;
  const real G20_0_0_1_0_0 = det*c0*c1_0*c0_0*c0_0*map.g10*map.g00;
  const real G20_0_0_1_0_1 = det*c0*c1_0*c0_0*c0_0*map.g10*map.g10;
  const real G21_0_0_0_1_0 = det*c0*c1_0*c0_0*c0_1*map.g00*map.g01;
  const real G21_0_0_0_1_1 = det*c0*c1_0*c0_0*c0_1*map.g00*map.g11;
  const real G21_0_0_1_1_0 = det*c0*c1_0*c0_0*c0_1*map.g10*map.g01;
  const real G21_0_0_1_1_1 = det*c0*c1_0*c0_0*c0_1*map.g10*map.g11;
  const real G22_0_1_0_0_0 = det*c0*c1_0*c0_1*c0_0*map.g01*map.g00;
  const real G22_0_1_0_0_1 = det*c0*c1_0*c0_1*c0_0*map.g01*map.g10;
  const real G22_0_1_1_0_0 = det*c0*c1_0*c0_1*c0_0*map.g11*map.g00;
  const real G22_0_1_1_0_1 = det*c0*c1_0*c0_1*c0_0*map.g11*map.g10;
  const real G23_0_1_0_1_0 = det*c0*c1_0*c0_1*c0_1*map.g01*map.g01;
  const real G23_0_1_0_1_1 = det*c0*c1_0*c0_1*c0_1*map.g01*map.g11;
  const real G23_0_1_1_1_0 = det*c0*c1_0*c0_1*c0_1*map.g11*map.g01;
  const real G23_0_1_1_1_1 = det*c0*c1_0*c0_1*c0_1*map.g11*map.g11;
  const real G24_ = det;
  const real G25_0_0 = det*c0*c0_0*map.g00;
  const real G25_0_1 = det*c0*c0_0*map.g10;
  const real G26_1_0 = det*c0*c0_1*map.g01;
  const real G26_1_1 = det*c0*c0_1*map.g11;
  const real G27_0_0_0 = det*c0*c4_0*map.g00*map.g00 + det*c0*c4_0*map.g01*map.g01;
  const real G27_0_0_1 = det*c0*c4_0*map.g00*map.g10 + det*c0*c4_0*map.g01*map.g11;
  const real G27_0_1_0 = det*c0*c4_0*map.g10*map.g00 + det*c0*c4_0*map.g11*map.g01;
  const real G27_0_1_1 = det*c0*c4_0*map.g10*map.g10 + det*c0*c4_0*map.g11*map.g11;
  const real G28_0_0_0_0_0 = det*c0*c1_0*c0_0*c0_0*map.g00*map.g00;
  const real G28_0_0_0_0_1 = det*c0*c1_0*c0_0*c0_0*map.g00*map.g10;
  const real G28_0_0_1_0_0 = det*c0*c1_0*c0_0*c0_0*map.g10*map.g00;
  const real G28_0_0_1_0_1 = det*c0*c1_0*c0_0*c0_0*map.g10*map.g10;
  const real G29_0_0_0_1_0 = det*c0*c1_0*c0_0*c0_1*map.g00*map.g01;
  const real G29_0_0_0_1_1 = det*c0*c1_0*c0_0*c0_1*map.g00*map.g11;
  const real G29_0_0_1_1_0 = det*c0*c1_0*c0_0*c0_1*map.g10*map.g01;
  const real G29_0_0_1_1_1 = det*c0*c1_0*c0_0*c0_1*map.g10*map.g11;
  const real G30_0_1_0_0_0 = det*c0*c1_0*c0_1*c0_0*map.g01*map.g00;
  const real G30_0_1_0_0_1 = det*c0*c1_0*c0_1*c0_0*map.g01*map.g10;
  const real G30_0_1_1_0_0 = det*c0*c1_0*c0_1*c0_0*map.g11*map.g00;
  const real G30_0_1_1_0_1 = det*c0*c1_0*c0_1*c0_0*map.g11*map.g10;
  const real G31_0_1_0_1_0 = det*c0*c1_0*c0_1*c0_1*map.g01*map.g01;
  const real G31_0_1_0_1_1 = det*c0*c1_0*c0_1*c0_1*map.g01*map.g11;
  const real G31_0_1_1_1_0 = det*c0*c1_0*c0_1*c0_1*map.g11*map.g01;
  const real G31_0_1_1_1_1 = det*c0*c1_0*c0_1*c0_1*map.g11*map.g11;

  // Compute element tensor
  block[0] = 8.333333333333318e-02*G0_ + 8.333333333333327e-02*G1_0_0 + 8.333333333333326e-02*G1_0_1 + 8.333333333333327e-02*G2_1_0 + 8.333333333333326e-02*G2_1_1 + 2.499999999999999e-01*G3_0_0_0 + 2.499999999999998e-01*G3_0_0_1 + 2.499999999999998e-01*G3_0_1_0 + 2.499999999999998e-01*G3_0_1_1 + 2.499999999999999e-01*G4_0_0_0_0_0 + 2.499999999999998e-01*G4_0_0_0_0_1 + 2.499999999999998e-01*G4_0_0_1_0_0 + 2.499999999999998e-01*G4_0_0_1_0_1 + 2.499999999999999e-01*G5_0_0_0_1_0 + 2.499999999999998e-01*G5_0_0_0_1_1 + 2.499999999999998e-01*G5_0_0_1_1_0 + 2.499999999999998e-01*G5_0_0_1_1_1 + 2.499999999999999e-01*G6_0_1_0_0_0 + 2.499999999999998e-01*G6_0_1_0_0_1 + 2.499999999999998e-01*G6_0_1_1_0_0 + 2.499999999999998e-01*G6_0_1_1_0_1 + 2.499999999999999e-01*G7_0_1_0_1_0 + 2.499999999999998e-01*G7_0_1_0_1_1 + 2.499999999999998e-01*G7_0_1_1_1_0 + 2.499999999999998e-01*G7_0_1_1_1_1;
  block[1] = 4.166666666666658e-02*G0_ + 8.333333333333329e-02*G1_0_0 + 8.333333333333327e-02*G1_0_1 + 8.333333333333329e-02*G2_1_0 + 8.333333333333327e-02*G2_1_1 - 2.499999999999999e-01*G3_0_0_0 - 2.499999999999998e-01*G3_0_1_0 - 2.499999999999999e-01*G4_0_0_0_0_0 - 2.499999999999998e-01*G4_0_0_1_0_0 - 2.499999999999999e-01*G5_0_0_0_1_0 - 2.499999999999998e-01*G5_0_0_1_1_0 - 2.499999999999999e-01*G6_0_1_0_0_0 - 2.499999999999998e-01*G6_0_1_1_0_0 - 2.499999999999999e-01*G7_0_1_0_1_0 - 2.499999999999998e-01*G7_0_1_1_1_0;
  block[2] = 4.166666666666658e-02*G0_ + 8.333333333333327e-02*G1_0_0 + 8.333333333333326e-02*G1_0_1 + 8.333333333333327e-02*G2_1_0 + 8.333333333333326e-02*G2_1_1 - 2.499999999999998e-01*G3_0_0_1 - 2.499999999999998e-01*G3_0_1_1 - 2.499999999999998e-01*G4_0_0_0_0_1 - 2.499999999999998e-01*G4_0_0_1_0_1 - 2.499999999999998e-01*G5_0_0_0_1_1 - 2.499999999999998e-01*G5_0_0_1_1_1 - 2.499999999999998e-01*G6_0_1_0_0_1 - 2.499999999999998e-01*G6_0_1_1_0_1 - 2.499999999999998e-01*G7_0_1_0_1_1 - 2.499999999999998e-01*G7_0_1_1_1_1;
  block[3] = 0.000000000000000e+00;
  block[4] = 0.000000000000000e+00;
  block[5] = 0.000000000000000e+00;
  block[6] = 0.000000000000000e+00;
  block[7] = 0.000000000000000e+00;
  block[8] = 0.000000000000000e+00;
  block[9] = 0.000000000000000e+00;
  block[10] = 0.000000000000000e+00;
  block[11] = 0.000000000000000e+00;
  block[12] = 4.166666666666658e-02*G0_ - 8.333333333333327e-02*G1_0_0 - 8.333333333333327e-02*G2_1_0 - 2.499999999999999e-01*G3_0_0_0 - 2.499999999999998e-01*G3_0_0_1 - 2.499999999999999e-01*G4_0_0_0_0_0 - 2.499999999999998e-01*G4_0_0_0_0_1 - 2.499999999999999e-01*G5_0_0_0_1_0 - 2.499999999999998e-01*G5_0_0_0_1_1 - 2.499999999999999e-01*G6_0_1_0_0_0 - 2.499999999999998e-01*G6_0_1_0_0_1 - 2.499999999999999e-01*G7_0_1_0_1_0 - 2.499999999999998e-01*G7_0_1_0_1_1;
  block[13] = 8.333333333333318e-02*G0_ - 8.333333333333329e-02*G1_0_0 - 8.333333333333329e-02*G2_1_0 + 2.499999999999999e-01*G3_0_0_0 + 2.499999999999999e-01*G4_0_0_0_0_0 + 2.499999999999999e-01*G5_0_0_0_1_0 + 2.499999999999999e-01*G6_0_1_0_0_0 + 2.499999999999999e-01*G7_0_1_0_1_0;
  block[14] = 4.166666666666659e-02*G0_ - 8.333333333333327e-02*G1_0_0 - 8.333333333333327e-02*G2_1_0 + 2.499999999999998e-01*G3_0_0_1 + 2.499999999999998e-01*G4_0_0_0_0_1 + 2.499999999999998e-01*G5_0_0_0_1_1 + 2.499999999999998e-01*G6_0_1_0_0_1 + 2.499999999999998e-01*G7_0_1_0_1_1;
  block[15] = 0.000000000000000e+00;
  block[16] = 0.000000000000000e+00;
  block[17] = 0.000000000000000e+00;
  block[18] = 0.000000000000000e+00;
  block[19] = 0.000000000000000e+00;
  block[20] = 0.000000000000000e+00;
  block[21] = 0.000000000000000e+00;
  block[22] = 0.000000000000000e+00;
  block[23] = 0.000000000000000e+00;
  block[24] = 4.166666666666658e-02*G0_ - 8.333333333333326e-02*G1_0_1 - 8.333333333333326e-02*G2_1_1 - 2.499999999999998e-01*G3_0_1_0 - 2.499999999999998e-01*G3_0_1_1 - 2.499999999999998e-01*G4_0_0_1_0_0 - 2.499999999999998e-01*G4_0_0_1_0_1 - 2.499999999999998e-01*G5_0_0_1_1_0 - 2.499999999999998e-01*G5_0_0_1_1_1 - 2.499999999999998e-01*G6_0_1_1_0_0 - 2.499999999999998e-01*G6_0_1_1_0_1 - 2.499999999999998e-01*G7_0_1_1_1_0 - 2.499999999999998e-01*G7_0_1_1_1_1;
  block[25] = 4.166666666666659e-02*G0_ - 8.333333333333327e-02*G1_0_1 - 8.333333333333327e-02*G2_1_1 + 2.499999999999998e-01*G3_0_1_0 + 2.499999999999998e-01*G4_0_0_1_0_0 + 2.499999999999998e-01*G5_0_0_1_1_0 + 2.499999999999998e-01*G6_0_1_1_0_0 + 2.499999999999998e-01*G7_0_1_1_1_0;
  block[26] = 8.333333333333316e-02*G0_ - 8.333333333333326e-02*G1_0_1 - 8.333333333333326e-02*G2_1_1 + 2.499999999999998e-01*G3_0_1_1 + 2.499999999999998e-01*G4_0_0_1_0_1 + 2.499999999999998e-01*G5_0_0_1_1_1 + 2.499999999999998e-01*G6_0_1_1_0_1 + 2.499999999999998e-01*G7_0_1_1_1_1;
  block[27] = 0.000000000000000e+00;
  block[28] = 0.000000000000000e+00;
  block[29] = 0.000000000000000e+00;
  block[30] = 0.000000000000000e+00;
  block[31] = 0.000000000000000e+00;
  block[32] = 0.000000000000000e+00;
  block[33] = 0.000000000000000e+00;
  block[34] = 0.000000000000000e+00;
  block[35] = 0.000000000000000e+00;
  block[36] = 0.000000000000000e+00;
  block[37] = 0.000000000000000e+00;
  block[38] = 0.000000000000000e+00;
  block[39] = 8.333333333333318e-02*G8_ + 8.333333333333327e-02*G9_0_0 + 8.333333333333326e-02*G9_0_1 + 8.333333333333327e-02*G10_1_0 + 8.333333333333326e-02*G10_1_1 + 2.499999999999999e-01*G11_0_0_0 + 2.499999999999998e-01*G11_0_0_1 + 2.499999999999998e-01*G11_0_1_0 + 2.499999999999998e-01*G11_0_1_1 + 2.499999999999999e-01*G12_0_0_0_0_0 + 2.499999999999998e-01*G12_0_0_0_0_1 + 2.499999999999998e-01*G12_0_0_1_0_0 + 2.499999999999998e-01*G12_0_0_1_0_1 + 2.499999999999999e-01*G13_0_0_0_1_0 + 2.499999999999998e-01*G13_0_0_0_1_1 + 2.499999999999998e-01*G13_0_0_1_1_0 + 2.499999999999998e-01*G13_0_0_1_1_1 + 2.499999999999999e-01*G14_0_1_0_0_0 + 2.499999999999998e-01*G14_0_1_0_0_1 + 2.499999999999998e-01*G14_0_1_1_0_0 + 2.499999999999998e-01*G14_0_1_1_0_1 + 2.499999999999999e-01*G15_0_1_0_1_0 + 2.499999999999998e-01*G15_0_1_0_1_1 + 2.499999999999998e-01*G15_0_1_1_1_0 + 2.499999999999998e-01*G15_0_1_1_1_1;
  block[40] = 4.166666666666658e-02*G8_ + 8.333333333333329e-02*G9_0_0 + 8.333333333333327e-02*G9_0_1 + 8.333333333333329e-02*G10_1_0 + 8.333333333333327e-02*G10_1_1 - 2.499999999999999e-01*G11_0_0_0 - 2.499999999999998e-01*G11_0_1_0 - 2.499999999999999e-01*G12_0_0_0_0_0 - 2.499999999999998e-01*G12_0_0_1_0_0 - 2.499999999999999e-01*G13_0_0_0_1_0 - 2.499999999999998e-01*G13_0_0_1_1_0 - 2.499999999999999e-01*G14_0_1_0_0_0 - 2.499999999999998e-01*G14_0_1_1_0_0 - 2.499999999999999e-01*G15_0_1_0_1_0 - 2.499999999999998e-01*G15_0_1_1_1_0;
  block[41] = 4.166666666666658e-02*G8_ + 8.333333333333327e-02*G9_0_0 + 8.333333333333326e-02*G9_0_1 + 8.333333333333327e-02*G10_1_0 + 8.333333333333326e-02*G10_1_1 - 2.499999999999998e-01*G11_0_0_1 - 2.499999999999998e-01*G11_0_1_1 - 2.499999999999998e-01*G12_0_0_0_0_1 - 2.499999999999998e-01*G12_0_0_1_0_1 - 2.499999999999998e-01*G13_0_0_0_1_1 - 2.499999999999998e-01*G13_0_0_1_1_1 - 2.499999999999998e-01*G14_0_1_0_0_1 - 2.499999999999998e-01*G14_0_1_1_0_1 - 2.499999999999998e-01*G15_0_1_0_1_1 - 2.499999999999998e-01*G15_0_1_1_1_1;
  block[42] = 0.000000000000000e+00;
  block[43] = 0.000000000000000e+00;
  block[44] = 0.000000000000000e+00;
  block[45] = 0.000000000000000e+00;
  block[46] = 0.000000000000000e+00;
  block[47] = 0.000000000000000e+00;
  block[48] = 0.000000000000000e+00;
  block[49] = 0.000000000000000e+00;
  block[50] = 0.000000000000000e+00;
  block[51] = 4.166666666666658e-02*G8_ - 8.333333333333327e-02*G9_0_0 - 8.333333333333327e-02*G10_1_0 - 2.499999999999999e-01*G11_0_0_0 - 2.499999999999998e-01*G11_0_0_1 - 2.499999999999999e-01*G12_0_0_0_0_0 - 2.499999999999998e-01*G12_0_0_0_0_1 - 2.499999999999999e-01*G13_0_0_0_1_0 - 2.499999999999998e-01*G13_0_0_0_1_1 - 2.499999999999999e-01*G14_0_1_0_0_0 - 2.499999999999998e-01*G14_0_1_0_0_1 - 2.499999999999999e-01*G15_0_1_0_1_0 - 2.499999999999998e-01*G15_0_1_0_1_1;
  block[52] = 8.333333333333318e-02*G8_ - 8.333333333333329e-02*G9_0_0 - 8.333333333333329e-02*G10_1_0 + 2.499999999999999e-01*G11_0_0_0 + 2.499999999999999e-01*G12_0_0_0_0_0 + 2.499999999999999e-01*G13_0_0_0_1_0 + 2.499999999999999e-01*G14_0_1_0_0_0 + 2.499999999999999e-01*G15_0_1_0_1_0;
  block[53] = 4.166666666666659e-02*G8_ - 8.333333333333327e-02*G9_0_0 - 8.333333333333327e-02*G10_1_0 + 2.499999999999998e-01*G11_0_0_1 + 2.499999999999998e-01*G12_0_0_0_0_1 + 2.499999999999998e-01*G13_0_0_0_1_1 + 2.499999999999998e-01*G14_0_1_0_0_1 + 2.499999999999998e-01*G15_0_1_0_1_1;
  block[54] = 0.000000000000000e+00;
  block[55] = 0.000000000000000e+00;
  block[56] = 0.000000000000000e+00;
  block[57] = 0.000000000000000e+00;
  block[58] = 0.000000000000000e+00;
  block[59] = 0.000000000000000e+00;
  block[60] = 0.000000000000000e+00;
  block[61] = 0.000000000000000e+00;
  block[62] = 0.000000000000000e+00;
  block[63] = 4.166666666666658e-02*G8_ - 8.333333333333326e-02*G9_0_1 - 8.333333333333326e-02*G10_1_1 - 2.499999999999998e-01*G11_0_1_0 - 2.499999999999998e-01*G11_0_1_1 - 2.499999999999998e-01*G12_0_0_1_0_0 - 2.499999999999998e-01*G12_0_0_1_0_1 - 2.499999999999998e-01*G13_0_0_1_1_0 - 2.499999999999998e-01*G13_0_0_1_1_1 - 2.499999999999998e-01*G14_0_1_1_0_0 - 2.499999999999998e-01*G14_0_1_1_0_1 - 2.499999999999998e-01*G15_0_1_1_1_0 - 2.499999999999998e-01*G15_0_1_1_1_1;
  block[64] = 4.166666666666659e-02*G8_ - 8.333333333333327e-02*G9_0_1 - 8.333333333333327e-02*G10_1_1 + 2.499999999999998e-01*G11_0_1_0 + 2.499999999999998e-01*G12_0_0_1_0_0 + 2.499999999999998e-01*G13_0_0_1_1_0 + 2.499999999999998e-01*G14_0_1_1_0_0 + 2.499999999999998e-01*G15_0_1_1_1_0;
  block[65] = 8.333333333333316e-02*G8_ - 8.333333333333326e-02*G9_0_1 - 8.333333333333326e-02*G10_1_1 + 2.499999999999998e-01*G11_0_1_1 + 2.499999999999998e-01*G12_0_0_1_0_1 + 2.499999999999998e-01*G13_0_0_1_1_1 + 2.499999999999998e-01*G14_0_1_1_0_1 + 2.499999999999998e-01*G15_0_1_1_1_1;
  block[66] = 0.000000000000000e+00;
  block[67] = 0.000000000000000e+00;
  block[68] = 0.000000000000000e+00;
  block[69] = 0.000000000000000e+00;
  block[70] = 0.000000000000000e+00;
  block[71] = 0.000000000000000e+00;
  block[72] = 0.000000000000000e+00;
  block[73] = 0.000000000000000e+00;
  block[74] = 0.000000000000000e+00;
  block[75] = 0.000000000000000e+00;
  block[76] = 0.000000000000000e+00;
  block[77] = 0.000000000000000e+00;
  block[78] = 8.333333333333318e-02*G16_ + 8.333333333333327e-02*G17_0_0 + 8.333333333333326e-02*G17_0_1 + 8.333333333333327e-02*G18_1_0 + 8.333333333333326e-02*G18_1_1 + 2.499999999999999e-01*G19_0_0_0 + 2.499999999999998e-01*G19_0_0_1 + 2.499999999999998e-01*G19_0_1_0 + 2.499999999999998e-01*G19_0_1_1 + 2.499999999999999e-01*G20_0_0_0_0_0 + 2.499999999999998e-01*G20_0_0_0_0_1 + 2.499999999999998e-01*G20_0_0_1_0_0 + 2.499999999999998e-01*G20_0_0_1_0_1 + 2.499999999999999e-01*G21_0_0_0_1_0 + 2.499999999999998e-01*G21_0_0_0_1_1 + 2.499999999999998e-01*G21_0_0_1_1_0 + 2.499999999999998e-01*G21_0_0_1_1_1 + 2.499999999999999e-01*G22_0_1_0_0_0 + 2.499999999999998e-01*G22_0_1_0_0_1 + 2.499999999999998e-01*G22_0_1_1_0_0 + 2.499999999999998e-01*G22_0_1_1_0_1 + 2.499999999999999e-01*G23_0_1_0_1_0 + 2.499999999999998e-01*G23_0_1_0_1_1 + 2.499999999999998e-01*G23_0_1_1_1_0 + 2.499999999999998e-01*G23_0_1_1_1_1;
  block[79] = 4.166666666666658e-02*G16_ + 8.333333333333329e-02*G17_0_0 + 8.333333333333327e-02*G17_0_1 + 8.333333333333329e-02*G18_1_0 + 8.333333333333327e-02*G18_1_1 - 2.499999999999999e-01*G19_0_0_0 - 2.499999999999998e-01*G19_0_1_0 - 2.499999999999999e-01*G20_0_0_0_0_0 - 2.499999999999998e-01*G20_0_0_1_0_0 - 2.499999999999999e-01*G21_0_0_0_1_0 - 2.499999999999998e-01*G21_0_0_1_1_0 - 2.499999999999999e-01*G22_0_1_0_0_0 - 2.499999999999998e-01*G22_0_1_1_0_0 - 2.499999999999999e-01*G23_0_1_0_1_0 - 2.499999999999998e-01*G23_0_1_1_1_0;
  block[80] = 4.166666666666658e-02*G16_ + 8.333333333333327e-02*G17_0_0 + 8.333333333333326e-02*G17_0_1 + 8.333333333333327e-02*G18_1_0 + 8.333333333333326e-02*G18_1_1 - 2.499999999999998e-01*G19_0_0_1 - 2.499999999999998e-01*G19_0_1_1 - 2.499999999999998e-01*G20_0_0_0_0_1 - 2.499999999999998e-01*G20_0_0_1_0_1 - 2.499999999999998e-01*G21_0_0_0_1_1 - 2.499999999999998e-01*G21_0_0_1_1_1 - 2.499999999999998e-01*G22_0_1_0_0_1 - 2.499999999999998e-01*G22_0_1_1_0_1 - 2.499999999999998e-01*G23_0_1_0_1_1 - 2.499999999999998e-01*G23_0_1_1_1_1;
  block[81] = 0.000000000000000e+00;
  block[82] = 0.000000000000000e+00;
  block[83] = 0.000000000000000e+00;
  block[84] = 0.000000000000000e+00;
  block[85] = 0.000000000000000e+00;
  block[86] = 0.000000000000000e+00;
  block[87] = 0.000000000000000e+00;
  block[88] = 0.000000000000000e+00;
  block[89] = 0.000000000000000e+00;
  block[90] = 4.166666666666658e-02*G16_ - 8.333333333333327e-02*G17_0_0 - 8.333333333333327e-02*G18_1_0 - 2.499999999999999e-01*G19_0_0_0 - 2.499999999999998e-01*G19_0_0_1 - 2.499999999999999e-01*G20_0_0_0_0_0 - 2.499999999999998e-01*G20_0_0_0_0_1 - 2.499999999999999e-01*G21_0_0_0_1_0 - 2.499999999999998e-01*G21_0_0_0_1_1 - 2.499999999999999e-01*G22_0_1_0_0_0 - 2.499999999999998e-01*G22_0_1_0_0_1 - 2.499999999999999e-01*G23_0_1_0_1_0 - 2.499999999999998e-01*G23_0_1_0_1_1;
  block[91] = 8.333333333333318e-02*G16_ - 8.333333333333329e-02*G17_0_0 - 8.333333333333329e-02*G18_1_0 + 2.499999999999999e-01*G19_0_0_0 + 2.499999999999999e-01*G20_0_0_0_0_0 + 2.499999999999999e-01*G21_0_0_0_1_0 + 2.499999999999999e-01*G22_0_1_0_0_0 + 2.499999999999999e-01*G23_0_1_0_1_0;
  block[92] = 4.166666666666659e-02*G16_ - 8.333333333333327e-02*G17_0_0 - 8.333333333333327e-02*G18_1_0 + 2.499999999999998e-01*G19_0_0_1 + 2.499999999999998e-01*G20_0_0_0_0_1 + 2.499999999999998e-01*G21_0_0_0_1_1 + 2.499999999999998e-01*G22_0_1_0_0_1 + 2.499999999999998e-01*G23_0_1_0_1_1;
  block[93] = 0.000000000000000e+00;
  block[94] = 0.000000000000000e+00;
  block[95] = 0.000000000000000e+00;
  block[96] = 0.000000000000000e+00;
  block[97] = 0.000000000000000e+00;
  block[98] = 0.000000000000000e+00;
  block[99] = 0.000000000000000e+00;
  block[100] = 0.000000000000000e+00;
  block[101] = 0.000000000000000e+00;
  block[102] = 4.166666666666658e-02*G16_ - 8.333333333333326e-02*G17_0_1 - 8.333333333333326e-02*G18_1_1 - 2.499999999999998e-01*G19_0_1_0 - 2.499999999999998e-01*G19_0_1_1 - 2.499999999999998e-01*G20_0_0_1_0_0 - 2.499999999999998e-01*G20_0_0_1_0_1 - 2.499999999999998e-01*G21_0_0_1_1_0 - 2.499999999999998e-01*G21_0_0_1_1_1 - 2.499999999999998e-01*G22_0_1_1_0_0 - 2.499999999999998e-01*G22_0_1_1_0_1 - 2.499999999999998e-01*G23_0_1_1_1_0 - 2.499999999999998e-01*G23_0_1_1_1_1;
  block[103] = 4.166666666666659e-02*G16_ - 8.333333333333327e-02*G17_0_1 - 8.333333333333327e-02*G18_1_1 + 2.499999999999998e-01*G19_0_1_0 + 2.499999999999998e-01*G20_0_0_1_0_0 + 2.499999999999998e-01*G21_0_0_1_1_0 + 2.499999999999998e-01*G22_0_1_1_0_0 + 2.499999999999998e-01*G23_0_1_1_1_0;
  block[104] = 8.333333333333316e-02*G16_ - 8.333333333333326e-02*G17_0_1 - 8.333333333333326e-02*G18_1_1 + 2.499999999999998e-01*G19_0_1_1 + 2.499999999999998e-01*G20_0_0_1_0_1 + 2.499999999999998e-01*G21_0_0_1_1_1 + 2.499999999999998e-01*G22_0_1_1_0_1 + 2.499999999999998e-01*G23_0_1_1_1_1;
  block[105] = 0.000000000000000e+00;
  block[106] = 0.000000000000000e+00;
  block[107] = 0.000000000000000e+00;
  block[108] = 0.000000000000000e+00;
  block[109] = 0.000000000000000e+00;
  block[110] = 0.000000000000000e+00;
  block[111] = 0.000000000000000e+00;
  block[112] = 0.000000000000000e+00;
  block[113] = 0.000000000000000e+00;
  block[114] = 0.000000000000000e+00;
  block[115] = 0.000000000000000e+00;
  block[116] = 0.000000000000000e+00;
  block[117] = 8.333333333333318e-02*G24_ + 8.333333333333327e-02*G25_0_0 + 8.333333333333326e-02*G25_0_1 + 8.333333333333327e-02*G26_1_0 + 8.333333333333326e-02*G26_1_1 + 2.499999999999999e-01*G27_0_0_0 + 2.499999999999998e-01*G27_0_0_1 + 2.499999999999998e-01*G27_0_1_0 + 2.499999999999998e-01*G27_0_1_1 + 2.499999999999999e-01*G28_0_0_0_0_0 + 2.499999999999998e-01*G28_0_0_0_0_1 + 2.499999999999998e-01*G28_0_0_1_0_0 + 2.499999999999998e-01*G28_0_0_1_0_1 + 2.499999999999999e-01*G29_0_0_0_1_0 + 2.499999999999998e-01*G29_0_0_0_1_1 + 2.499999999999998e-01*G29_0_0_1_1_0 + 2.499999999999998e-01*G29_0_0_1_1_1 + 2.499999999999999e-01*G30_0_1_0_0_0 + 2.499999999999998e-01*G30_0_1_0_0_1 + 2.499999999999998e-01*G30_0_1_1_0_0 + 2.499999999999998e-01*G30_0_1_1_0_1 + 2.499999999999999e-01*G31_0_1_0_1_0 + 2.499999999999998e-01*G31_0_1_0_1_1 + 2.499999999999998e-01*G31_0_1_1_1_0 + 2.499999999999998e-01*G31_0_1_1_1_1;
  block[118] = 4.166666666666658e-02*G24_ + 8.333333333333329e-02*G25_0_0 + 8.333333333333327e-02*G25_0_1 + 8.333333333333329e-02*G26_1_0 + 8.333333333333327e-02*G26_1_1 - 2.499999999999999e-01*G27_0_0_0 - 2.499999999999998e-01*G27_0_1_0 - 2.499999999999999e-01*G28_0_0_0_0_0 - 2.499999999999998e-01*G28_0_0_1_0_0 - 2.499999999999999e-01*G29_0_0_0_1_0 - 2.499999999999998e-01*G29_0_0_1_1_0 - 2.499999999999999e-01*G30_0_1_0_0_0 - 2.499999999999998e-01*G30_0_1_1_0_0 - 2.499999999999999e-01*G31_0_1_0_1_0 - 2.499999999999998e-01*G31_0_1_1_1_0;
  block[119] = 4.166666666666658e-02*G24_ + 8.333333333333327e-02*G25_0_0 + 8.333333333333326e-02*G25_0_1 + 8.333333333333327e-02*G26_1_0 + 8.333333333333326e-02*G26_1_1 - 2.499999999999998e-01*G27_0_0_1 - 2.499999999999998e-01*G27_0_1_1 - 2.499999999999998e-01*G28_0_0_0_0_1 - 2.499999999999998e-01*G28_0_0_1_0_1 - 2.499999999999998e-01*G29_0_0_0_1_1 - 2.499999999999998e-01*G29_0_0_1_1_1 - 2.499999999999998e-01*G30_0_1_0_0_1 - 2.499999999999998e-01*G30_0_1_1_0_1 - 2.499999999999998e-01*G31_0_1_0_1_1 - 2.499999999999998e-01*G31_0_1_1_1_1;
  block[120] = 0.000000000000000e+00;
  block[121] = 0.000000000000000e+00;
  block[122] = 0.000000000000000e+00;
  block[123] = 0.000000000000000e+00;
  block[124] = 0.000000000000000e+00;
  block[125] = 0.000000000000000e+00;
  block[126] = 0.000000000000000e+00;
  block[127] = 0.000000000000000e+00;
  block[128] = 0.000000000000000e+00;
  block[129] = 4.166666666666658e-02*G24_ - 8.333333333333327e-02*G25_0_0 - 8.333333333333327e-02*G26_1_0 - 2.499999999999999e-01*G27_0_0_0 - 2.499999999999998e-01*G27_0_0_1 - 2.499999999999999e-01*G28_0_0_0_0_0 - 2.499999999999998e-01*G28_0_0_0_0_1 - 2.499999999999999e-01*G29_0_0_0_1_0 - 2.499999999999998e-01*G29_0_0_0_1_1 - 2.499999999999999e-01*G30_0_1_0_0_0 - 2.499999999999998e-01*G30_0_1_0_0_1 - 2.499999999999999e-01*G31_0_1_0_1_0 - 2.499999999999998e-01*G31_0_1_0_1_1;
  block[130] = 8.333333333333318e-02*G24_ - 8.333333333333329e-02*G25_0_0 - 8.333333333333329e-02*G26_1_0 + 2.499999999999999e-01*G27_0_0_0 + 2.499999999999999e-01*G28_0_0_0_0_0 + 2.499999999999999e-01*G29_0_0_0_1_0 + 2.499999999999999e-01*G30_0_1_0_0_0 + 2.499999999999999e-01*G31_0_1_0_1_0;
  block[131] = 4.166666666666659e-02*G24_ - 8.333333333333327e-02*G25_0_0 - 8.333333333333327e-02*G26_1_0 + 2.499999999999998e-01*G27_0_0_1 + 2.499999999999998e-01*G28_0_0_0_0_1 + 2.499999999999998e-01*G29_0_0_0_1_1 + 2.499999999999998e-01*G30_0_1_0_0_1 + 2.499999999999998e-01*G31_0_1_0_1_1;
  block[132] = 0.000000000000000e+00;
  block[133] = 0.000000000000000e+00;
  block[134] = 0.000000000000000e+00;
  block[135] = 0.000000000000000e+00;
  block[136] = 0.000000000000000e+00;
  block[137] = 0.000000000000000e+00;
  block[138] = 0.000000000000000e+00;
  block[139] = 0.000000000000000e+00;
  block[140] = 0.000000000000000e+00;
  block[141] = 4.166666666666658e-02*G24_ - 8.333333333333326e-02*G25_0_1 - 8.333333333333326e-02*G26_1_1 - 2.499999999999998e-01*G27_0_1_0 - 2.499999999999998e-01*G27_0_1_1 - 2.499999999999998e-01*G28_0_0_1_0_0 - 2.499999999999998e-01*G28_0_0_1_0_1 - 2.499999999999998e-01*G29_0_0_1_1_0 - 2.499999999999998e-01*G29_0_0_1_1_1 - 2.499999999999998e-01*G30_0_1_1_0_0 - 2.499999999999998e-01*G30_0_1_1_0_1 - 2.499999999999998e-01*G31_0_1_1_1_0 - 2.499999999999998e-01*G31_0_1_1_1_1;
  block[142] = 4.166666666666659e-02*G24_ - 8.333333333333327e-02*G25_0_1 - 8.333333333333327e-02*G26_1_1 + 2.499999999999998e-01*G27_0_1_0 + 2.499999999999998e-01*G28_0_0_1_0_0 + 2.499999999999998e-01*G29_0_0_1_1_0 + 2.499999999999998e-01*G30_0_1_1_0_0 + 2.499999999999998e-01*G31_0_1_1_1_0;
  block[143] = 8.333333333333316e-02*G24_ - 8.333333333333326e-02*G25_0_1 - 8.333333333333326e-02*G26_1_1 + 2.499999999999998e-01*G27_0_1_1 + 2.499999999999998e-01*G28_0_0_1_0_1 + 2.499999999999998e-01*G29_0_0_1_1_1 + 2.499999999999998e-01*G30_0_1_1_0_1 + 2.499999999999998e-01*G31_0_1_1_1_1;
}

// No contribution from the boundary
bool BilinearForm::boundary_contribution() const { return false; }

void BilinearForm::eval(real block[], const AffineMap& map, real det, unsigned int facet) const {}

// No contribution from interior boundaries
bool BilinearForm::interior_boundary_contribution() const { return false; }

void BilinearForm::eval(real block[], const AffineMap& map0, const AffineMap& map1, real det, unsigned int facet0, unsigned int facet1, unsigned int alignment) const {}

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class LinearForm : public dolfin::LinearForm
{
public:

  class TestElement;

  class FunctionElement_0;

  class FunctionElement_1;

  class FunctionElement_2;

  class FunctionElement_3;

  class FunctionElement_4;

  class FunctionElement_5;

  class FunctionElement_6;

  LinearForm(Function& w0, Function& w1, Function& w2, Function& w3, Function& w4, Function& w5, Function& w6, const real& c0);
  

  bool interior_contribution() const;

  void eval(real block[], const AffineMap& map, real det) const;

  bool boundary_contribution() const;

  void eval(real block[], const AffineMap& map, real det, unsigned int facet) const;

  bool interior_boundary_contribution() const;

  void eval(real block[], const AffineMap& map0, const AffineMap& map1, real det, unsigned int facet0, unsigned int facet1, unsigned int alignment) const;

private:

  const real& c0;

};

class LinearForm::TestElement : public dolfin::FiniteElement
{
public:

  TestElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 4;

    subelements = new FiniteElement* [3];
    subelements[0] = new SubElement_0();
    subelements[1] = new SubElement_1();
    subelements[2] = new SubElement_2();
  }

  ~TestElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 12;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 3;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(0)[0];
    nodes[4] = offset + cell.entities(0)[1];
    nodes[5] = offset + cell.entities(0)[2];
    offset = offset + mesh.topology().size(0);
    nodes[6] = offset + cell.entities(0)[0];
    nodes[7] = offset + cell.entities(0)[1];
    nodes[8] = offset + cell.entities(0)[2];
    offset = offset + mesh.topology().size(0);
    nodes[9] = offset + cell.entities(0)[0];
    nodes[10] = offset + cell.entities(0)[1];
    nodes[11] = offset + cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[4] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[6] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[7] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[8] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[3] = 1;
    components[4] = 1;
    components[5] = 1;
    components[6] = 2;
    components[7] = 2;
    components[8] = 2;
    points[9] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[10] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[11] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[9] = 3;
    components[10] = 3;
    components[11] = 3;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
    offset = offset + mesh.topology().size(0);
    vertex_nodes[2] = offset + vertex;
    offset = offset + mesh.topology().size(0);
    vertex_nodes[3] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *subelements[i];
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *subelements[i];
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("mixed");
    return s;
  }
  
private:

class SubElement_0 : public dolfin::FiniteElement
{
public:

  SubElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 3;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class SubElement_1 : public dolfin::FiniteElement
{
public:

  SubElement_1() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 2;

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_1()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 6;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(0)[0];
    nodes[4] = offset + cell.entities(0)[1];
    nodes[5] = offset + cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[4] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 1;
    components[4] = 1;
    components[5] = 1;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "triangle", 1, 2);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class SubElement_2 : public dolfin::FiniteElement
{
public:

  SubElement_2() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_2()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 3;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class LinearForm::FunctionElement_0 : public dolfin::FiniteElement
{
public:

  FunctionElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 4;

    subelements = new FiniteElement* [3];
    subelements[0] = new SubElement_0();
    subelements[1] = new SubElement_1();
    subelements[2] = new SubElement_2();
  }

  ~FunctionElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 12;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 3;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(0)[0];
    nodes[4] = offset + cell.entities(0)[1];
    nodes[5] = offset + cell.entities(0)[2];
    offset = offset + mesh.topology().size(0);
    nodes[6] = offset + cell.entities(0)[0];
    nodes[7] = offset + cell.entities(0)[1];
    nodes[8] = offset + cell.entities(0)[2];
    offset = offset + mesh.topology().size(0);
    nodes[9] = offset + cell.entities(0)[0];
    nodes[10] = offset + cell.entities(0)[1];
    nodes[11] = offset + cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[4] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[6] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[7] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[8] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[3] = 1;
    components[4] = 1;
    components[5] = 1;
    components[6] = 2;
    components[7] = 2;
    components[8] = 2;
    points[9] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[10] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[11] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[9] = 3;
    components[10] = 3;
    components[11] = 3;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
    offset = offset + mesh.topology().size(0);
    vertex_nodes[2] = offset + vertex;
    offset = offset + mesh.topology().size(0);
    vertex_nodes[3] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *subelements[i];
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *subelements[i];
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("mixed");
    return s;
  }
  
private:

class SubElement_0 : public dolfin::FiniteElement
{
public:

  SubElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 3;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class SubElement_1 : public dolfin::FiniteElement
{
public:

  SubElement_1() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 2;

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_1()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 6;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(0)[0];
    nodes[4] = offset + cell.entities(0)[1];
    nodes[5] = offset + cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[4] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 1;
    components[4] = 1;
    components[5] = 1;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "triangle", 1, 2);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class SubElement_2 : public dolfin::FiniteElement
{
public:

  SubElement_2() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_2()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 3;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class LinearForm::FunctionElement_1 : public dolfin::FiniteElement
{
public:

  FunctionElement_1() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_1()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 3;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class LinearForm::FunctionElement_2 : public dolfin::FiniteElement
{
public:

  FunctionElement_2() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 2;

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_2()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 6;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(0)[0];
    nodes[4] = offset + cell.entities(0)[1];
    nodes[5] = offset + cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[4] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 1;
    components[4] = 1;
    components[5] = 1;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "triangle", 1, 2);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class LinearForm::FunctionElement_3 : public dolfin::FiniteElement
{
public:

  FunctionElement_3() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_3()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 1;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.index();
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(3.333333333333334e-01, 3.333333333333334e-01);
    components[0] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Discontinuous Lagrange", "triangle", 0);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class LinearForm::FunctionElement_4 : public dolfin::FiniteElement
{
public:

  FunctionElement_4() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_4()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 1;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.index();
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(3.333333333333334e-01, 3.333333333333334e-01);
    components[0] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Discontinuous Lagrange", "triangle", 0);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class LinearForm::FunctionElement_5 : public dolfin::FiniteElement
{
public:

  FunctionElement_5() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_5()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 1;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.index();
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(3.333333333333334e-01, 3.333333333333334e-01);
    components[0] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Discontinuous Lagrange", "triangle", 0);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class LinearForm::FunctionElement_6 : public dolfin::FiniteElement
{
public:

  FunctionElement_6() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_6()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 1;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.index();
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(3.333333333333334e-01, 3.333333333333334e-01);
    components[0] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Discontinuous Lagrange", "triangle", 0);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

LinearForm::LinearForm(Function& w0, Function& w1, Function& w2, Function& w3, Function& w4, Function& w5, Function& w6, const real& c0) : dolfin::LinearForm(7), c0(c0)
{
  // Create finite element for test space
  _test = new TestElement();

  // Add functions
  initFunction(0, w0, new FunctionElement_0());
  initFunction(1, w1, new FunctionElement_1());
  initFunction(2, w2, new FunctionElement_2());
  initFunction(3, w3, new FunctionElement_3());
  initFunction(4, w4, new FunctionElement_4());
  initFunction(5, w5, new FunctionElement_5());
  initFunction(6, w6, new FunctionElement_6());
}

// Contribution from the interior
bool LinearForm::interior_contribution() const { return true; }

void LinearForm::eval(real block[], const AffineMap& map, real det) const
{
  // Compute coefficients
  const real c0_0 = c[0][0];
  const real c0_1 = c[0][1];
  const real c0_2 = c[0][2];
  const real c0_3 = c[0][3];
  const real c0_4 = c[0][4];
  const real c0_5 = c[0][5];
  const real c0_6 = c[0][6];
  const real c0_7 = c[0][7];
  const real c0_8 = c[0][8];
  const real c0_9 = c[0][9];
  const real c0_10 = c[0][10];
  const real c0_11 = c[0][11];
  const real c1_0 = c[1][0];
  const real c1_1 = c[1][1];
  const real c1_2 = c[1][2];
  const real c2_0 = 3.333333333333333e-01*c[2][0] + 3.333333333333334e-01*c[2][1] + 3.333333333333333e-01*c[2][2];
  const real c2_1 = 3.333333333333333e-01*c[2][3] + 3.333333333333334e-01*c[2][4] + 3.333333333333333e-01*c[2][5];
  const real c3_0 = c[3][0];
  const real c4_0 = c[4][0];
  const real c5_0 = c[5][0];
  const real c6_0 = c[6][0];

  // Compute geometry tensors
  const real G0_0 = det*c0_0;
  const real G0_1 = det*c0_1;
  const real G0_2 = det*c0_2;
  const real G1_0_0_0 = det*c0*c2_0*c0_0*map.g00;
  const real G1_0_0_1 = det*c0*c2_0*c0_1*map.g00;
  const real G1_0_0_2 = det*c0*c2_0*c0_2*map.g00;
  const real G1_0_1_0 = det*c0*c2_0*c0_0*map.g10;
  const real G1_0_1_1 = det*c0*c2_0*c0_1*map.g10;
  const real G1_0_1_2 = det*c0*c2_0*c0_2*map.g10;
  const real G2_1_0_0 = det*c0*c2_1*c0_0*map.g01;
  const real G2_1_0_1 = det*c0*c2_1*c0_1*map.g01;
  const real G2_1_0_2 = det*c0*c2_1*c0_2*map.g01;
  const real G2_1_1_0 = det*c0*c2_1*c0_0*map.g11;
  const real G2_1_1_1 = det*c0*c2_1*c0_1*map.g11;
  const real G2_1_1_2 = det*c0*c2_1*c0_2*map.g11;
  const real G3_0_0_0_0 = det*c0*c4_0*c0_0*map.g00*map.g00 + det*c0*c4_0*c0_0*map.g01*map.g01;
  const real G3_0_0_0_1 = det*c0*c4_0*c0_0*map.g00*map.g10 + det*c0*c4_0*c0_0*map.g01*map.g11;
  const real G3_0_0_1_0 = det*c0*c4_0*c0_0*map.g10*map.g00 + det*c0*c4_0*c0_0*map.g11*map.g01;
  const real G3_0_0_1_1 = det*c0*c4_0*c0_0*map.g10*map.g10 + det*c0*c4_0*c0_0*map.g11*map.g11;
  const real G3_0_1_0_0 = det*c0*c4_0*c0_1*map.g00*map.g00 + det*c0*c4_0*c0_1*map.g01*map.g01;
  const real G3_0_1_1_0 = det*c0*c4_0*c0_1*map.g10*map.g00 + det*c0*c4_0*c0_1*map.g11*map.g01;
  const real G3_0_2_0_1 = det*c0*c4_0*c0_2*map.g00*map.g10 + det*c0*c4_0*c0_2*map.g01*map.g11;
  const real G3_0_2_1_1 = det*c0*c4_0*c0_2*map.g10*map.g10 + det*c0*c4_0*c0_2*map.g11*map.g11;
  const real G4_0_0_0_0_0_0 = det*c0*c3_0*c2_0*c2_0*c0_0*map.g00*map.g00;
  const real G4_0_0_0_0_0_1 = det*c0*c3_0*c2_0*c2_0*c0_0*map.g00*map.g10;
  const real G4_0_0_0_0_1_0 = det*c0*c3_0*c2_0*c2_0*c0_1*map.g00*map.g00;
  const real G4_0_0_0_0_2_1 = det*c0*c3_0*c2_0*c2_0*c0_2*map.g00*map.g10;
  const real G4_0_0_1_0_0_0 = det*c0*c3_0*c2_0*c2_0*c0_0*map.g10*map.g00;
  const real G4_0_0_1_0_0_1 = det*c0*c3_0*c2_0*c2_0*c0_0*map.g10*map.g10;
  const real G4_0_0_1_0_1_0 = det*c0*c3_0*c2_0*c2_0*c0_1*map.g10*map.g00;
  const real G4_0_0_1_0_2_1 = det*c0*c3_0*c2_0*c2_0*c0_2*map.g10*map.g10;
  const real G5_0_0_0_1_0_0 = det*c0*c3_0*c2_0*c2_1*c0_0*map.g00*map.g01;
  const real G5_0_0_0_1_0_1 = det*c0*c3_0*c2_0*c2_1*c0_0*map.g00*map.g11;
  const real G5_0_0_0_1_1_0 = det*c0*c3_0*c2_0*c2_1*c0_1*map.g00*map.g01;
  const real G5_0_0_0_1_2_1 = det*c0*c3_0*c2_0*c2_1*c0_2*map.g00*map.g11;
  const real G5_0_0_1_1_0_0 = det*c0*c3_0*c2_0*c2_1*c0_0*map.g10*map.g01;
  const real G5_0_0_1_1_0_1 = det*c0*c3_0*c2_0*c2_1*c0_0*map.g10*map.g11;
  const real G5_0_0_1_1_1_0 = det*c0*c3_0*c2_0*c2_1*c0_1*map.g10*map.g01;
  const real G5_0_0_1_1_2_1 = det*c0*c3_0*c2_0*c2_1*c0_2*map.g10*map.g11;
  const real G6_0_1_0_0_0_0 = det*c0*c3_0*c2_1*c2_0*c0_0*map.g01*map.g00;
  const real G6_0_1_0_0_0_1 = det*c0*c3_0*c2_1*c2_0*c0_0*map.g01*map.g10;
  const real G6_0_1_0_0_1_0 = det*c0*c3_0*c2_1*c2_0*c0_1*map.g01*map.g00;
  const real G6_0_1_0_0_2_1 = det*c0*c3_0*c2_1*c2_0*c0_2*map.g01*map.g10;
  const real G6_0_1_1_0_0_0 = det*c0*c3_0*c2_1*c2_0*c0_0*map.g11*map.g00;
  const real G6_0_1_1_0_0_1 = det*c0*c3_0*c2_1*c2_0*c0_0*map.g11*map.g10;
  const real G6_0_1_1_0_1_0 = det*c0*c3_0*c2_1*c2_0*c0_1*map.g11*map.g00;
  const real G6_0_1_1_0_2_1 = det*c0*c3_0*c2_1*c2_0*c0_2*map.g11*map.g10;
  const real G7_0_1_0_1_0_0 = det*c0*c3_0*c2_1*c2_1*c0_0*map.g01*map.g01;
  const real G7_0_1_0_1_0_1 = det*c0*c3_0*c2_1*c2_1*c0_0*map.g01*map.g11;
  const real G7_0_1_0_1_1_0 = det*c0*c3_0*c2_1*c2_1*c0_1*map.g01*map.g01;
  const real G7_0_1_0_1_2_1 = det*c0*c3_0*c2_1*c2_1*c0_2*map.g01*map.g11;
  const real G7_0_1_1_1_0_0 = det*c0*c3_0*c2_1*c2_1*c0_0*map.g11*map.g01;
  const real G7_0_1_1_1_0_1 = det*c0*c3_0*c2_1*c2_1*c0_0*map.g11*map.g11;
  const real G7_0_1_1_1_1_0 = det*c0*c3_0*c2_1*c2_1*c0_1*map.g11*map.g01;
  const real G7_0_1_1_1_2_1 = det*c0*c3_0*c2_1*c2_1*c0_2*map.g11*map.g11;
  const real G8_3 = det*c0_3;
  const real G8_4 = det*c0_4;
  const real G8_5 = det*c0_5;
  const real G9_0_0_3 = det*c0*c2_0*c0_3*map.g00;
  const real G9_0_0_4 = det*c0*c2_0*c0_4*map.g00;
  const real G9_0_0_5 = det*c0*c2_0*c0_5*map.g00;
  const real G9_0_1_3 = det*c0*c2_0*c0_3*map.g10;
  const real G9_0_1_4 = det*c0*c2_0*c0_4*map.g10;
  const real G9_0_1_5 = det*c0*c2_0*c0_5*map.g10;
  const real G10_1_0_3 = det*c0*c2_1*c0_3*map.g01;
  const real G10_1_0_4 = det*c0*c2_1*c0_4*map.g01;
  const real G10_1_0_5 = det*c0*c2_1*c0_5*map.g01;
  const real G10_1_1_3 = det*c0*c2_1*c0_3*map.g11;
  const real G10_1_1_4 = det*c0*c2_1*c0_4*map.g11;
  const real G10_1_1_5 = det*c0*c2_1*c0_5*map.g11;
  const real G11_0_3_0_0 = det*c0*c5_0*c0_3*map.g00*map.g00 + det*c0*c5_0*c0_3*map.g01*map.g01;
  const real G11_0_3_0_1 = det*c0*c5_0*c0_3*map.g00*map.g10 + det*c0*c5_0*c0_3*map.g01*map.g11;
  const real G11_0_3_1_0 = det*c0*c5_0*c0_3*map.g10*map.g00 + det*c0*c5_0*c0_3*map.g11*map.g01;
  const real G11_0_3_1_1 = det*c0*c5_0*c0_3*map.g10*map.g10 + det*c0*c5_0*c0_3*map.g11*map.g11;
  const real G11_0_4_0_0 = det*c0*c5_0*c0_4*map.g00*map.g00 + det*c0*c5_0*c0_4*map.g01*map.g01;
  const real G11_0_4_1_0 = det*c0*c5_0*c0_4*map.g10*map.g00 + det*c0*c5_0*c0_4*map.g11*map.g01;
  const real G11_0_5_0_1 = det*c0*c5_0*c0_5*map.g00*map.g10 + det*c0*c5_0*c0_5*map.g01*map.g11;
  const real G11_0_5_1_1 = det*c0*c5_0*c0_5*map.g10*map.g10 + det*c0*c5_0*c0_5*map.g11*map.g11;
  const real G12_0_0 = det*c0*c1_0*map.g00;
  const real G12_0_1 = det*c0*c1_1*map.g00;
  const real G12_0_2 = det*c0*c1_2*map.g00;
  const real G12_1_0 = det*c0*c1_0*map.g10;
  const real G12_1_1 = det*c0*c1_1*map.g10;
  const real G12_1_2 = det*c0*c1_2*map.g10;
  const real G13_0_0_0_0_3_0 = det*c0*c3_0*c2_0*c2_0*c0_3*map.g00*map.g00;
  const real G13_0_0_0_0_3_1 = det*c0*c3_0*c2_0*c2_0*c0_3*map.g00*map.g10;
  const real G13_0_0_0_0_4_0 = det*c0*c3_0*c2_0*c2_0*c0_4*map.g00*map.g00;
  const real G13_0_0_0_0_5_1 = det*c0*c3_0*c2_0*c2_0*c0_5*map.g00*map.g10;
  const real G13_0_0_1_0_3_0 = det*c0*c3_0*c2_0*c2_0*c0_3*map.g10*map.g00;
  const real G13_0_0_1_0_3_1 = det*c0*c3_0*c2_0*c2_0*c0_3*map.g10*map.g10;
  const real G13_0_0_1_0_4_0 = det*c0*c3_0*c2_0*c2_0*c0_4*map.g10*map.g00;
  const real G13_0_0_1_0_5_1 = det*c0*c3_0*c2_0*c2_0*c0_5*map.g10*map.g10;
  const real G14_0_0_0_1_3_0 = det*c0*c3_0*c2_0*c2_1*c0_3*map.g00*map.g01;
  const real G14_0_0_0_1_3_1 = det*c0*c3_0*c2_0*c2_1*c0_3*map.g00*map.g11;
  const real G14_0_0_0_1_4_0 = det*c0*c3_0*c2_0*c2_1*c0_4*map.g00*map.g01;
  const real G14_0_0_0_1_5_1 = det*c0*c3_0*c2_0*c2_1*c0_5*map.g00*map.g11;
  const real G14_0_0_1_1_3_0 = det*c0*c3_0*c2_0*c2_1*c0_3*map.g10*map.g01;
  const real G14_0_0_1_1_3_1 = det*c0*c3_0*c2_0*c2_1*c0_3*map.g10*map.g11;
  const real G14_0_0_1_1_4_0 = det*c0*c3_0*c2_0*c2_1*c0_4*map.g10*map.g01;
  const real G14_0_0_1_1_5_1 = det*c0*c3_0*c2_0*c2_1*c0_5*map.g10*map.g11;
  const real G15_0_1_0_0_3_0 = det*c0*c3_0*c2_1*c2_0*c0_3*map.g01*map.g00;
  const real G15_0_1_0_0_3_1 = det*c0*c3_0*c2_1*c2_0*c0_3*map.g01*map.g10;
  const real G15_0_1_0_0_4_0 = det*c0*c3_0*c2_1*c2_0*c0_4*map.g01*map.g00;
  const real G15_0_1_0_0_5_1 = det*c0*c3_0*c2_1*c2_0*c0_5*map.g01*map.g10;
  const real G15_0_1_1_0_3_0 = det*c0*c3_0*c2_1*c2_0*c0_3*map.g11*map.g00;
  const real G15_0_1_1_0_3_1 = det*c0*c3_0*c2_1*c2_0*c0_3*map.g11*map.g10;
  const real G15_0_1_1_0_4_0 = det*c0*c3_0*c2_1*c2_0*c0_4*map.g11*map.g00;
  const real G15_0_1_1_0_5_1 = det*c0*c3_0*c2_1*c2_0*c0_5*map.g11*map.g10;
  const real G16_0_1_0_1_3_0 = det*c0*c3_0*c2_1*c2_1*c0_3*map.g01*map.g01;
  const real G16_0_1_0_1_3_1 = det*c0*c3_0*c2_1*c2_1*c0_3*map.g01*map.g11;
  const real G16_0_1_0_1_4_0 = det*c0*c3_0*c2_1*c2_1*c0_4*map.g01*map.g01;
  const real G16_0_1_0_1_5_1 = det*c0*c3_0*c2_1*c2_1*c0_5*map.g01*map.g11;
  const real G16_0_1_1_1_3_0 = det*c0*c3_0*c2_1*c2_1*c0_3*map.g11*map.g01;
  const real G16_0_1_1_1_3_1 = det*c0*c3_0*c2_1*c2_1*c0_3*map.g11*map.g11;
  const real G16_0_1_1_1_4_0 = det*c0*c3_0*c2_1*c2_1*c0_4*map.g11*map.g01;
  const real G16_0_1_1_1_5_1 = det*c0*c3_0*c2_1*c2_1*c0_5*map.g11*map.g11;
  const real G17_6 = det*c0_6;
  const real G17_7 = det*c0_7;
  const real G17_8 = det*c0_8;
  const real G18_0_0_6 = det*c0*c2_0*c0_6*map.g00;
  const real G18_0_0_7 = det*c0*c2_0*c0_7*map.g00;
  const real G18_0_0_8 = det*c0*c2_0*c0_8*map.g00;
  const real G18_0_1_6 = det*c0*c2_0*c0_6*map.g10;
  const real G18_0_1_7 = det*c0*c2_0*c0_7*map.g10;
  const real G18_0_1_8 = det*c0*c2_0*c0_8*map.g10;
  const real G19_1_0_6 = det*c0*c2_1*c0_6*map.g01;
  const real G19_1_0_7 = det*c0*c2_1*c0_7*map.g01;
  const real G19_1_0_8 = det*c0*c2_1*c0_8*map.g01;
  const real G19_1_1_6 = det*c0*c2_1*c0_6*map.g11;
  const real G19_1_1_7 = det*c0*c2_1*c0_7*map.g11;
  const real G19_1_1_8 = det*c0*c2_1*c0_8*map.g11;
  const real G20_0_6_0_0 = det*c0*c5_0*c0_6*map.g00*map.g00 + det*c0*c5_0*c0_6*map.g01*map.g01;
  const real G20_0_6_0_1 = det*c0*c5_0*c0_6*map.g00*map.g10 + det*c0*c5_0*c0_6*map.g01*map.g11;
  const real G20_0_6_1_0 = det*c0*c5_0*c0_6*map.g10*map.g00 + det*c0*c5_0*c0_6*map.g11*map.g01;
  const real G20_0_6_1_1 = det*c0*c5_0*c0_6*map.g10*map.g10 + det*c0*c5_0*c0_6*map.g11*map.g11;
  const real G20_0_7_0_0 = det*c0*c5_0*c0_7*map.g00*map.g00 + det*c0*c5_0*c0_7*map.g01*map.g01;
  const real G20_0_7_1_0 = det*c0*c5_0*c0_7*map.g10*map.g00 + det*c0*c5_0*c0_7*map.g11*map.g01;
  const real G20_0_8_0_1 = det*c0*c5_0*c0_8*map.g00*map.g10 + det*c0*c5_0*c0_8*map.g01*map.g11;
  const real G20_0_8_1_1 = det*c0*c5_0*c0_8*map.g10*map.g10 + det*c0*c5_0*c0_8*map.g11*map.g11;
  const real G21_0_0 = det*c0*c1_0*map.g01;
  const real G21_0_1 = det*c0*c1_1*map.g01;
  const real G21_0_2 = det*c0*c1_2*map.g01;
  const real G21_1_0 = det*c0*c1_0*map.g11;
  const real G21_1_1 = det*c0*c1_1*map.g11;
  const real G21_1_2 = det*c0*c1_2*map.g11;
  const real G22_0_0_0_0_6_0 = det*c0*c3_0*c2_0*c2_0*c0_6*map.g00*map.g00;
  const real G22_0_0_0_0_6_1 = det*c0*c3_0*c2_0*c2_0*c0_6*map.g00*map.g10;
  const real G22_0_0_0_0_7_0 = det*c0*c3_0*c2_0*c2_0*c0_7*map.g00*map.g00;
  const real G22_0_0_0_0_8_1 = det*c0*c3_0*c2_0*c2_0*c0_8*map.g00*map.g10;
  const real G22_0_0_1_0_6_0 = det*c0*c3_0*c2_0*c2_0*c0_6*map.g10*map.g00;
  const real G22_0_0_1_0_6_1 = det*c0*c3_0*c2_0*c2_0*c0_6*map.g10*map.g10;
  const real G22_0_0_1_0_7_0 = det*c0*c3_0*c2_0*c2_0*c0_7*map.g10*map.g00;
  const real G22_0_0_1_0_8_1 = det*c0*c3_0*c2_0*c2_0*c0_8*map.g10*map.g10;
  const real G23_0_0_0_1_6_0 = det*c0*c3_0*c2_0*c2_1*c0_6*map.g00*map.g01;
  const real G23_0_0_0_1_6_1 = det*c0*c3_0*c2_0*c2_1*c0_6*map.g00*map.g11;
  const real G23_0_0_0_1_7_0 = det*c0*c3_0*c2_0*c2_1*c0_7*map.g00*map.g01;
  const real G23_0_0_0_1_8_1 = det*c0*c3_0*c2_0*c2_1*c0_8*map.g00*map.g11;
  const real G23_0_0_1_1_6_0 = det*c0*c3_0*c2_0*c2_1*c0_6*map.g10*map.g01;
  const real G23_0_0_1_1_6_1 = det*c0*c3_0*c2_0*c2_1*c0_6*map.g10*map.g11;
  const real G23_0_0_1_1_7_0 = det*c0*c3_0*c2_0*c2_1*c0_7*map.g10*map.g01;
  const real G23_0_0_1_1_8_1 = det*c0*c3_0*c2_0*c2_1*c0_8*map.g10*map.g11;
  const real G24_0_1_0_0_6_0 = det*c0*c3_0*c2_1*c2_0*c0_6*map.g01*map.g00;
  const real G24_0_1_0_0_6_1 = det*c0*c3_0*c2_1*c2_0*c0_6*map.g01*map.g10;
  const real G24_0_1_0_0_7_0 = det*c0*c3_0*c2_1*c2_0*c0_7*map.g01*map.g00;
  const real G24_0_1_0_0_8_1 = det*c0*c3_0*c2_1*c2_0*c0_8*map.g01*map.g10;
  const real G24_0_1_1_0_6_0 = det*c0*c3_0*c2_1*c2_0*c0_6*map.g11*map.g00;
  const real G24_0_1_1_0_6_1 = det*c0*c3_0*c2_1*c2_0*c0_6*map.g11*map.g10;
  const real G24_0_1_1_0_7_0 = det*c0*c3_0*c2_1*c2_0*c0_7*map.g11*map.g00;
  const real G24_0_1_1_0_8_1 = det*c0*c3_0*c2_1*c2_0*c0_8*map.g11*map.g10;
  const real G25_0_1_0_1_6_0 = det*c0*c3_0*c2_1*c2_1*c0_6*map.g01*map.g01;
  const real G25_0_1_0_1_6_1 = det*c0*c3_0*c2_1*c2_1*c0_6*map.g01*map.g11;
  const real G25_0_1_0_1_7_0 = det*c0*c3_0*c2_1*c2_1*c0_7*map.g01*map.g01;
  const real G25_0_1_0_1_8_1 = det*c0*c3_0*c2_1*c2_1*c0_8*map.g01*map.g11;
  const real G25_0_1_1_1_6_0 = det*c0*c3_0*c2_1*c2_1*c0_6*map.g11*map.g01;
  const real G25_0_1_1_1_6_1 = det*c0*c3_0*c2_1*c2_1*c0_6*map.g11*map.g11;
  const real G25_0_1_1_1_7_0 = det*c0*c3_0*c2_1*c2_1*c0_7*map.g11*map.g01;
  const real G25_0_1_1_1_8_1 = det*c0*c3_0*c2_1*c2_1*c0_8*map.g11*map.g11;
  const real G26_9 = det*c0_9;
  const real G26_10 = det*c0_10;
  const real G26_11 = det*c0_11;
  const real G27_0_0_9 = det*c0*c2_0*c0_9*map.g00;
  const real G27_0_0_10 = det*c0*c2_0*c0_10*map.g00;
  const real G27_0_0_11 = det*c0*c2_0*c0_11*map.g00;
  const real G27_0_1_9 = det*c0*c2_0*c0_9*map.g10;
  const real G27_0_1_10 = det*c0*c2_0*c0_10*map.g10;
  const real G27_0_1_11 = det*c0*c2_0*c0_11*map.g10;
  const real G28_1_0_9 = det*c0*c2_1*c0_9*map.g01;
  const real G28_1_0_10 = det*c0*c2_1*c0_10*map.g01;
  const real G28_1_0_11 = det*c0*c2_1*c0_11*map.g01;
  const real G28_1_1_9 = det*c0*c2_1*c0_9*map.g11;
  const real G28_1_1_10 = det*c0*c2_1*c0_10*map.g11;
  const real G28_1_1_11 = det*c0*c2_1*c0_11*map.g11;
  const real G29_0_9_0_0 = det*c0*c6_0*c0_9*map.g00*map.g00 + det*c0*c6_0*c0_9*map.g01*map.g01;
  const real G29_0_9_0_1 = det*c0*c6_0*c0_9*map.g00*map.g10 + det*c0*c6_0*c0_9*map.g01*map.g11;
  const real G29_0_9_1_0 = det*c0*c6_0*c0_9*map.g10*map.g00 + det*c0*c6_0*c0_9*map.g11*map.g01;
  const real G29_0_9_1_1 = det*c0*c6_0*c0_9*map.g10*map.g10 + det*c0*c6_0*c0_9*map.g11*map.g11;
  const real G29_0_10_0_0 = det*c0*c6_0*c0_10*map.g00*map.g00 + det*c0*c6_0*c0_10*map.g01*map.g01;
  const real G29_0_10_1_0 = det*c0*c6_0*c0_10*map.g10*map.g00 + det*c0*c6_0*c0_10*map.g11*map.g01;
  const real G29_0_11_0_1 = det*c0*c6_0*c0_11*map.g00*map.g10 + det*c0*c6_0*c0_11*map.g01*map.g11;
  const real G29_0_11_1_1 = det*c0*c6_0*c0_11*map.g10*map.g10 + det*c0*c6_0*c0_11*map.g11*map.g11;
  const real G30_0_0_0 = det*c0*c2_0*c1_0*map.g00;
  const real G30_0_0_1 = det*c0*c2_0*c1_1*map.g00;
  const real G30_0_0_2 = det*c0*c2_0*c1_2*map.g00;
  const real G30_0_1_0 = det*c0*c2_0*c1_0*map.g10;
  const real G30_0_1_1 = det*c0*c2_0*c1_1*map.g10;
  const real G30_0_1_2 = det*c0*c2_0*c1_2*map.g10;
  const real G31_1_0_0 = det*c0*c2_1*c1_0*map.g01;
  const real G31_1_0_1 = det*c0*c2_1*c1_1*map.g01;
  const real G31_1_0_2 = det*c0*c2_1*c1_2*map.g01;
  const real G31_1_1_0 = det*c0*c2_1*c1_0*map.g11;
  const real G31_1_1_1 = det*c0*c2_1*c1_1*map.g11;
  const real G31_1_1_2 = det*c0*c2_1*c1_2*map.g11;
  const real G32_0_0_0_0_9_0 = det*c0*c3_0*c2_0*c2_0*c0_9*map.g00*map.g00;
  const real G32_0_0_0_0_9_1 = det*c0*c3_0*c2_0*c2_0*c0_9*map.g00*map.g10;
  const real G32_0_0_0_0_10_0 = det*c0*c3_0*c2_0*c2_0*c0_10*map.g00*map.g00;
  const real G32_0_0_0_0_11_1 = det*c0*c3_0*c2_0*c2_0*c0_11*map.g00*map.g10;
  const real G32_0_0_1_0_9_0 = det*c0*c3_0*c2_0*c2_0*c0_9*map.g10*map.g00;
  const real G32_0_0_1_0_9_1 = det*c0*c3_0*c2_0*c2_0*c0_9*map.g10*map.g10;
  const real G32_0_0_1_0_10_0 = det*c0*c3_0*c2_0*c2_0*c0_10*map.g10*map.g00;
  const real G32_0_0_1_0_11_1 = det*c0*c3_0*c2_0*c2_0*c0_11*map.g10*map.g10;
  const real G33_0_0_0_1_9_0 = det*c0*c3_0*c2_0*c2_1*c0_9*map.g00*map.g01;
  const real G33_0_0_0_1_9_1 = det*c0*c3_0*c2_0*c2_1*c0_9*map.g00*map.g11;
  const real G33_0_0_0_1_10_0 = det*c0*c3_0*c2_0*c2_1*c0_10*map.g00*map.g01;
  const real G33_0_0_0_1_11_1 = det*c0*c3_0*c2_0*c2_1*c0_11*map.g00*map.g11;
  const real G33_0_0_1_1_9_0 = det*c0*c3_0*c2_0*c2_1*c0_9*map.g10*map.g01;
  const real G33_0_0_1_1_9_1 = det*c0*c3_0*c2_0*c2_1*c0_9*map.g10*map.g11;
  const real G33_0_0_1_1_10_0 = det*c0*c3_0*c2_0*c2_1*c0_10*map.g10*map.g01;
  const real G33_0_0_1_1_11_1 = det*c0*c3_0*c2_0*c2_1*c0_11*map.g10*map.g11;
  const real G34_0_1_0_0_9_0 = det*c0*c3_0*c2_1*c2_0*c0_9*map.g01*map.g00;
  const real G34_0_1_0_0_9_1 = det*c0*c3_0*c2_1*c2_0*c0_9*map.g01*map.g10;
  const real G34_0_1_0_0_10_0 = det*c0*c3_0*c2_1*c2_0*c0_10*map.g01*map.g00;
  const real G34_0_1_0_0_11_1 = det*c0*c3_0*c2_1*c2_0*c0_11*map.g01*map.g10;
  const real G34_0_1_1_0_9_0 = det*c0*c3_0*c2_1*c2_0*c0_9*map.g11*map.g00;
  const real G34_0_1_1_0_9_1 = det*c0*c3_0*c2_1*c2_0*c0_9*map.g11*map.g10;
  const real G34_0_1_1_0_10_0 = det*c0*c3_0*c2_1*c2_0*c0_10*map.g11*map.g00;
  const real G34_0_1_1_0_11_1 = det*c0*c3_0*c2_1*c2_0*c0_11*map.g11*map.g10;
  const real G35_0_1_0_1_9_0 = det*c0*c3_0*c2_1*c2_1*c0_9*map.g01*map.g01;
  const real G35_0_1_0_1_9_1 = det*c0*c3_0*c2_1*c2_1*c0_9*map.g01*map.g11;
  const real G35_0_1_0_1_10_0 = det*c0*c3_0*c2_1*c2_1*c0_10*map.g01*map.g01;
  const real G35_0_1_0_1_11_1 = det*c0*c3_0*c2_1*c2_1*c0_11*map.g01*map.g11;
  const real G35_0_1_1_1_9_0 = det*c0*c3_0*c2_1*c2_1*c0_9*map.g11*map.g01;
  const real G35_0_1_1_1_9_1 = det*c0*c3_0*c2_1*c2_1*c0_9*map.g11*map.g11;
  const real G35_0_1_1_1_10_0 = det*c0*c3_0*c2_1*c2_1*c0_10*map.g11*map.g01;
  const real G35_0_1_1_1_11_1 = det*c0*c3_0*c2_1*c2_1*c0_11*map.g11*map.g11;

  // Compute element tensor
  block[0] = 8.333333333333318e-02*G0_0 + 4.166666666666658e-02*G0_1 + 4.166666666666658e-02*G0_2 - 8.333333333333327e-02*G1_0_0_0 - 8.333333333333329e-02*G1_0_0_1 - 8.333333333333327e-02*G1_0_0_2 - 8.333333333333326e-02*G1_0_1_0 - 8.333333333333327e-02*G1_0_1_1 - 8.333333333333326e-02*G1_0_1_2 - 8.333333333333327e-02*G2_1_0_0 - 8.333333333333329e-02*G2_1_0_1 - 8.333333333333327e-02*G2_1_0_2 - 8.333333333333326e-02*G2_1_1_0 - 8.333333333333327e-02*G2_1_1_1 - 8.333333333333326e-02*G2_1_1_2 - 2.499999999999999e-01*G3_0_0_0_0 - 2.499999999999998e-01*G3_0_0_0_1 - 2.499999999999998e-01*G3_0_0_1_0 - 2.499999999999998e-01*G3_0_0_1_1 + 2.499999999999999e-01*G3_0_1_0_0 + 2.499999999999998e-01*G3_0_1_1_0 + 2.499999999999998e-01*G3_0_2_0_1 + 2.499999999999998e-01*G3_0_2_1_1 - 2.499999999999999e-01*G4_0_0_0_0_0_0 - 2.499999999999998e-01*G4_0_0_0_0_0_1 + 2.499999999999999e-01*G4_0_0_0_0_1_0 + 2.499999999999998e-01*G4_0_0_0_0_2_1 - 2.499999999999998e-01*G4_0_0_1_0_0_0 - 2.499999999999998e-01*G4_0_0_1_0_0_1 + 2.499999999999998e-01*G4_0_0_1_0_1_0 + 2.499999999999998e-01*G4_0_0_1_0_2_1 - 2.499999999999999e-01*G5_0_0_0_1_0_0 - 2.499999999999998e-01*G5_0_0_0_1_0_1 + 2.499999999999999e-01*G5_0_0_0_1_1_0 + 2.499999999999998e-01*G5_0_0_0_1_2_1 - 2.499999999999998e-01*G5_0_0_1_1_0_0 - 2.499999999999998e-01*G5_0_0_1_1_0_1 + 2.499999999999998e-01*G5_0_0_1_1_1_0 + 2.499999999999998e-01*G5_0_0_1_1_2_1 - 2.499999999999999e-01*G6_0_1_0_0_0_0 - 2.499999999999998e-01*G6_0_1_0_0_0_1 + 2.499999999999999e-01*G6_0_1_0_0_1_0 + 2.499999999999998e-01*G6_0_1_0_0_2_1 - 2.499999999999998e-01*G6_0_1_1_0_0_0 - 2.499999999999998e-01*G6_0_1_1_0_0_1 + 2.499999999999998e-01*G6_0_1_1_0_1_0 + 2.499999999999998e-01*G6_0_1_1_0_2_1 - 2.499999999999999e-01*G7_0_1_0_1_0_0 - 2.499999999999998e-01*G7_0_1_0_1_0_1 + 2.499999999999999e-01*G7_0_1_0_1_1_0 + 2.499999999999998e-01*G7_0_1_0_1_2_1 - 2.499999999999998e-01*G7_0_1_1_1_0_0 - 2.499999999999998e-01*G7_0_1_1_1_0_1 + 2.499999999999998e-01*G7_0_1_1_1_1_0 + 2.499999999999998e-01*G7_0_1_1_1_2_1;
  block[1] = 4.166666666666658e-02*G0_0 + 8.333333333333318e-02*G0_1 + 4.166666666666659e-02*G0_2 + 8.333333333333327e-02*G1_0_0_0 + 8.333333333333329e-02*G1_0_0_1 + 8.333333333333327e-02*G1_0_0_2 + 8.333333333333327e-02*G2_1_0_0 + 8.333333333333329e-02*G2_1_0_1 + 8.333333333333327e-02*G2_1_0_2 + 2.499999999999999e-01*G3_0_0_0_0 + 2.499999999999998e-01*G3_0_0_0_1 - 2.499999999999999e-01*G3_0_1_0_0 - 2.499999999999998e-01*G3_0_2_0_1 + 2.499999999999999e-01*G4_0_0_0_0_0_0 + 2.499999999999998e-01*G4_0_0_0_0_0_1 - 2.499999999999999e-01*G4_0_0_0_0_1_0 - 2.499999999999998e-01*G4_0_0_0_0_2_1 + 2.499999999999999e-01*G5_0_0_0_1_0_0 + 2.499999999999998e-01*G5_0_0_0_1_0_1 - 2.499999999999999e-01*G5_0_0_0_1_1_0 - 2.499999999999998e-01*G5_0_0_0_1_2_1 + 2.499999999999999e-01*G6_0_1_0_0_0_0 + 2.499999999999998e-01*G6_0_1_0_0_0_1 - 2.499999999999999e-01*G6_0_1_0_0_1_0 - 2.499999999999998e-01*G6_0_1_0_0_2_1 + 2.499999999999999e-01*G7_0_1_0_1_0_0 + 2.499999999999998e-01*G7_0_1_0_1_0_1 - 2.499999999999999e-01*G7_0_1_0_1_1_0 - 2.499999999999998e-01*G7_0_1_0_1_2_1;
  block[2] = 4.166666666666658e-02*G0_0 + 4.166666666666659e-02*G0_1 + 8.333333333333316e-02*G0_2 + 8.333333333333326e-02*G1_0_1_0 + 8.333333333333327e-02*G1_0_1_1 + 8.333333333333326e-02*G1_0_1_2 + 8.333333333333326e-02*G2_1_1_0 + 8.333333333333327e-02*G2_1_1_1 + 8.333333333333326e-02*G2_1_1_2 + 2.499999999999998e-01*G3_0_0_1_0 + 2.499999999999998e-01*G3_0_0_1_1 - 2.499999999999998e-01*G3_0_1_1_0 - 2.499999999999998e-01*G3_0_2_1_1 + 2.499999999999998e-01*G4_0_0_1_0_0_0 + 2.499999999999998e-01*G4_0_0_1_0_0_1 - 2.499999999999998e-01*G4_0_0_1_0_1_0 - 2.499999999999998e-01*G4_0_0_1_0_2_1 + 2.499999999999998e-01*G5_0_0_1_1_0_0 + 2.499999999999998e-01*G5_0_0_1_1_0_1 - 2.499999999999998e-01*G5_0_0_1_1_1_0 - 2.499999999999998e-01*G5_0_0_1_1_2_1 + 2.499999999999998e-01*G6_0_1_1_0_0_0 + 2.499999999999998e-01*G6_0_1_1_0_0_1 - 2.499999999999998e-01*G6_0_1_1_0_1_0 - 2.499999999999998e-01*G6_0_1_1_0_2_1 + 2.499999999999998e-01*G7_0_1_1_1_0_0 + 2.499999999999998e-01*G7_0_1_1_1_0_1 - 2.499999999999998e-01*G7_0_1_1_1_1_0 - 2.499999999999998e-01*G7_0_1_1_1_2_1;
  block[3] = 8.333333333333318e-02*G8_3 + 4.166666666666658e-02*G8_4 + 4.166666666666658e-02*G8_5 - 8.333333333333327e-02*G9_0_0_3 - 8.333333333333329e-02*G9_0_0_4 - 8.333333333333327e-02*G9_0_0_5 - 8.333333333333326e-02*G9_0_1_3 - 8.333333333333327e-02*G9_0_1_4 - 8.333333333333326e-02*G9_0_1_5 - 8.333333333333327e-02*G10_1_0_3 - 8.333333333333329e-02*G10_1_0_4 - 8.333333333333327e-02*G10_1_0_5 - 8.333333333333326e-02*G10_1_1_3 - 8.333333333333327e-02*G10_1_1_4 - 8.333333333333326e-02*G10_1_1_5 - 2.499999999999999e-01*G11_0_3_0_0 - 2.499999999999998e-01*G11_0_3_0_1 - 2.499999999999998e-01*G11_0_3_1_0 - 2.499999999999998e-01*G11_0_3_1_1 + 2.499999999999999e-01*G11_0_4_0_0 + 2.499999999999998e-01*G11_0_4_1_0 + 2.499999999999998e-01*G11_0_5_0_1 + 2.499999999999998e-01*G11_0_5_1_1 - 8.333333333333327e-02*G12_0_0 - 8.333333333333329e-02*G12_0_1 - 8.333333333333327e-02*G12_0_2 - 8.333333333333326e-02*G12_1_0 - 8.333333333333327e-02*G12_1_1 - 8.333333333333326e-02*G12_1_2 - 2.499999999999999e-01*G13_0_0_0_0_3_0 - 2.499999999999998e-01*G13_0_0_0_0_3_1 + 2.499999999999999e-01*G13_0_0_0_0_4_0 + 2.499999999999998e-01*G13_0_0_0_0_5_1 - 2.499999999999998e-01*G13_0_0_1_0_3_0 - 2.499999999999998e-01*G13_0_0_1_0_3_1 + 2.499999999999998e-01*G13_0_0_1_0_4_0 + 2.499999999999998e-01*G13_0_0_1_0_5_1 - 2.499999999999999e-01*G14_0_0_0_1_3_0 - 2.499999999999998e-01*G14_0_0_0_1_3_1 + 2.499999999999999e-01*G14_0_0_0_1_4_0 + 2.499999999999998e-01*G14_0_0_0_1_5_1 - 2.499999999999998e-01*G14_0_0_1_1_3_0 - 2.499999999999998e-01*G14_0_0_1_1_3_1 + 2.499999999999998e-01*G14_0_0_1_1_4_0 + 2.499999999999998e-01*G14_0_0_1_1_5_1 - 2.499999999999999e-01*G15_0_1_0_0_3_0 - 2.499999999999998e-01*G15_0_1_0_0_3_1 + 2.499999999999999e-01*G15_0_1_0_0_4_0 + 2.499999999999998e-01*G15_0_1_0_0_5_1 - 2.499999999999998e-01*G15_0_1_1_0_3_0 - 2.499999999999998e-01*G15_0_1_1_0_3_1 + 2.499999999999998e-01*G15_0_1_1_0_4_0 + 2.499999999999998e-01*G15_0_1_1_0_5_1 - 2.499999999999999e-01*G16_0_1_0_1_3_0 - 2.499999999999998e-01*G16_0_1_0_1_3_1 + 2.499999999999999e-01*G16_0_1_0_1_4_0 + 2.499999999999998e-01*G16_0_1_0_1_5_1 - 2.499999999999998e-01*G16_0_1_1_1_3_0 - 2.499999999999998e-01*G16_0_1_1_1_3_1 + 2.499999999999998e-01*G16_0_1_1_1_4_0 + 2.499999999999998e-01*G16_0_1_1_1_5_1;
  block[4] = 4.166666666666658e-02*G8_3 + 8.333333333333318e-02*G8_4 + 4.166666666666659e-02*G8_5 + 8.333333333333327e-02*G9_0_0_3 + 8.333333333333329e-02*G9_0_0_4 + 8.333333333333327e-02*G9_0_0_5 + 8.333333333333327e-02*G10_1_0_3 + 8.333333333333329e-02*G10_1_0_4 + 8.333333333333327e-02*G10_1_0_5 + 2.499999999999999e-01*G11_0_3_0_0 + 2.499999999999998e-01*G11_0_3_0_1 - 2.499999999999999e-01*G11_0_4_0_0 - 2.499999999999998e-01*G11_0_5_0_1 + 8.333333333333327e-02*G12_0_0 + 8.333333333333329e-02*G12_0_1 + 8.333333333333327e-02*G12_0_2 + 2.499999999999999e-01*G13_0_0_0_0_3_0 + 2.499999999999998e-01*G13_0_0_0_0_3_1 - 2.499999999999999e-01*G13_0_0_0_0_4_0 - 2.499999999999998e-01*G13_0_0_0_0_5_1 + 2.499999999999999e-01*G14_0_0_0_1_3_0 + 2.499999999999998e-01*G14_0_0_0_1_3_1 - 2.499999999999999e-01*G14_0_0_0_1_4_0 - 2.499999999999998e-01*G14_0_0_0_1_5_1 + 2.499999999999999e-01*G15_0_1_0_0_3_0 + 2.499999999999998e-01*G15_0_1_0_0_3_1 - 2.499999999999999e-01*G15_0_1_0_0_4_0 - 2.499999999999998e-01*G15_0_1_0_0_5_1 + 2.499999999999999e-01*G16_0_1_0_1_3_0 + 2.499999999999998e-01*G16_0_1_0_1_3_1 - 2.499999999999999e-01*G16_0_1_0_1_4_0 - 2.499999999999998e-01*G16_0_1_0_1_5_1;
  block[5] = 4.166666666666658e-02*G8_3 + 4.166666666666659e-02*G8_4 + 8.333333333333316e-02*G8_5 + 8.333333333333326e-02*G9_0_1_3 + 8.333333333333327e-02*G9_0_1_4 + 8.333333333333326e-02*G9_0_1_5 + 8.333333333333326e-02*G10_1_1_3 + 8.333333333333327e-02*G10_1_1_4 + 8.333333333333326e-02*G10_1_1_5 + 2.499999999999998e-01*G11_0_3_1_0 + 2.499999999999998e-01*G11_0_3_1_1 - 2.499999999999998e-01*G11_0_4_1_0 - 2.499999999999998e-01*G11_0_5_1_1 + 8.333333333333326e-02*G12_1_0 + 8.333333333333327e-02*G12_1_1 + 8.333333333333326e-02*G12_1_2 + 2.499999999999998e-01*G13_0_0_1_0_3_0 + 2.499999999999998e-01*G13_0_0_1_0_3_1 - 2.499999999999998e-01*G13_0_0_1_0_4_0 - 2.499999999999998e-01*G13_0_0_1_0_5_1 + 2.499999999999998e-01*G14_0_0_1_1_3_0 + 2.499999999999998e-01*G14_0_0_1_1_3_1 - 2.499999999999998e-01*G14_0_0_1_1_4_0 - 2.499999999999998e-01*G14_0_0_1_1_5_1 + 2.499999999999998e-01*G15_0_1_1_0_3_0 + 2.499999999999998e-01*G15_0_1_1_0_3_1 - 2.499999999999998e-01*G15_0_1_1_0_4_0 - 2.499999999999998e-01*G15_0_1_1_0_5_1 + 2.499999999999998e-01*G16_0_1_1_1_3_0 + 2.499999999999998e-01*G16_0_1_1_1_3_1 - 2.499999999999998e-01*G16_0_1_1_1_4_0 - 2.499999999999998e-01*G16_0_1_1_1_5_1;
  block[6] = 8.333333333333318e-02*G17_6 + 4.166666666666658e-02*G17_7 + 4.166666666666658e-02*G17_8 - 8.333333333333327e-02*G18_0_0_6 - 8.333333333333329e-02*G18_0_0_7 - 8.333333333333327e-02*G18_0_0_8 - 8.333333333333326e-02*G18_0_1_6 - 8.333333333333327e-02*G18_0_1_7 - 8.333333333333326e-02*G18_0_1_8 - 8.333333333333327e-02*G19_1_0_6 - 8.333333333333329e-02*G19_1_0_7 - 8.333333333333327e-02*G19_1_0_8 - 8.333333333333326e-02*G19_1_1_6 - 8.333333333333327e-02*G19_1_1_7 - 8.333333333333326e-02*G19_1_1_8 - 2.499999999999999e-01*G20_0_6_0_0 - 2.499999999999998e-01*G20_0_6_0_1 - 2.499999999999998e-01*G20_0_6_1_0 - 2.499999999999998e-01*G20_0_6_1_1 + 2.499999999999999e-01*G20_0_7_0_0 + 2.499999999999998e-01*G20_0_7_1_0 + 2.499999999999998e-01*G20_0_8_0_1 + 2.499999999999998e-01*G20_0_8_1_1 - 8.333333333333327e-02*G21_0_0 - 8.333333333333329e-02*G21_0_1 - 8.333333333333327e-02*G21_0_2 - 8.333333333333326e-02*G21_1_0 - 8.333333333333327e-02*G21_1_1 - 8.333333333333326e-02*G21_1_2 - 2.499999999999999e-01*G22_0_0_0_0_6_0 - 2.499999999999998e-01*G22_0_0_0_0_6_1 + 2.499999999999999e-01*G22_0_0_0_0_7_0 + 2.499999999999998e-01*G22_0_0_0_0_8_1 - 2.499999999999998e-01*G22_0_0_1_0_6_0 - 2.499999999999998e-01*G22_0_0_1_0_6_1 + 2.499999999999998e-01*G22_0_0_1_0_7_0 + 2.499999999999998e-01*G22_0_0_1_0_8_1 - 2.499999999999999e-01*G23_0_0_0_1_6_0 - 2.499999999999998e-01*G23_0_0_0_1_6_1 + 2.499999999999999e-01*G23_0_0_0_1_7_0 + 2.499999999999998e-01*G23_0_0_0_1_8_1 - 2.499999999999998e-01*G23_0_0_1_1_6_0 - 2.499999999999998e-01*G23_0_0_1_1_6_1 + 2.499999999999998e-01*G23_0_0_1_1_7_0 + 2.499999999999998e-01*G23_0_0_1_1_8_1 - 2.499999999999999e-01*G24_0_1_0_0_6_0 - 2.499999999999998e-01*G24_0_1_0_0_6_1 + 2.499999999999999e-01*G24_0_1_0_0_7_0 + 2.499999999999998e-01*G24_0_1_0_0_8_1 - 2.499999999999998e-01*G24_0_1_1_0_6_0 - 2.499999999999998e-01*G24_0_1_1_0_6_1 + 2.499999999999998e-01*G24_0_1_1_0_7_0 + 2.499999999999998e-01*G24_0_1_1_0_8_1 - 2.499999999999999e-01*G25_0_1_0_1_6_0 - 2.499999999999998e-01*G25_0_1_0_1_6_1 + 2.499999999999999e-01*G25_0_1_0_1_7_0 + 2.499999999999998e-01*G25_0_1_0_1_8_1 - 2.499999999999998e-01*G25_0_1_1_1_6_0 - 2.499999999999998e-01*G25_0_1_1_1_6_1 + 2.499999999999998e-01*G25_0_1_1_1_7_0 + 2.499999999999998e-01*G25_0_1_1_1_8_1;
  block[7] = 4.166666666666658e-02*G17_6 + 8.333333333333318e-02*G17_7 + 4.166666666666659e-02*G17_8 + 8.333333333333327e-02*G18_0_0_6 + 8.333333333333329e-02*G18_0_0_7 + 8.333333333333327e-02*G18_0_0_8 + 8.333333333333327e-02*G19_1_0_6 + 8.333333333333329e-02*G19_1_0_7 + 8.333333333333327e-02*G19_1_0_8 + 2.499999999999999e-01*G20_0_6_0_0 + 2.499999999999998e-01*G20_0_6_0_1 - 2.499999999999999e-01*G20_0_7_0_0 - 2.499999999999998e-01*G20_0_8_0_1 + 8.333333333333327e-02*G21_0_0 + 8.333333333333329e-02*G21_0_1 + 8.333333333333327e-02*G21_0_2 + 2.499999999999999e-01*G22_0_0_0_0_6_0 + 2.499999999999998e-01*G22_0_0_0_0_6_1 - 2.499999999999999e-01*G22_0_0_0_0_7_0 - 2.499999999999998e-01*G22_0_0_0_0_8_1 + 2.499999999999999e-01*G23_0_0_0_1_6_0 + 2.499999999999998e-01*G23_0_0_0_1_6_1 - 2.499999999999999e-01*G23_0_0_0_1_7_0 - 2.499999999999998e-01*G23_0_0_0_1_8_1 + 2.499999999999999e-01*G24_0_1_0_0_6_0 + 2.499999999999998e-01*G24_0_1_0_0_6_1 - 2.499999999999999e-01*G24_0_1_0_0_7_0 - 2.499999999999998e-01*G24_0_1_0_0_8_1 + 2.499999999999999e-01*G25_0_1_0_1_6_0 + 2.499999999999998e-01*G25_0_1_0_1_6_1 - 2.499999999999999e-01*G25_0_1_0_1_7_0 - 2.499999999999998e-01*G25_0_1_0_1_8_1;
  block[8] = 4.166666666666658e-02*G17_6 + 4.166666666666659e-02*G17_7 + 8.333333333333316e-02*G17_8 + 8.333333333333326e-02*G18_0_1_6 + 8.333333333333327e-02*G18_0_1_7 + 8.333333333333326e-02*G18_0_1_8 + 8.333333333333326e-02*G19_1_1_6 + 8.333333333333327e-02*G19_1_1_7 + 8.333333333333326e-02*G19_1_1_8 + 2.499999999999998e-01*G20_0_6_1_0 + 2.499999999999998e-01*G20_0_6_1_1 - 2.499999999999998e-01*G20_0_7_1_0 - 2.499999999999998e-01*G20_0_8_1_1 + 8.333333333333326e-02*G21_1_0 + 8.333333333333327e-02*G21_1_1 + 8.333333333333326e-02*G21_1_2 + 2.499999999999998e-01*G22_0_0_1_0_6_0 + 2.499999999999998e-01*G22_0_0_1_0_6_1 - 2.499999999999998e-01*G22_0_0_1_0_7_0 - 2.499999999999998e-01*G22_0_0_1_0_8_1 + 2.499999999999998e-01*G23_0_0_1_1_6_0 + 2.499999999999998e-01*G23_0_0_1_1_6_1 - 2.499999999999998e-01*G23_0_0_1_1_7_0 - 2.499999999999998e-01*G23_0_0_1_1_8_1 + 2.499999999999998e-01*G24_0_1_1_0_6_0 + 2.499999999999998e-01*G24_0_1_1_0_6_1 - 2.499999999999998e-01*G24_0_1_1_0_7_0 - 2.499999999999998e-01*G24_0_1_1_0_8_1 + 2.499999999999998e-01*G25_0_1_1_1_6_0 + 2.499999999999998e-01*G25_0_1_1_1_6_1 - 2.499999999999998e-01*G25_0_1_1_1_7_0 - 2.499999999999998e-01*G25_0_1_1_1_8_1;
  block[9] = 8.333333333333318e-02*G26_9 + 4.166666666666658e-02*G26_10 + 4.166666666666658e-02*G26_11 - 8.333333333333327e-02*G27_0_0_9 - 8.333333333333329e-02*G27_0_0_10 - 8.333333333333327e-02*G27_0_0_11 - 8.333333333333326e-02*G27_0_1_9 - 8.333333333333327e-02*G27_0_1_10 - 8.333333333333326e-02*G27_0_1_11 - 8.333333333333327e-02*G28_1_0_9 - 8.333333333333329e-02*G28_1_0_10 - 8.333333333333327e-02*G28_1_0_11 - 8.333333333333326e-02*G28_1_1_9 - 8.333333333333327e-02*G28_1_1_10 - 8.333333333333326e-02*G28_1_1_11 - 2.499999999999999e-01*G29_0_9_0_0 - 2.499999999999998e-01*G29_0_9_0_1 - 2.499999999999998e-01*G29_0_9_1_0 - 2.499999999999998e-01*G29_0_9_1_1 + 2.499999999999999e-01*G29_0_10_0_0 + 2.499999999999998e-01*G29_0_10_1_0 + 2.499999999999998e-01*G29_0_11_0_1 + 2.499999999999998e-01*G29_0_11_1_1 - 8.333333333333327e-02*G30_0_0_0 - 8.333333333333329e-02*G30_0_0_1 - 8.333333333333327e-02*G30_0_0_2 - 8.333333333333326e-02*G30_0_1_0 - 8.333333333333327e-02*G30_0_1_1 - 8.333333333333326e-02*G30_0_1_2 - 8.333333333333327e-02*G31_1_0_0 - 8.333333333333329e-02*G31_1_0_1 - 8.333333333333327e-02*G31_1_0_2 - 8.333333333333326e-02*G31_1_1_0 - 8.333333333333327e-02*G31_1_1_1 - 8.333333333333326e-02*G31_1_1_2 - 2.499999999999999e-01*G32_0_0_0_0_9_0 - 2.499999999999998e-01*G32_0_0_0_0_9_1 + 2.499999999999999e-01*G32_0_0_0_0_10_0 + 2.499999999999998e-01*G32_0_0_0_0_11_1 - 2.499999999999998e-01*G32_0_0_1_0_9_0 - 2.499999999999998e-01*G32_0_0_1_0_9_1 + 2.499999999999998e-01*G32_0_0_1_0_10_0 + 2.499999999999998e-01*G32_0_0_1_0_11_1 - 2.499999999999999e-01*G33_0_0_0_1_9_0 - 2.499999999999998e-01*G33_0_0_0_1_9_1 + 2.499999999999999e-01*G33_0_0_0_1_10_0 + 2.499999999999998e-01*G33_0_0_0_1_11_1 - 2.499999999999998e-01*G33_0_0_1_1_9_0 - 2.499999999999998e-01*G33_0_0_1_1_9_1 + 2.499999999999998e-01*G33_0_0_1_1_10_0 + 2.499999999999998e-01*G33_0_0_1_1_11_1 - 2.499999999999999e-01*G34_0_1_0_0_9_0 - 2.499999999999998e-01*G34_0_1_0_0_9_1 + 2.499999999999999e-01*G34_0_1_0_0_10_0 + 2.499999999999998e-01*G34_0_1_0_0_11_1 - 2.499999999999998e-01*G34_0_1_1_0_9_0 - 2.499999999999998e-01*G34_0_1_1_0_9_1 + 2.499999999999998e-01*G34_0_1_1_0_10_0 + 2.499999999999998e-01*G34_0_1_1_0_11_1 - 2.499999999999999e-01*G35_0_1_0_1_9_0 - 2.499999999999998e-01*G35_0_1_0_1_9_1 + 2.499999999999999e-01*G35_0_1_0_1_10_0 + 2.499999999999998e-01*G35_0_1_0_1_11_1 - 2.499999999999998e-01*G35_0_1_1_1_9_0 - 2.499999999999998e-01*G35_0_1_1_1_9_1 + 2.499999999999998e-01*G35_0_1_1_1_10_0 + 2.499999999999998e-01*G35_0_1_1_1_11_1;
  block[10] = 4.166666666666658e-02*G26_9 + 8.333333333333318e-02*G26_10 + 4.166666666666659e-02*G26_11 + 8.333333333333327e-02*G27_0_0_9 + 8.333333333333329e-02*G27_0_0_10 + 8.333333333333327e-02*G27_0_0_11 + 8.333333333333327e-02*G28_1_0_9 + 8.333333333333329e-02*G28_1_0_10 + 8.333333333333327e-02*G28_1_0_11 + 2.499999999999999e-01*G29_0_9_0_0 + 2.499999999999998e-01*G29_0_9_0_1 - 2.499999999999999e-01*G29_0_10_0_0 - 2.499999999999998e-01*G29_0_11_0_1 + 8.333333333333327e-02*G30_0_0_0 + 8.333333333333329e-02*G30_0_0_1 + 8.333333333333327e-02*G30_0_0_2 + 8.333333333333327e-02*G31_1_0_0 + 8.333333333333329e-02*G31_1_0_1 + 8.333333333333327e-02*G31_1_0_2 + 2.499999999999999e-01*G32_0_0_0_0_9_0 + 2.499999999999998e-01*G32_0_0_0_0_9_1 - 2.499999999999999e-01*G32_0_0_0_0_10_0 - 2.499999999999998e-01*G32_0_0_0_0_11_1 + 2.499999999999999e-01*G33_0_0_0_1_9_0 + 2.499999999999998e-01*G33_0_0_0_1_9_1 - 2.499999999999999e-01*G33_0_0_0_1_10_0 - 2.499999999999998e-01*G33_0_0_0_1_11_1 + 2.499999999999999e-01*G34_0_1_0_0_9_0 + 2.499999999999998e-01*G34_0_1_0_0_9_1 - 2.499999999999999e-01*G34_0_1_0_0_10_0 - 2.499999999999998e-01*G34_0_1_0_0_11_1 + 2.499999999999999e-01*G35_0_1_0_1_9_0 + 2.499999999999998e-01*G35_0_1_0_1_9_1 - 2.499999999999999e-01*G35_0_1_0_1_10_0 - 2.499999999999998e-01*G35_0_1_0_1_11_1;
  block[11] = 4.166666666666658e-02*G26_9 + 4.166666666666659e-02*G26_10 + 8.333333333333316e-02*G26_11 + 8.333333333333326e-02*G27_0_1_9 + 8.333333333333327e-02*G27_0_1_10 + 8.333333333333326e-02*G27_0_1_11 + 8.333333333333326e-02*G28_1_1_9 + 8.333333333333327e-02*G28_1_1_10 + 8.333333333333326e-02*G28_1_1_11 + 2.499999999999998e-01*G29_0_9_1_0 + 2.499999999999998e-01*G29_0_9_1_1 - 2.499999999999998e-01*G29_0_10_1_0 - 2.499999999999998e-01*G29_0_11_1_1 + 8.333333333333326e-02*G30_0_1_0 + 8.333333333333327e-02*G30_0_1_1 + 8.333333333333326e-02*G30_0_1_2 + 8.333333333333326e-02*G31_1_1_0 + 8.333333333333327e-02*G31_1_1_1 + 8.333333333333326e-02*G31_1_1_2 + 2.499999999999998e-01*G32_0_0_1_0_9_0 + 2.499999999999998e-01*G32_0_0_1_0_9_1 - 2.499999999999998e-01*G32_0_0_1_0_10_0 - 2.499999999999998e-01*G32_0_0_1_0_11_1 + 2.499999999999998e-01*G33_0_0_1_1_9_0 + 2.499999999999998e-01*G33_0_0_1_1_9_1 - 2.499999999999998e-01*G33_0_0_1_1_10_0 - 2.499999999999998e-01*G33_0_0_1_1_11_1 + 2.499999999999998e-01*G34_0_1_1_0_9_0 + 2.499999999999998e-01*G34_0_1_1_0_9_1 - 2.499999999999998e-01*G34_0_1_1_0_10_0 - 2.499999999999998e-01*G34_0_1_1_0_11_1 + 2.499999999999998e-01*G35_0_1_1_1_9_0 + 2.499999999999998e-01*G35_0_1_1_1_9_1 - 2.499999999999998e-01*G35_0_1_1_1_10_0 - 2.499999999999998e-01*G35_0_1_1_1_11_1;
}

// No contribution from the boundary
bool LinearForm::boundary_contribution() const { return false; }

void LinearForm::eval(real block[], const AffineMap& map, real det, unsigned int facet) const {}

// No contribution from interior boundaries
bool LinearForm::interior_boundary_contribution() const { return false; }

void LinearForm::eval(real block[], const AffineMap& map0, const AffineMap& map1, real det, unsigned int facet0, unsigned int facet1, unsigned int alignment) const {}

} }

#endif
