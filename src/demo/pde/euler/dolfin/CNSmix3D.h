// Automatically generated by FFC, the FEniCS Form Compiler, version 0.3.5.
// For further information, go to http://www/fenics.org/ffc/.
// Licensed under the GNU GPL Version 2.

#ifndef __CNSMIX3D_H
#define __CNSMIX3D_H

#include <dolfin/Mesh.h>
#include <dolfin/Cell.h>
#include <dolfin/Point.h>
#include <dolfin/AffineMap.h>
#include <dolfin/FiniteElement.h>
#include <dolfin/FiniteElementSpec.h>
#include <dolfin/BilinearForm.h>
#include <dolfin/LinearForm.h>
#include <dolfin/Functional.h>
#include <dolfin/FEM.h>

namespace dolfin { namespace CNSmix3D {

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class BilinearForm : public dolfin::BilinearForm
{
public:

  class TestElement;

  class TrialElement;

  class FunctionElement_0;

  BilinearForm(Function& w0, const real& c0, const real& c1);
  

  bool interior_contribution() const;

  void eval(real block[], const AffineMap& map, real det) const;

  bool boundary_contribution() const;

  void eval(real block[], const AffineMap& map, real det, unsigned int facet) const;

  bool interior_boundary_contribution() const;

  void eval(real block[], const AffineMap& map0, const AffineMap& map1, real det, unsigned int facet0, unsigned int facet1, unsigned int alignment) const;

private:

  const real& c0;  const real& c1;

};

class BilinearForm::TestElement : public dolfin::FiniteElement
{
public:

  TestElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 5;

    subelements = new FiniteElement* [3];
    subelements[0] = new SubElement_0();
    subelements[1] = new SubElement_1();
    subelements[2] = new SubElement_2();
  }

  ~TestElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 20;
  }

  inline unsigned int shapedim() const
  {
    return 3;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 3;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    nodes[3] = cell.entities(0)[3];
    int offset = mesh.topology().size(0);
    nodes[4] = offset + cell.entities(0)[0];
    nodes[5] = offset + cell.entities(0)[1];
    nodes[6] = offset + cell.entities(0)[2];
    nodes[7] = offset + cell.entities(0)[3];
    offset = offset + mesh.topology().size(0);
    nodes[8] = offset + cell.entities(0)[0];
    nodes[9] = offset + cell.entities(0)[1];
    nodes[10] = offset + cell.entities(0)[2];
    nodes[11] = offset + cell.entities(0)[3];
    offset = offset + mesh.topology().size(0);
    nodes[12] = offset + cell.entities(0)[0];
    nodes[13] = offset + cell.entities(0)[1];
    nodes[14] = offset + cell.entities(0)[2];
    nodes[15] = offset + cell.entities(0)[3];
    offset = offset + mesh.topology().size(0);
    nodes[16] = offset + cell.entities(0)[0];
    nodes[17] = offset + cell.entities(0)[1];
    nodes[18] = offset + cell.entities(0)[2];
    nodes[19] = offset + cell.entities(0)[3];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
    points[4] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[6] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[7] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[8] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[9] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[10] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[11] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[12] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[13] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[14] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[15] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    components[4] = 1;
    components[5] = 1;
    components[6] = 1;
    components[7] = 1;
    components[8] = 2;
    components[9] = 2;
    components[10] = 2;
    components[11] = 2;
    components[12] = 3;
    components[13] = 3;
    components[14] = 3;
    components[15] = 3;
    points[16] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[17] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[18] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[19] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    components[16] = 4;
    components[17] = 4;
    components[18] = 4;
    components[19] = 4;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
    offset = offset + mesh.topology().size(0);
    vertex_nodes[2] = offset + vertex;
    offset = offset + mesh.topology().size(0);
    vertex_nodes[3] = offset + vertex;
    offset = offset + mesh.topology().size(0);
    vertex_nodes[4] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *subelements[i];
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *subelements[i];
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("mixed");
    return s;
  }
  
private:

class SubElement_0 : public dolfin::FiniteElement
{
public:

  SubElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 4;
  }

  inline unsigned int shapedim() const
  {
    return 3;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    nodes[3] = cell.entities(0)[3];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "tetrahedron", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class SubElement_1 : public dolfin::FiniteElement
{
public:

  SubElement_1() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 3;

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_1()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 12;
  }

  inline unsigned int shapedim() const
  {
    return 3;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    nodes[3] = cell.entities(0)[3];
    int offset = mesh.topology().size(0);
    nodes[4] = offset + cell.entities(0)[0];
    nodes[5] = offset + cell.entities(0)[1];
    nodes[6] = offset + cell.entities(0)[2];
    nodes[7] = offset + cell.entities(0)[3];
    offset = offset + mesh.topology().size(0);
    nodes[8] = offset + cell.entities(0)[0];
    nodes[9] = offset + cell.entities(0)[1];
    nodes[10] = offset + cell.entities(0)[2];
    nodes[11] = offset + cell.entities(0)[3];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[4] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[6] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[7] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[8] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[9] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[10] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[11] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
    components[4] = 1;
    components[5] = 1;
    components[6] = 1;
    components[7] = 1;
    components[8] = 2;
    components[9] = 2;
    components[10] = 2;
    components[11] = 2;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
    offset = offset + mesh.topology().size(0);
    vertex_nodes[2] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "tetrahedron", 1, 3);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class SubElement_2 : public dolfin::FiniteElement
{
public:

  SubElement_2() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_2()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 4;
  }

  inline unsigned int shapedim() const
  {
    return 3;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    nodes[3] = cell.entities(0)[3];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "tetrahedron", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class BilinearForm::TrialElement : public dolfin::FiniteElement
{
public:

  TrialElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 5;

    subelements = new FiniteElement* [3];
    subelements[0] = new SubElement_0();
    subelements[1] = new SubElement_1();
    subelements[2] = new SubElement_2();
  }

  ~TrialElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 20;
  }

  inline unsigned int shapedim() const
  {
    return 3;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 3;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    nodes[3] = cell.entities(0)[3];
    int offset = mesh.topology().size(0);
    nodes[4] = offset + cell.entities(0)[0];
    nodes[5] = offset + cell.entities(0)[1];
    nodes[6] = offset + cell.entities(0)[2];
    nodes[7] = offset + cell.entities(0)[3];
    offset = offset + mesh.topology().size(0);
    nodes[8] = offset + cell.entities(0)[0];
    nodes[9] = offset + cell.entities(0)[1];
    nodes[10] = offset + cell.entities(0)[2];
    nodes[11] = offset + cell.entities(0)[3];
    offset = offset + mesh.topology().size(0);
    nodes[12] = offset + cell.entities(0)[0];
    nodes[13] = offset + cell.entities(0)[1];
    nodes[14] = offset + cell.entities(0)[2];
    nodes[15] = offset + cell.entities(0)[3];
    offset = offset + mesh.topology().size(0);
    nodes[16] = offset + cell.entities(0)[0];
    nodes[17] = offset + cell.entities(0)[1];
    nodes[18] = offset + cell.entities(0)[2];
    nodes[19] = offset + cell.entities(0)[3];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
    points[4] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[6] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[7] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[8] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[9] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[10] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[11] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[12] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[13] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[14] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[15] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    components[4] = 1;
    components[5] = 1;
    components[6] = 1;
    components[7] = 1;
    components[8] = 2;
    components[9] = 2;
    components[10] = 2;
    components[11] = 2;
    components[12] = 3;
    components[13] = 3;
    components[14] = 3;
    components[15] = 3;
    points[16] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[17] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[18] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[19] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    components[16] = 4;
    components[17] = 4;
    components[18] = 4;
    components[19] = 4;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
    offset = offset + mesh.topology().size(0);
    vertex_nodes[2] = offset + vertex;
    offset = offset + mesh.topology().size(0);
    vertex_nodes[3] = offset + vertex;
    offset = offset + mesh.topology().size(0);
    vertex_nodes[4] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *subelements[i];
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *subelements[i];
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("mixed");
    return s;
  }
  
private:

class SubElement_0 : public dolfin::FiniteElement
{
public:

  SubElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 4;
  }

  inline unsigned int shapedim() const
  {
    return 3;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    nodes[3] = cell.entities(0)[3];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "tetrahedron", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class SubElement_1 : public dolfin::FiniteElement
{
public:

  SubElement_1() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 3;

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_1()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 12;
  }

  inline unsigned int shapedim() const
  {
    return 3;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    nodes[3] = cell.entities(0)[3];
    int offset = mesh.topology().size(0);
    nodes[4] = offset + cell.entities(0)[0];
    nodes[5] = offset + cell.entities(0)[1];
    nodes[6] = offset + cell.entities(0)[2];
    nodes[7] = offset + cell.entities(0)[3];
    offset = offset + mesh.topology().size(0);
    nodes[8] = offset + cell.entities(0)[0];
    nodes[9] = offset + cell.entities(0)[1];
    nodes[10] = offset + cell.entities(0)[2];
    nodes[11] = offset + cell.entities(0)[3];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[4] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[6] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[7] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[8] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[9] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[10] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[11] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
    components[4] = 1;
    components[5] = 1;
    components[6] = 1;
    components[7] = 1;
    components[8] = 2;
    components[9] = 2;
    components[10] = 2;
    components[11] = 2;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
    offset = offset + mesh.topology().size(0);
    vertex_nodes[2] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "tetrahedron", 1, 3);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class SubElement_2 : public dolfin::FiniteElement
{
public:

  SubElement_2() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_2()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 4;
  }

  inline unsigned int shapedim() const
  {
    return 3;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    nodes[3] = cell.entities(0)[3];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "tetrahedron", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class BilinearForm::FunctionElement_0 : public dolfin::FiniteElement
{
public:

  FunctionElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 3;

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 12;
  }

  inline unsigned int shapedim() const
  {
    return 3;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    nodes[3] = cell.entities(0)[3];
    int offset = mesh.topology().size(0);
    nodes[4] = offset + cell.entities(0)[0];
    nodes[5] = offset + cell.entities(0)[1];
    nodes[6] = offset + cell.entities(0)[2];
    nodes[7] = offset + cell.entities(0)[3];
    offset = offset + mesh.topology().size(0);
    nodes[8] = offset + cell.entities(0)[0];
    nodes[9] = offset + cell.entities(0)[1];
    nodes[10] = offset + cell.entities(0)[2];
    nodes[11] = offset + cell.entities(0)[3];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[4] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[6] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[7] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[8] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[9] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[10] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[11] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
    components[4] = 1;
    components[5] = 1;
    components[6] = 1;
    components[7] = 1;
    components[8] = 2;
    components[9] = 2;
    components[10] = 2;
    components[11] = 2;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
    offset = offset + mesh.topology().size(0);
    vertex_nodes[2] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "tetrahedron", 1, 3);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

BilinearForm::BilinearForm(Function& w0, const real& c0, const real& c1) : dolfin::BilinearForm(1), c0(c0), c1(c1)
{
  // Create finite element for test space
  _test = new TestElement();

  // Create finite element for trial space
  _trial = new TrialElement();

  // Add functions
  initFunction(0, w0, new FunctionElement_0());
}

// Contribution from the interior
bool BilinearForm::interior_contribution() const { return true; }

void BilinearForm::eval(real block[], const AffineMap& map, real det) const
{
  // Compute coefficients
  const real c0_0 = 2.500000000000001e-01*c[0][0] + 2.500000000000000e-01*c[0][1] + 2.500000000000000e-01*c[0][2] + 2.500000000000000e-01*c[0][3];
  const real c0_1 = 2.500000000000001e-01*c[0][4] + 2.500000000000000e-01*c[0][5] + 2.500000000000000e-01*c[0][6] + 2.500000000000000e-01*c[0][7];
  const real c0_2 = 2.500000000000001e-01*c[0][8] + 2.500000000000000e-01*c[0][9] + 2.500000000000000e-01*c[0][10] + 2.500000000000000e-01*c[0][11];

  // Compute geometry tensors
  const real G0_ = det;
  const real G1_0_0 = det*c0*c0_0*map.g00;
  const real G1_0_1 = det*c0*c0_0*map.g10;
  const real G1_0_2 = det*c0*c0_0*map.g20;
  const real G2_1_0 = det*c0*c0_1*map.g01;
  const real G2_1_1 = det*c0*c0_1*map.g11;
  const real G2_1_2 = det*c0*c0_1*map.g21;
  const real G3_2_0 = det*c0*c0_2*map.g02;
  const real G3_2_1 = det*c0*c0_2*map.g12;
  const real G3_2_2 = det*c0*c0_2*map.g22;
  const real G4_0_0 = det*c0*c1*map.g00*map.g00 + det*c0*c1*map.g01*map.g01 + det*c0*c1*map.g02*map.g02;
  const real G4_0_1 = det*c0*c1*map.g00*map.g10 + det*c0*c1*map.g01*map.g11 + det*c0*c1*map.g02*map.g12;
  const real G4_0_2 = det*c0*c1*map.g00*map.g20 + det*c0*c1*map.g01*map.g21 + det*c0*c1*map.g02*map.g22;
  const real G4_1_0 = det*c0*c1*map.g10*map.g00 + det*c0*c1*map.g11*map.g01 + det*c0*c1*map.g12*map.g02;
  const real G4_1_1 = det*c0*c1*map.g10*map.g10 + det*c0*c1*map.g11*map.g11 + det*c0*c1*map.g12*map.g12;
  const real G4_1_2 = det*c0*c1*map.g10*map.g20 + det*c0*c1*map.g11*map.g21 + det*c0*c1*map.g12*map.g22;
  const real G4_2_0 = det*c0*c1*map.g20*map.g00 + det*c0*c1*map.g21*map.g01 + det*c0*c1*map.g22*map.g02;
  const real G4_2_1 = det*c0*c1*map.g20*map.g10 + det*c0*c1*map.g21*map.g11 + det*c0*c1*map.g22*map.g12;
  const real G4_2_2 = det*c0*c1*map.g20*map.g20 + det*c0*c1*map.g21*map.g21 + det*c0*c1*map.g22*map.g22;

  // Compute element tensor
  block[0] = 1.666666666666662e-02*G0_ + 2.083333333333331e-02*G1_0_0 + 2.083333333333331e-02*G1_0_1 + 2.083333333333331e-02*G1_0_2 + 2.083333333333331e-02*G2_1_0 + 2.083333333333331e-02*G2_1_1 + 2.083333333333331e-02*G2_1_2 + 2.083333333333331e-02*G3_2_0 + 2.083333333333331e-02*G3_2_1 + 2.083333333333331e-02*G3_2_2 + 8.333333333333323e-02*G4_0_0 + 8.333333333333323e-02*G4_0_1 + 8.333333333333322e-02*G4_0_2 + 8.333333333333323e-02*G4_1_0 + 8.333333333333323e-02*G4_1_1 + 8.333333333333322e-02*G4_1_2 + 8.333333333333322e-02*G4_2_0 + 8.333333333333322e-02*G4_2_1 + 8.333333333333320e-02*G4_2_2;
  block[1] = 8.333333333333311e-03*G0_ + 2.083333333333331e-02*G1_0_0 + 2.083333333333331e-02*G1_0_1 + 2.083333333333330e-02*G1_0_2 + 2.083333333333331e-02*G2_1_0 + 2.083333333333331e-02*G2_1_1 + 2.083333333333330e-02*G2_1_2 + 2.083333333333331e-02*G3_2_0 + 2.083333333333331e-02*G3_2_1 + 2.083333333333330e-02*G3_2_2 - 8.333333333333323e-02*G4_0_0 - 8.333333333333323e-02*G4_1_0 - 8.333333333333322e-02*G4_2_0;
  block[2] = 8.333333333333309e-03*G0_ + 2.083333333333331e-02*G1_0_0 + 2.083333333333331e-02*G1_0_1 + 2.083333333333330e-02*G1_0_2 + 2.083333333333331e-02*G2_1_0 + 2.083333333333331e-02*G2_1_1 + 2.083333333333330e-02*G2_1_2 + 2.083333333333331e-02*G3_2_0 + 2.083333333333331e-02*G3_2_1 + 2.083333333333330e-02*G3_2_2 - 8.333333333333323e-02*G4_0_1 - 8.333333333333323e-02*G4_1_1 - 8.333333333333322e-02*G4_2_1;
  block[3] = 8.333333333333312e-03*G0_ + 2.083333333333331e-02*G1_0_0 + 2.083333333333331e-02*G1_0_1 + 2.083333333333330e-02*G1_0_2 + 2.083333333333331e-02*G2_1_0 + 2.083333333333331e-02*G2_1_1 + 2.083333333333330e-02*G2_1_2 + 2.083333333333331e-02*G3_2_0 + 2.083333333333331e-02*G3_2_1 + 2.083333333333330e-02*G3_2_2 - 8.333333333333323e-02*G4_0_2 - 8.333333333333323e-02*G4_1_2 - 8.333333333333322e-02*G4_2_2;
  block[4] = 0.000000000000000e+00;
  block[5] = 0.000000000000000e+00;
  block[6] = 0.000000000000000e+00;
  block[7] = 0.000000000000000e+00;
  block[8] = 0.000000000000000e+00;
  block[9] = 0.000000000000000e+00;
  block[10] = 0.000000000000000e+00;
  block[11] = 0.000000000000000e+00;
  block[12] = 0.000000000000000e+00;
  block[13] = 0.000000000000000e+00;
  block[14] = 0.000000000000000e+00;
  block[15] = 0.000000000000000e+00;
  block[16] = 0.000000000000000e+00;
  block[17] = 0.000000000000000e+00;
  block[18] = 0.000000000000000e+00;
  block[19] = 0.000000000000000e+00;
  block[20] = 8.333333333333311e-03*G0_ - 2.083333333333331e-02*G1_0_0 - 2.083333333333331e-02*G2_1_0 - 2.083333333333331e-02*G3_2_0 - 8.333333333333323e-02*G4_0_0 - 8.333333333333323e-02*G4_0_1 - 8.333333333333322e-02*G4_0_2;
  block[21] = 1.666666666666662e-02*G0_ - 2.083333333333331e-02*G1_0_0 - 2.083333333333331e-02*G2_1_0 - 2.083333333333331e-02*G3_2_0 + 8.333333333333323e-02*G4_0_0;
  block[22] = 8.333333333333311e-03*G0_ - 2.083333333333331e-02*G1_0_0 - 2.083333333333331e-02*G2_1_0 - 2.083333333333331e-02*G3_2_0 + 8.333333333333323e-02*G4_0_1;
  block[23] = 8.333333333333312e-03*G0_ - 2.083333333333331e-02*G1_0_0 - 2.083333333333331e-02*G2_1_0 - 2.083333333333331e-02*G3_2_0 + 8.333333333333323e-02*G4_0_2;
  block[24] = 0.000000000000000e+00;
  block[25] = 0.000000000000000e+00;
  block[26] = 0.000000000000000e+00;
  block[27] = 0.000000000000000e+00;
  block[28] = 0.000000000000000e+00;
  block[29] = 0.000000000000000e+00;
  block[30] = 0.000000000000000e+00;
  block[31] = 0.000000000000000e+00;
  block[32] = 0.000000000000000e+00;
  block[33] = 0.000000000000000e+00;
  block[34] = 0.000000000000000e+00;
  block[35] = 0.000000000000000e+00;
  block[36] = 0.000000000000000e+00;
  block[37] = 0.000000000000000e+00;
  block[38] = 0.000000000000000e+00;
  block[39] = 0.000000000000000e+00;
  block[40] = 8.333333333333309e-03*G0_ - 2.083333333333331e-02*G1_0_1 - 2.083333333333331e-02*G2_1_1 - 2.083333333333331e-02*G3_2_1 - 8.333333333333323e-02*G4_1_0 - 8.333333333333323e-02*G4_1_1 - 8.333333333333322e-02*G4_1_2;
  block[41] = 8.333333333333311e-03*G0_ - 2.083333333333331e-02*G1_0_1 - 2.083333333333331e-02*G2_1_1 - 2.083333333333331e-02*G3_2_1 + 8.333333333333323e-02*G4_1_0;
  block[42] = 1.666666666666662e-02*G0_ - 2.083333333333331e-02*G1_0_1 - 2.083333333333331e-02*G2_1_1 - 2.083333333333331e-02*G3_2_1 + 8.333333333333323e-02*G4_1_1;
  block[43] = 8.333333333333312e-03*G0_ - 2.083333333333331e-02*G1_0_1 - 2.083333333333331e-02*G2_1_1 - 2.083333333333331e-02*G3_2_1 + 8.333333333333323e-02*G4_1_2;
  block[44] = 0.000000000000000e+00;
  block[45] = 0.000000000000000e+00;
  block[46] = 0.000000000000000e+00;
  block[47] = 0.000000000000000e+00;
  block[48] = 0.000000000000000e+00;
  block[49] = 0.000000000000000e+00;
  block[50] = 0.000000000000000e+00;
  block[51] = 0.000000000000000e+00;
  block[52] = 0.000000000000000e+00;
  block[53] = 0.000000000000000e+00;
  block[54] = 0.000000000000000e+00;
  block[55] = 0.000000000000000e+00;
  block[56] = 0.000000000000000e+00;
  block[57] = 0.000000000000000e+00;
  block[58] = 0.000000000000000e+00;
  block[59] = 0.000000000000000e+00;
  block[60] = 8.333333333333312e-03*G0_ - 2.083333333333331e-02*G1_0_2 - 2.083333333333331e-02*G2_1_2 - 2.083333333333331e-02*G3_2_2 - 8.333333333333323e-02*G4_2_0 - 8.333333333333323e-02*G4_2_1 - 8.333333333333322e-02*G4_2_2;
  block[61] = 8.333333333333312e-03*G0_ - 2.083333333333331e-02*G1_0_2 - 2.083333333333331e-02*G2_1_2 - 2.083333333333331e-02*G3_2_2 + 8.333333333333323e-02*G4_2_0;
  block[62] = 8.333333333333311e-03*G0_ - 2.083333333333331e-02*G1_0_2 - 2.083333333333331e-02*G2_1_2 - 2.083333333333331e-02*G3_2_2 + 8.333333333333323e-02*G4_2_1;
  block[63] = 1.666666666666662e-02*G0_ - 2.083333333333331e-02*G1_0_2 - 2.083333333333331e-02*G2_1_2 - 2.083333333333331e-02*G3_2_2 + 8.333333333333323e-02*G4_2_2;
  block[64] = 0.000000000000000e+00;
  block[65] = 0.000000000000000e+00;
  block[66] = 0.000000000000000e+00;
  block[67] = 0.000000000000000e+00;
  block[68] = 0.000000000000000e+00;
  block[69] = 0.000000000000000e+00;
  block[70] = 0.000000000000000e+00;
  block[71] = 0.000000000000000e+00;
  block[72] = 0.000000000000000e+00;
  block[73] = 0.000000000000000e+00;
  block[74] = 0.000000000000000e+00;
  block[75] = 0.000000000000000e+00;
  block[76] = 0.000000000000000e+00;
  block[77] = 0.000000000000000e+00;
  block[78] = 0.000000000000000e+00;
  block[79] = 0.000000000000000e+00;
  block[80] = 0.000000000000000e+00;
  block[81] = 0.000000000000000e+00;
  block[82] = 0.000000000000000e+00;
  block[83] = 0.000000000000000e+00;
  block[84] = 0.000000000000000e+00;
  block[85] = 0.000000000000000e+00;
  block[86] = 0.000000000000000e+00;
  block[87] = 0.000000000000000e+00;
  block[88] = 0.000000000000000e+00;
  block[89] = 0.000000000000000e+00;
  block[90] = 0.000000000000000e+00;
  block[91] = 0.000000000000000e+00;
  block[92] = 0.000000000000000e+00;
  block[93] = 0.000000000000000e+00;
  block[94] = 0.000000000000000e+00;
  block[95] = 0.000000000000000e+00;
  block[96] = 0.000000000000000e+00;
  block[97] = 0.000000000000000e+00;
  block[98] = 0.000000000000000e+00;
  block[99] = 0.000000000000000e+00;
  block[100] = 0.000000000000000e+00;
  block[101] = 0.000000000000000e+00;
  block[102] = 0.000000000000000e+00;
  block[103] = 0.000000000000000e+00;
  block[104] = 0.000000000000000e+00;
  block[105] = 0.000000000000000e+00;
  block[106] = 0.000000000000000e+00;
  block[107] = 0.000000000000000e+00;
  block[108] = 0.000000000000000e+00;
  block[109] = 0.000000000000000e+00;
  block[110] = 0.000000000000000e+00;
  block[111] = 0.000000000000000e+00;
  block[112] = 0.000000000000000e+00;
  block[113] = 0.000000000000000e+00;
  block[114] = 0.000000000000000e+00;
  block[115] = 0.000000000000000e+00;
  block[116] = 0.000000000000000e+00;
  block[117] = 0.000000000000000e+00;
  block[118] = 0.000000000000000e+00;
  block[119] = 0.000000000000000e+00;
  block[120] = 0.000000000000000e+00;
  block[121] = 0.000000000000000e+00;
  block[122] = 0.000000000000000e+00;
  block[123] = 0.000000000000000e+00;
  block[124] = 0.000000000000000e+00;
  block[125] = 0.000000000000000e+00;
  block[126] = 0.000000000000000e+00;
  block[127] = 0.000000000000000e+00;
  block[128] = 0.000000000000000e+00;
  block[129] = 0.000000000000000e+00;
  block[130] = 0.000000000000000e+00;
  block[131] = 0.000000000000000e+00;
  block[132] = 0.000000000000000e+00;
  block[133] = 0.000000000000000e+00;
  block[134] = 0.000000000000000e+00;
  block[135] = 0.000000000000000e+00;
  block[136] = 0.000000000000000e+00;
  block[137] = 0.000000000000000e+00;
  block[138] = 0.000000000000000e+00;
  block[139] = 0.000000000000000e+00;
  block[140] = 0.000000000000000e+00;
  block[141] = 0.000000000000000e+00;
  block[142] = 0.000000000000000e+00;
  block[143] = 0.000000000000000e+00;
  block[144] = 0.000000000000000e+00;
  block[145] = 0.000000000000000e+00;
  block[146] = 0.000000000000000e+00;
  block[147] = 0.000000000000000e+00;
  block[148] = 0.000000000000000e+00;
  block[149] = 0.000000000000000e+00;
  block[150] = 0.000000000000000e+00;
  block[151] = 0.000000000000000e+00;
  block[152] = 0.000000000000000e+00;
  block[153] = 0.000000000000000e+00;
  block[154] = 0.000000000000000e+00;
  block[155] = 0.000000000000000e+00;
  block[156] = 0.000000000000000e+00;
  block[157] = 0.000000000000000e+00;
  block[158] = 0.000000000000000e+00;
  block[159] = 0.000000000000000e+00;
  block[160] = 0.000000000000000e+00;
  block[161] = 0.000000000000000e+00;
  block[162] = 0.000000000000000e+00;
  block[163] = 0.000000000000000e+00;
  block[164] = 0.000000000000000e+00;
  block[165] = 0.000000000000000e+00;
  block[166] = 0.000000000000000e+00;
  block[167] = 0.000000000000000e+00;
  block[168] = 0.000000000000000e+00;
  block[169] = 0.000000000000000e+00;
  block[170] = 0.000000000000000e+00;
  block[171] = 0.000000000000000e+00;
  block[172] = 0.000000000000000e+00;
  block[173] = 0.000000000000000e+00;
  block[174] = 0.000000000000000e+00;
  block[175] = 0.000000000000000e+00;
  block[176] = 0.000000000000000e+00;
  block[177] = 0.000000000000000e+00;
  block[178] = 0.000000000000000e+00;
  block[179] = 0.000000000000000e+00;
  block[180] = 0.000000000000000e+00;
  block[181] = 0.000000000000000e+00;
  block[182] = 0.000000000000000e+00;
  block[183] = 0.000000000000000e+00;
  block[184] = 0.000000000000000e+00;
  block[185] = 0.000000000000000e+00;
  block[186] = 0.000000000000000e+00;
  block[187] = 0.000000000000000e+00;
  block[188] = 0.000000000000000e+00;
  block[189] = 0.000000000000000e+00;
  block[190] = 0.000000000000000e+00;
  block[191] = 0.000000000000000e+00;
  block[192] = 0.000000000000000e+00;
  block[193] = 0.000000000000000e+00;
  block[194] = 0.000000000000000e+00;
  block[195] = 0.000000000000000e+00;
  block[196] = 0.000000000000000e+00;
  block[197] = 0.000000000000000e+00;
  block[198] = 0.000000000000000e+00;
  block[199] = 0.000000000000000e+00;
  block[200] = 0.000000000000000e+00;
  block[201] = 0.000000000000000e+00;
  block[202] = 0.000000000000000e+00;
  block[203] = 0.000000000000000e+00;
  block[204] = 0.000000000000000e+00;
  block[205] = 0.000000000000000e+00;
  block[206] = 0.000000000000000e+00;
  block[207] = 0.000000000000000e+00;
  block[208] = 0.000000000000000e+00;
  block[209] = 0.000000000000000e+00;
  block[210] = 0.000000000000000e+00;
  block[211] = 0.000000000000000e+00;
  block[212] = 0.000000000000000e+00;
  block[213] = 0.000000000000000e+00;
  block[214] = 0.000000000000000e+00;
  block[215] = 0.000000000000000e+00;
  block[216] = 0.000000000000000e+00;
  block[217] = 0.000000000000000e+00;
  block[218] = 0.000000000000000e+00;
  block[219] = 0.000000000000000e+00;
  block[220] = 0.000000000000000e+00;
  block[221] = 0.000000000000000e+00;
  block[222] = 0.000000000000000e+00;
  block[223] = 0.000000000000000e+00;
  block[224] = 0.000000000000000e+00;
  block[225] = 0.000000000000000e+00;
  block[226] = 0.000000000000000e+00;
  block[227] = 0.000000000000000e+00;
  block[228] = 0.000000000000000e+00;
  block[229] = 0.000000000000000e+00;
  block[230] = 0.000000000000000e+00;
  block[231] = 0.000000000000000e+00;
  block[232] = 0.000000000000000e+00;
  block[233] = 0.000000000000000e+00;
  block[234] = 0.000000000000000e+00;
  block[235] = 0.000000000000000e+00;
  block[236] = 0.000000000000000e+00;
  block[237] = 0.000000000000000e+00;
  block[238] = 0.000000000000000e+00;
  block[239] = 0.000000000000000e+00;
  block[240] = 0.000000000000000e+00;
  block[241] = 0.000000000000000e+00;
  block[242] = 0.000000000000000e+00;
  block[243] = 0.000000000000000e+00;
  block[244] = 0.000000000000000e+00;
  block[245] = 0.000000000000000e+00;
  block[246] = 0.000000000000000e+00;
  block[247] = 0.000000000000000e+00;
  block[248] = 0.000000000000000e+00;
  block[249] = 0.000000000000000e+00;
  block[250] = 0.000000000000000e+00;
  block[251] = 0.000000000000000e+00;
  block[252] = 0.000000000000000e+00;
  block[253] = 0.000000000000000e+00;
  block[254] = 0.000000000000000e+00;
  block[255] = 0.000000000000000e+00;
  block[256] = 0.000000000000000e+00;
  block[257] = 0.000000000000000e+00;
  block[258] = 0.000000000000000e+00;
  block[259] = 0.000000000000000e+00;
  block[260] = 0.000000000000000e+00;
  block[261] = 0.000000000000000e+00;
  block[262] = 0.000000000000000e+00;
  block[263] = 0.000000000000000e+00;
  block[264] = 0.000000000000000e+00;
  block[265] = 0.000000000000000e+00;
  block[266] = 0.000000000000000e+00;
  block[267] = 0.000000000000000e+00;
  block[268] = 0.000000000000000e+00;
  block[269] = 0.000000000000000e+00;
  block[270] = 0.000000000000000e+00;
  block[271] = 0.000000000000000e+00;
  block[272] = 0.000000000000000e+00;
  block[273] = 0.000000000000000e+00;
  block[274] = 0.000000000000000e+00;
  block[275] = 0.000000000000000e+00;
  block[276] = 0.000000000000000e+00;
  block[277] = 0.000000000000000e+00;
  block[278] = 0.000000000000000e+00;
  block[279] = 0.000000000000000e+00;
  block[280] = 0.000000000000000e+00;
  block[281] = 0.000000000000000e+00;
  block[282] = 0.000000000000000e+00;
  block[283] = 0.000000000000000e+00;
  block[284] = 0.000000000000000e+00;
  block[285] = 0.000000000000000e+00;
  block[286] = 0.000000000000000e+00;
  block[287] = 0.000000000000000e+00;
  block[288] = 0.000000000000000e+00;
  block[289] = 0.000000000000000e+00;
  block[290] = 0.000000000000000e+00;
  block[291] = 0.000000000000000e+00;
  block[292] = 0.000000000000000e+00;
  block[293] = 0.000000000000000e+00;
  block[294] = 0.000000000000000e+00;
  block[295] = 0.000000000000000e+00;
  block[296] = 0.000000000000000e+00;
  block[297] = 0.000000000000000e+00;
  block[298] = 0.000000000000000e+00;
  block[299] = 0.000000000000000e+00;
  block[300] = 0.000000000000000e+00;
  block[301] = 0.000000000000000e+00;
  block[302] = 0.000000000000000e+00;
  block[303] = 0.000000000000000e+00;
  block[304] = 0.000000000000000e+00;
  block[305] = 0.000000000000000e+00;
  block[306] = 0.000000000000000e+00;
  block[307] = 0.000000000000000e+00;
  block[308] = 0.000000000000000e+00;
  block[309] = 0.000000000000000e+00;
  block[310] = 0.000000000000000e+00;
  block[311] = 0.000000000000000e+00;
  block[312] = 0.000000000000000e+00;
  block[313] = 0.000000000000000e+00;
  block[314] = 0.000000000000000e+00;
  block[315] = 0.000000000000000e+00;
  block[316] = 0.000000000000000e+00;
  block[317] = 0.000000000000000e+00;
  block[318] = 0.000000000000000e+00;
  block[319] = 0.000000000000000e+00;
  block[320] = 0.000000000000000e+00;
  block[321] = 0.000000000000000e+00;
  block[322] = 0.000000000000000e+00;
  block[323] = 0.000000000000000e+00;
  block[324] = 0.000000000000000e+00;
  block[325] = 0.000000000000000e+00;
  block[326] = 0.000000000000000e+00;
  block[327] = 0.000000000000000e+00;
  block[328] = 0.000000000000000e+00;
  block[329] = 0.000000000000000e+00;
  block[330] = 0.000000000000000e+00;
  block[331] = 0.000000000000000e+00;
  block[332] = 0.000000000000000e+00;
  block[333] = 0.000000000000000e+00;
  block[334] = 0.000000000000000e+00;
  block[335] = 0.000000000000000e+00;
  block[336] = 0.000000000000000e+00;
  block[337] = 0.000000000000000e+00;
  block[338] = 0.000000000000000e+00;
  block[339] = 0.000000000000000e+00;
  block[340] = 0.000000000000000e+00;
  block[341] = 0.000000000000000e+00;
  block[342] = 0.000000000000000e+00;
  block[343] = 0.000000000000000e+00;
  block[344] = 0.000000000000000e+00;
  block[345] = 0.000000000000000e+00;
  block[346] = 0.000000000000000e+00;
  block[347] = 0.000000000000000e+00;
  block[348] = 0.000000000000000e+00;
  block[349] = 0.000000000000000e+00;
  block[350] = 0.000000000000000e+00;
  block[351] = 0.000000000000000e+00;
  block[352] = 0.000000000000000e+00;
  block[353] = 0.000000000000000e+00;
  block[354] = 0.000000000000000e+00;
  block[355] = 0.000000000000000e+00;
  block[356] = 0.000000000000000e+00;
  block[357] = 0.000000000000000e+00;
  block[358] = 0.000000000000000e+00;
  block[359] = 0.000000000000000e+00;
  block[360] = 0.000000000000000e+00;
  block[361] = 0.000000000000000e+00;
  block[362] = 0.000000000000000e+00;
  block[363] = 0.000000000000000e+00;
  block[364] = 0.000000000000000e+00;
  block[365] = 0.000000000000000e+00;
  block[366] = 0.000000000000000e+00;
  block[367] = 0.000000000000000e+00;
  block[368] = 0.000000000000000e+00;
  block[369] = 0.000000000000000e+00;
  block[370] = 0.000000000000000e+00;
  block[371] = 0.000000000000000e+00;
  block[372] = 0.000000000000000e+00;
  block[373] = 0.000000000000000e+00;
  block[374] = 0.000000000000000e+00;
  block[375] = 0.000000000000000e+00;
  block[376] = 0.000000000000000e+00;
  block[377] = 0.000000000000000e+00;
  block[378] = 0.000000000000000e+00;
  block[379] = 0.000000000000000e+00;
  block[380] = 0.000000000000000e+00;
  block[381] = 0.000000000000000e+00;
  block[382] = 0.000000000000000e+00;
  block[383] = 0.000000000000000e+00;
  block[384] = 0.000000000000000e+00;
  block[385] = 0.000000000000000e+00;
  block[386] = 0.000000000000000e+00;
  block[387] = 0.000000000000000e+00;
  block[388] = 0.000000000000000e+00;
  block[389] = 0.000000000000000e+00;
  block[390] = 0.000000000000000e+00;
  block[391] = 0.000000000000000e+00;
  block[392] = 0.000000000000000e+00;
  block[393] = 0.000000000000000e+00;
  block[394] = 0.000000000000000e+00;
  block[395] = 0.000000000000000e+00;
  block[396] = 0.000000000000000e+00;
  block[397] = 0.000000000000000e+00;
  block[398] = 0.000000000000000e+00;
  block[399] = 0.000000000000000e+00;
}

// No contribution from the boundary
bool BilinearForm::boundary_contribution() const { return false; }

void BilinearForm::eval(real block[], const AffineMap& map, real det, unsigned int facet) const {}

// No contribution from interior boundaries
bool BilinearForm::interior_boundary_contribution() const { return false; }

void BilinearForm::eval(real block[], const AffineMap& map0, const AffineMap& map1, real det, unsigned int facet0, unsigned int facet1, unsigned int alignment) const {}

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class LinearForm : public dolfin::LinearForm
{
public:

  class TestElement;

  class FunctionElement_0;

  class FunctionElement_1;

  LinearForm(Function& w0, Function& w1, const real& c0, const real& c1);
  

  bool interior_contribution() const;

  void eval(real block[], const AffineMap& map, real det) const;

  bool boundary_contribution() const;

  void eval(real block[], const AffineMap& map, real det, unsigned int facet) const;

  bool interior_boundary_contribution() const;

  void eval(real block[], const AffineMap& map0, const AffineMap& map1, real det, unsigned int facet0, unsigned int facet1, unsigned int alignment) const;

private:

  const real& c0;  const real& c1;

};

class LinearForm::TestElement : public dolfin::FiniteElement
{
public:

  TestElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 5;

    subelements = new FiniteElement* [3];
    subelements[0] = new SubElement_0();
    subelements[1] = new SubElement_1();
    subelements[2] = new SubElement_2();
  }

  ~TestElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 20;
  }

  inline unsigned int shapedim() const
  {
    return 3;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 3;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    nodes[3] = cell.entities(0)[3];
    int offset = mesh.topology().size(0);
    nodes[4] = offset + cell.entities(0)[0];
    nodes[5] = offset + cell.entities(0)[1];
    nodes[6] = offset + cell.entities(0)[2];
    nodes[7] = offset + cell.entities(0)[3];
    offset = offset + mesh.topology().size(0);
    nodes[8] = offset + cell.entities(0)[0];
    nodes[9] = offset + cell.entities(0)[1];
    nodes[10] = offset + cell.entities(0)[2];
    nodes[11] = offset + cell.entities(0)[3];
    offset = offset + mesh.topology().size(0);
    nodes[12] = offset + cell.entities(0)[0];
    nodes[13] = offset + cell.entities(0)[1];
    nodes[14] = offset + cell.entities(0)[2];
    nodes[15] = offset + cell.entities(0)[3];
    offset = offset + mesh.topology().size(0);
    nodes[16] = offset + cell.entities(0)[0];
    nodes[17] = offset + cell.entities(0)[1];
    nodes[18] = offset + cell.entities(0)[2];
    nodes[19] = offset + cell.entities(0)[3];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
    points[4] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[6] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[7] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[8] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[9] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[10] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[11] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[12] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[13] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[14] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[15] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    components[4] = 1;
    components[5] = 1;
    components[6] = 1;
    components[7] = 1;
    components[8] = 2;
    components[9] = 2;
    components[10] = 2;
    components[11] = 2;
    components[12] = 3;
    components[13] = 3;
    components[14] = 3;
    components[15] = 3;
    points[16] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[17] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[18] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[19] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    components[16] = 4;
    components[17] = 4;
    components[18] = 4;
    components[19] = 4;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
    offset = offset + mesh.topology().size(0);
    vertex_nodes[2] = offset + vertex;
    offset = offset + mesh.topology().size(0);
    vertex_nodes[3] = offset + vertex;
    offset = offset + mesh.topology().size(0);
    vertex_nodes[4] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *subelements[i];
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *subelements[i];
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("mixed");
    return s;
  }
  
private:

class SubElement_0 : public dolfin::FiniteElement
{
public:

  SubElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 4;
  }

  inline unsigned int shapedim() const
  {
    return 3;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    nodes[3] = cell.entities(0)[3];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "tetrahedron", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class SubElement_1 : public dolfin::FiniteElement
{
public:

  SubElement_1() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 3;

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_1()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 12;
  }

  inline unsigned int shapedim() const
  {
    return 3;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    nodes[3] = cell.entities(0)[3];
    int offset = mesh.topology().size(0);
    nodes[4] = offset + cell.entities(0)[0];
    nodes[5] = offset + cell.entities(0)[1];
    nodes[6] = offset + cell.entities(0)[2];
    nodes[7] = offset + cell.entities(0)[3];
    offset = offset + mesh.topology().size(0);
    nodes[8] = offset + cell.entities(0)[0];
    nodes[9] = offset + cell.entities(0)[1];
    nodes[10] = offset + cell.entities(0)[2];
    nodes[11] = offset + cell.entities(0)[3];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[4] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[6] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[7] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[8] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[9] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[10] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[11] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
    components[4] = 1;
    components[5] = 1;
    components[6] = 1;
    components[7] = 1;
    components[8] = 2;
    components[9] = 2;
    components[10] = 2;
    components[11] = 2;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
    offset = offset + mesh.topology().size(0);
    vertex_nodes[2] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "tetrahedron", 1, 3);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class SubElement_2 : public dolfin::FiniteElement
{
public:

  SubElement_2() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_2()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 4;
  }

  inline unsigned int shapedim() const
  {
    return 3;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    nodes[3] = cell.entities(0)[3];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "tetrahedron", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class LinearForm::FunctionElement_0 : public dolfin::FiniteElement
{
public:

  FunctionElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 5;

    subelements = new FiniteElement* [3];
    subelements[0] = new SubElement_0();
    subelements[1] = new SubElement_1();
    subelements[2] = new SubElement_2();
  }

  ~FunctionElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 20;
  }

  inline unsigned int shapedim() const
  {
    return 3;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 3;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    nodes[3] = cell.entities(0)[3];
    int offset = mesh.topology().size(0);
    nodes[4] = offset + cell.entities(0)[0];
    nodes[5] = offset + cell.entities(0)[1];
    nodes[6] = offset + cell.entities(0)[2];
    nodes[7] = offset + cell.entities(0)[3];
    offset = offset + mesh.topology().size(0);
    nodes[8] = offset + cell.entities(0)[0];
    nodes[9] = offset + cell.entities(0)[1];
    nodes[10] = offset + cell.entities(0)[2];
    nodes[11] = offset + cell.entities(0)[3];
    offset = offset + mesh.topology().size(0);
    nodes[12] = offset + cell.entities(0)[0];
    nodes[13] = offset + cell.entities(0)[1];
    nodes[14] = offset + cell.entities(0)[2];
    nodes[15] = offset + cell.entities(0)[3];
    offset = offset + mesh.topology().size(0);
    nodes[16] = offset + cell.entities(0)[0];
    nodes[17] = offset + cell.entities(0)[1];
    nodes[18] = offset + cell.entities(0)[2];
    nodes[19] = offset + cell.entities(0)[3];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
    points[4] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[6] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[7] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[8] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[9] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[10] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[11] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[12] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[13] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[14] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[15] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    components[4] = 1;
    components[5] = 1;
    components[6] = 1;
    components[7] = 1;
    components[8] = 2;
    components[9] = 2;
    components[10] = 2;
    components[11] = 2;
    components[12] = 3;
    components[13] = 3;
    components[14] = 3;
    components[15] = 3;
    points[16] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[17] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[18] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[19] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    components[16] = 4;
    components[17] = 4;
    components[18] = 4;
    components[19] = 4;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
    offset = offset + mesh.topology().size(0);
    vertex_nodes[2] = offset + vertex;
    offset = offset + mesh.topology().size(0);
    vertex_nodes[3] = offset + vertex;
    offset = offset + mesh.topology().size(0);
    vertex_nodes[4] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *subelements[i];
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *subelements[i];
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("mixed");
    return s;
  }
  
private:

class SubElement_0 : public dolfin::FiniteElement
{
public:

  SubElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 4;
  }

  inline unsigned int shapedim() const
  {
    return 3;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    nodes[3] = cell.entities(0)[3];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "tetrahedron", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class SubElement_1 : public dolfin::FiniteElement
{
public:

  SubElement_1() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 3;

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_1()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 12;
  }

  inline unsigned int shapedim() const
  {
    return 3;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    nodes[3] = cell.entities(0)[3];
    int offset = mesh.topology().size(0);
    nodes[4] = offset + cell.entities(0)[0];
    nodes[5] = offset + cell.entities(0)[1];
    nodes[6] = offset + cell.entities(0)[2];
    nodes[7] = offset + cell.entities(0)[3];
    offset = offset + mesh.topology().size(0);
    nodes[8] = offset + cell.entities(0)[0];
    nodes[9] = offset + cell.entities(0)[1];
    nodes[10] = offset + cell.entities(0)[2];
    nodes[11] = offset + cell.entities(0)[3];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[4] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[6] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[7] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[8] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[9] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[10] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[11] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
    components[4] = 1;
    components[5] = 1;
    components[6] = 1;
    components[7] = 1;
    components[8] = 2;
    components[9] = 2;
    components[10] = 2;
    components[11] = 2;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
    offset = offset + mesh.topology().size(0);
    vertex_nodes[2] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "tetrahedron", 1, 3);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class SubElement_2 : public dolfin::FiniteElement
{
public:

  SubElement_2() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_2()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 4;
  }

  inline unsigned int shapedim() const
  {
    return 3;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    nodes[3] = cell.entities(0)[3];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "tetrahedron", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class LinearForm::FunctionElement_1 : public dolfin::FiniteElement
{
public:

  FunctionElement_1() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 3;

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_1()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 12;
  }

  inline unsigned int shapedim() const
  {
    return 3;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    nodes[3] = cell.entities(0)[3];
    int offset = mesh.topology().size(0);
    nodes[4] = offset + cell.entities(0)[0];
    nodes[5] = offset + cell.entities(0)[1];
    nodes[6] = offset + cell.entities(0)[2];
    nodes[7] = offset + cell.entities(0)[3];
    offset = offset + mesh.topology().size(0);
    nodes[8] = offset + cell.entities(0)[0];
    nodes[9] = offset + cell.entities(0)[1];
    nodes[10] = offset + cell.entities(0)[2];
    nodes[11] = offset + cell.entities(0)[3];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[4] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[6] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[7] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[8] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[9] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[10] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[11] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
    components[4] = 1;
    components[5] = 1;
    components[6] = 1;
    components[7] = 1;
    components[8] = 2;
    components[9] = 2;
    components[10] = 2;
    components[11] = 2;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
    offset = offset + mesh.topology().size(0);
    vertex_nodes[2] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "tetrahedron", 1, 3);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

LinearForm::LinearForm(Function& w0, Function& w1, const real& c0, const real& c1) : dolfin::LinearForm(2), c0(c0), c1(c1)
{
  // Create finite element for test space
  _test = new TestElement();

  // Add functions
  initFunction(0, w0, new FunctionElement_0());
  initFunction(1, w1, new FunctionElement_1());
}

// Contribution from the interior
bool LinearForm::interior_contribution() const { return true; }

void LinearForm::eval(real block[], const AffineMap& map, real det) const
{
  // Compute coefficients
  const real c0_0 = c[0][0];
  const real c0_1 = c[0][1];
  const real c0_2 = c[0][2];
  const real c0_3 = c[0][3];
  const real c1_0 = 2.500000000000001e-01*c[1][0] + 2.500000000000000e-01*c[1][1] + 2.500000000000000e-01*c[1][2] + 2.500000000000000e-01*c[1][3];
  const real c1_1 = 2.500000000000001e-01*c[1][4] + 2.500000000000000e-01*c[1][5] + 2.500000000000000e-01*c[1][6] + 2.500000000000000e-01*c[1][7];
  const real c1_2 = 2.500000000000001e-01*c[1][8] + 2.500000000000000e-01*c[1][9] + 2.500000000000000e-01*c[1][10] + 2.500000000000000e-01*c[1][11];

  // Compute geometry tensors
  const real G0_0 = det*c0_0;
  const real G0_1 = det*c0_1;
  const real G0_2 = det*c0_2;
  const real G0_3 = det*c0_3;
  const real G1_0_0_0 = det*c0*c1_0*c0_0*map.g00;
  const real G1_0_0_1 = det*c0*c1_0*c0_1*map.g00;
  const real G1_0_0_2 = det*c0*c1_0*c0_2*map.g00;
  const real G1_0_0_3 = det*c0*c1_0*c0_3*map.g00;
  const real G1_0_1_0 = det*c0*c1_0*c0_0*map.g10;
  const real G1_0_1_1 = det*c0*c1_0*c0_1*map.g10;
  const real G1_0_1_2 = det*c0*c1_0*c0_2*map.g10;
  const real G1_0_1_3 = det*c0*c1_0*c0_3*map.g10;
  const real G1_0_2_0 = det*c0*c1_0*c0_0*map.g20;
  const real G1_0_2_1 = det*c0*c1_0*c0_1*map.g20;
  const real G1_0_2_2 = det*c0*c1_0*c0_2*map.g20;
  const real G1_0_2_3 = det*c0*c1_0*c0_3*map.g20;
  const real G2_1_0_0 = det*c0*c1_1*c0_0*map.g01;
  const real G2_1_0_1 = det*c0*c1_1*c0_1*map.g01;
  const real G2_1_0_2 = det*c0*c1_1*c0_2*map.g01;
  const real G2_1_0_3 = det*c0*c1_1*c0_3*map.g01;
  const real G2_1_1_0 = det*c0*c1_1*c0_0*map.g11;
  const real G2_1_1_1 = det*c0*c1_1*c0_1*map.g11;
  const real G2_1_1_2 = det*c0*c1_1*c0_2*map.g11;
  const real G2_1_1_3 = det*c0*c1_1*c0_3*map.g11;
  const real G2_1_2_0 = det*c0*c1_1*c0_0*map.g21;
  const real G2_1_2_1 = det*c0*c1_1*c0_1*map.g21;
  const real G2_1_2_2 = det*c0*c1_1*c0_2*map.g21;
  const real G2_1_2_3 = det*c0*c1_1*c0_3*map.g21;
  const real G3_2_0_0 = det*c0*c1_2*c0_0*map.g02;
  const real G3_2_0_1 = det*c0*c1_2*c0_1*map.g02;
  const real G3_2_0_2 = det*c0*c1_2*c0_2*map.g02;
  const real G3_2_0_3 = det*c0*c1_2*c0_3*map.g02;
  const real G3_2_1_0 = det*c0*c1_2*c0_0*map.g12;
  const real G3_2_1_1 = det*c0*c1_2*c0_1*map.g12;
  const real G3_2_1_2 = det*c0*c1_2*c0_2*map.g12;
  const real G3_2_1_3 = det*c0*c1_2*c0_3*map.g12;
  const real G3_2_2_0 = det*c0*c1_2*c0_0*map.g22;
  const real G3_2_2_1 = det*c0*c1_2*c0_1*map.g22;
  const real G3_2_2_2 = det*c0*c1_2*c0_2*map.g22;
  const real G3_2_2_3 = det*c0*c1_2*c0_3*map.g22;
  const real G4_0_0_0 = det*c0*c1*c0_0*map.g00*map.g00 + det*c0*c1*c0_0*map.g01*map.g01 + det*c0*c1*c0_0*map.g02*map.g02;
  const real G4_0_0_1 = det*c0*c1*c0_0*map.g00*map.g10 + det*c0*c1*c0_0*map.g01*map.g11 + det*c0*c1*c0_0*map.g02*map.g12;
  const real G4_0_0_2 = det*c0*c1*c0_0*map.g00*map.g20 + det*c0*c1*c0_0*map.g01*map.g21 + det*c0*c1*c0_0*map.g02*map.g22;
  const real G4_0_1_0 = det*c0*c1*c0_0*map.g10*map.g00 + det*c0*c1*c0_0*map.g11*map.g01 + det*c0*c1*c0_0*map.g12*map.g02;
  const real G4_0_1_1 = det*c0*c1*c0_0*map.g10*map.g10 + det*c0*c1*c0_0*map.g11*map.g11 + det*c0*c1*c0_0*map.g12*map.g12;
  const real G4_0_1_2 = det*c0*c1*c0_0*map.g10*map.g20 + det*c0*c1*c0_0*map.g11*map.g21 + det*c0*c1*c0_0*map.g12*map.g22;
  const real G4_0_2_0 = det*c0*c1*c0_0*map.g20*map.g00 + det*c0*c1*c0_0*map.g21*map.g01 + det*c0*c1*c0_0*map.g22*map.g02;
  const real G4_0_2_1 = det*c0*c1*c0_0*map.g20*map.g10 + det*c0*c1*c0_0*map.g21*map.g11 + det*c0*c1*c0_0*map.g22*map.g12;
  const real G4_0_2_2 = det*c0*c1*c0_0*map.g20*map.g20 + det*c0*c1*c0_0*map.g21*map.g21 + det*c0*c1*c0_0*map.g22*map.g22;
  const real G4_1_0_0 = det*c0*c1*c0_1*map.g00*map.g00 + det*c0*c1*c0_1*map.g01*map.g01 + det*c0*c1*c0_1*map.g02*map.g02;
  const real G4_1_1_0 = det*c0*c1*c0_1*map.g10*map.g00 + det*c0*c1*c0_1*map.g11*map.g01 + det*c0*c1*c0_1*map.g12*map.g02;
  const real G4_1_2_0 = det*c0*c1*c0_1*map.g20*map.g00 + det*c0*c1*c0_1*map.g21*map.g01 + det*c0*c1*c0_1*map.g22*map.g02;
  const real G4_2_0_1 = det*c0*c1*c0_2*map.g00*map.g10 + det*c0*c1*c0_2*map.g01*map.g11 + det*c0*c1*c0_2*map.g02*map.g12;
  const real G4_2_1_1 = det*c0*c1*c0_2*map.g10*map.g10 + det*c0*c1*c0_2*map.g11*map.g11 + det*c0*c1*c0_2*map.g12*map.g12;
  const real G4_2_2_1 = det*c0*c1*c0_2*map.g20*map.g10 + det*c0*c1*c0_2*map.g21*map.g11 + det*c0*c1*c0_2*map.g22*map.g12;
  const real G4_3_0_2 = det*c0*c1*c0_3*map.g00*map.g20 + det*c0*c1*c0_3*map.g01*map.g21 + det*c0*c1*c0_3*map.g02*map.g22;
  const real G4_3_1_2 = det*c0*c1*c0_3*map.g10*map.g20 + det*c0*c1*c0_3*map.g11*map.g21 + det*c0*c1*c0_3*map.g12*map.g22;
  const real G4_3_2_2 = det*c0*c1*c0_3*map.g20*map.g20 + det*c0*c1*c0_3*map.g21*map.g21 + det*c0*c1*c0_3*map.g22*map.g22;

  // Compute element tensor
  block[0] = 1.666666666666662e-02*G0_0 + 8.333333333333311e-03*G0_1 + 8.333333333333309e-03*G0_2 + 8.333333333333312e-03*G0_3 - 2.083333333333331e-02*G1_0_0_0 - 2.083333333333331e-02*G1_0_0_1 - 2.083333333333331e-02*G1_0_0_2 - 2.083333333333331e-02*G1_0_0_3 - 2.083333333333331e-02*G1_0_1_0 - 2.083333333333331e-02*G1_0_1_1 - 2.083333333333331e-02*G1_0_1_2 - 2.083333333333331e-02*G1_0_1_3 - 2.083333333333331e-02*G1_0_2_0 - 2.083333333333330e-02*G1_0_2_1 - 2.083333333333330e-02*G1_0_2_2 - 2.083333333333330e-02*G1_0_2_3 - 2.083333333333331e-02*G2_1_0_0 - 2.083333333333331e-02*G2_1_0_1 - 2.083333333333331e-02*G2_1_0_2 - 2.083333333333331e-02*G2_1_0_3 - 2.083333333333331e-02*G2_1_1_0 - 2.083333333333331e-02*G2_1_1_1 - 2.083333333333331e-02*G2_1_1_2 - 2.083333333333331e-02*G2_1_1_3 - 2.083333333333331e-02*G2_1_2_0 - 2.083333333333330e-02*G2_1_2_1 - 2.083333333333330e-02*G2_1_2_2 - 2.083333333333330e-02*G2_1_2_3 - 2.083333333333331e-02*G3_2_0_0 - 2.083333333333331e-02*G3_2_0_1 - 2.083333333333331e-02*G3_2_0_2 - 2.083333333333331e-02*G3_2_0_3 - 2.083333333333331e-02*G3_2_1_0 - 2.083333333333331e-02*G3_2_1_1 - 2.083333333333331e-02*G3_2_1_2 - 2.083333333333331e-02*G3_2_1_3 - 2.083333333333331e-02*G3_2_2_0 - 2.083333333333330e-02*G3_2_2_1 - 2.083333333333330e-02*G3_2_2_2 - 2.083333333333330e-02*G3_2_2_3 - 8.333333333333323e-02*G4_0_0_0 - 8.333333333333323e-02*G4_0_0_1 - 8.333333333333322e-02*G4_0_0_2 - 8.333333333333323e-02*G4_0_1_0 - 8.333333333333323e-02*G4_0_1_1 - 8.333333333333322e-02*G4_0_1_2 - 8.333333333333322e-02*G4_0_2_0 - 8.333333333333322e-02*G4_0_2_1 - 8.333333333333320e-02*G4_0_2_2 + 8.333333333333323e-02*G4_1_0_0 + 8.333333333333323e-02*G4_1_1_0 + 8.333333333333322e-02*G4_1_2_0 + 8.333333333333323e-02*G4_2_0_1 + 8.333333333333323e-02*G4_2_1_1 + 8.333333333333322e-02*G4_2_2_1 + 8.333333333333323e-02*G4_3_0_2 + 8.333333333333323e-02*G4_3_1_2 + 8.333333333333322e-02*G4_3_2_2;
  block[1] = 8.333333333333311e-03*G0_0 + 1.666666666666662e-02*G0_1 + 8.333333333333311e-03*G0_2 + 8.333333333333312e-03*G0_3 + 2.083333333333331e-02*G1_0_0_0 + 2.083333333333331e-02*G1_0_0_1 + 2.083333333333331e-02*G1_0_0_2 + 2.083333333333331e-02*G1_0_0_3 + 2.083333333333331e-02*G2_1_0_0 + 2.083333333333331e-02*G2_1_0_1 + 2.083333333333331e-02*G2_1_0_2 + 2.083333333333331e-02*G2_1_0_3 + 2.083333333333331e-02*G3_2_0_0 + 2.083333333333331e-02*G3_2_0_1 + 2.083333333333331e-02*G3_2_0_2 + 2.083333333333331e-02*G3_2_0_3 + 8.333333333333323e-02*G4_0_0_0 + 8.333333333333323e-02*G4_0_0_1 + 8.333333333333322e-02*G4_0_0_2 - 8.333333333333323e-02*G4_1_0_0 - 8.333333333333323e-02*G4_2_0_1 - 8.333333333333323e-02*G4_3_0_2;
  block[2] = 8.333333333333309e-03*G0_0 + 8.333333333333311e-03*G0_1 + 1.666666666666662e-02*G0_2 + 8.333333333333312e-03*G0_3 + 2.083333333333331e-02*G1_0_1_0 + 2.083333333333331e-02*G1_0_1_1 + 2.083333333333331e-02*G1_0_1_2 + 2.083333333333331e-02*G1_0_1_3 + 2.083333333333331e-02*G2_1_1_0 + 2.083333333333331e-02*G2_1_1_1 + 2.083333333333331e-02*G2_1_1_2 + 2.083333333333331e-02*G2_1_1_3 + 2.083333333333331e-02*G3_2_1_0 + 2.083333333333331e-02*G3_2_1_1 + 2.083333333333331e-02*G3_2_1_2 + 2.083333333333331e-02*G3_2_1_3 + 8.333333333333323e-02*G4_0_1_0 + 8.333333333333323e-02*G4_0_1_1 + 8.333333333333322e-02*G4_0_1_2 - 8.333333333333323e-02*G4_1_1_0 - 8.333333333333323e-02*G4_2_1_1 - 8.333333333333323e-02*G4_3_1_2;
  block[3] = 8.333333333333312e-03*G0_0 + 8.333333333333312e-03*G0_1 + 8.333333333333311e-03*G0_2 + 1.666666666666662e-02*G0_3 + 2.083333333333331e-02*G1_0_2_0 + 2.083333333333331e-02*G1_0_2_1 + 2.083333333333331e-02*G1_0_2_2 + 2.083333333333331e-02*G1_0_2_3 + 2.083333333333331e-02*G2_1_2_0 + 2.083333333333331e-02*G2_1_2_1 + 2.083333333333331e-02*G2_1_2_2 + 2.083333333333331e-02*G2_1_2_3 + 2.083333333333331e-02*G3_2_2_0 + 2.083333333333331e-02*G3_2_2_1 + 2.083333333333331e-02*G3_2_2_2 + 2.083333333333331e-02*G3_2_2_3 + 8.333333333333323e-02*G4_0_2_0 + 8.333333333333323e-02*G4_0_2_1 + 8.333333333333322e-02*G4_0_2_2 - 8.333333333333323e-02*G4_1_2_0 - 8.333333333333323e-02*G4_2_2_1 - 8.333333333333323e-02*G4_3_2_2;
  block[4] = 0.000000000000000e+00;
  block[5] = 0.000000000000000e+00;
  block[6] = 0.000000000000000e+00;
  block[7] = 0.000000000000000e+00;
  block[8] = 0.000000000000000e+00;
  block[9] = 0.000000000000000e+00;
  block[10] = 0.000000000000000e+00;
  block[11] = 0.000000000000000e+00;
  block[12] = 0.000000000000000e+00;
  block[13] = 0.000000000000000e+00;
  block[14] = 0.000000000000000e+00;
  block[15] = 0.000000000000000e+00;
  block[16] = 0.000000000000000e+00;
  block[17] = 0.000000000000000e+00;
  block[18] = 0.000000000000000e+00;
  block[19] = 0.000000000000000e+00;
}

// No contribution from the boundary
bool LinearForm::boundary_contribution() const { return false; }

void LinearForm::eval(real block[], const AffineMap& map, real det, unsigned int facet) const {}

// No contribution from interior boundaries
bool LinearForm::interior_boundary_contribution() const { return false; }

void LinearForm::eval(real block[], const AffineMap& map0, const AffineMap& map1, real det, unsigned int facet0, unsigned int facet1, unsigned int alignment) const {}

} }

#endif
