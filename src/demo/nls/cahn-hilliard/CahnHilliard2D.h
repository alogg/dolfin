// Automatically generated by FFC, the FEniCS Form Compiler, version 0.3.3-dev.
// For further information, go to http://www/fenics.org/ffc/.
// Licensed under the GNU GPL Version 2.

#ifndef __CAHNHILLIARD2D_H
#define __CAHNHILLIARD2D_H

#include <dolfin/Mesh.h>
#include <dolfin/Cell.h>
#include <dolfin/Point.h>
#include <dolfin/AffineMap.h>
#include <dolfin/FiniteElement.h>
#include <dolfin/FiniteElementSpec.h>
#include <dolfin/BilinearForm.h>
#include <dolfin/LinearForm.h>
#include <dolfin/Functional.h>
#include <dolfin/FEM.h>

namespace dolfin { namespace CahnHilliard2D {

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class BilinearForm : public dolfin::BilinearForm
{
public:

  class TestElement;

  class TrialElement;

  class FunctionElement_0;

  BilinearForm(Function& w0, const real& c0, const real& c1, const real& c2, const real& c3);
  

  bool interior_contribution() const;

  void eval(real block[], const AffineMap& map) const;

  bool boundary_contribution() const;

  void eval(real block[], const AffineMap& map, unsigned int facet) const;

private:

  const real& c0;  const real& c1;  const real& c2;  const real& c3;

};

class BilinearForm::TestElement : public dolfin::FiniteElement
{
public:

  TestElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 2;

    subelements = new FiniteElement* [2];
    subelements[0] = new SubElement_0();
    subelements[1] = new SubElement_1();
  }

  ~TestElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 6;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 2;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(0)[0];
    nodes[4] = offset + cell.entities(0)[1];
    nodes[5] = offset + cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[4] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[3] = 1;
    components[4] = 1;
    components[5] = 1;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *subelements[i];
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *subelements[i];
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("mixed");
    return s;
  }
  
private:

class SubElement_0 : public dolfin::FiniteElement
{
public:

  SubElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 3;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class SubElement_1 : public dolfin::FiniteElement
{
public:

  SubElement_1() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_1()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 3;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class BilinearForm::TrialElement : public dolfin::FiniteElement
{
public:

  TrialElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 2;

    subelements = new FiniteElement* [2];
    subelements[0] = new SubElement_0();
    subelements[1] = new SubElement_1();
  }

  ~TrialElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 6;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 2;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(0)[0];
    nodes[4] = offset + cell.entities(0)[1];
    nodes[5] = offset + cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[4] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[3] = 1;
    components[4] = 1;
    components[5] = 1;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *subelements[i];
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *subelements[i];
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("mixed");
    return s;
  }
  
private:

class SubElement_0 : public dolfin::FiniteElement
{
public:

  SubElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 3;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class SubElement_1 : public dolfin::FiniteElement
{
public:

  SubElement_1() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_1()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 3;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class BilinearForm::FunctionElement_0 : public dolfin::FiniteElement
{
public:

  FunctionElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 2;

    subelements = new FiniteElement* [2];
    subelements[0] = new SubElement_0();
    subelements[1] = new SubElement_1();
  }

  ~FunctionElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 6;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 2;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(0)[0];
    nodes[4] = offset + cell.entities(0)[1];
    nodes[5] = offset + cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[4] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[3] = 1;
    components[4] = 1;
    components[5] = 1;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *subelements[i];
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *subelements[i];
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("mixed");
    return s;
  }
  
private:

class SubElement_0 : public dolfin::FiniteElement
{
public:

  SubElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 3;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class SubElement_1 : public dolfin::FiniteElement
{
public:

  SubElement_1() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_1()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 3;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

  unsigned int* tensordims;
  FiniteElement** subelements;

};

BilinearForm::BilinearForm(Function& w0, const real& c0, const real& c1, const real& c2, const real& c3) : dolfin::BilinearForm(1), c0(c0), c1(c1), c2(c2), c3(c3)
{
  // Create finite element for test space
  _test = new TestElement();

  // Create finite element for trial space
  _trial = new TrialElement();

  // Add functions
  initFunction(0, w0, new FunctionElement_0());
}

// Contribution from the interior
bool BilinearForm::interior_contribution() const { return true; }

void BilinearForm::eval(real block[], const AffineMap& map) const
{
  // Compute coefficients
  const real c0_0 = c[0][0];
  const real c0_1 = c[0][1];
  const real c0_2 = c[0][2];

  // Compute geometry tensors
  const real G0_ = map.det;
  const real G1_0_0_0_0 = map.det*c3*c2*c1*c0_0*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*c0_0*map.g01*map.g01 + map.det*c3*c2*c1*c0_0*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*c0_0*map.g01*map.g01;
  const real G1_0_0_0_1 = map.det*c3*c2*c1*c0_0*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*c0_0*map.g01*map.g11 + map.det*c3*c2*c1*c0_0*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*c0_0*map.g01*map.g11;
  const real G1_0_0_1_0 = map.det*c3*c2*c1*c0_0*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*c0_0*map.g11*map.g01 + map.det*c3*c2*c1*c0_0*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*c0_0*map.g11*map.g01;
  const real G1_0_0_1_1 = map.det*c3*c2*c1*c0_0*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*c0_0*map.g11*map.g11 + map.det*c3*c2*c1*c0_0*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*c0_0*map.g11*map.g11;
  const real G1_0_1_0_0 = map.det*c3*c2*c1*c0_0*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*c0_1*map.g01*map.g01 + map.det*c3*c2*c1*c0_0*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*c0_1*map.g01*map.g01;
  const real G1_0_1_0_1 = map.det*c3*c2*c1*c0_0*c0_1*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*c0_1*map.g01*map.g11 + map.det*c3*c2*c1*c0_0*c0_1*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*c0_1*map.g01*map.g11;
  const real G1_0_1_1_0 = map.det*c3*c2*c1*c0_0*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*c0_1*map.g11*map.g01 + map.det*c3*c2*c1*c0_0*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*c0_1*map.g11*map.g01;
  const real G1_0_1_1_1 = map.det*c3*c2*c1*c0_0*c0_1*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*c0_1*map.g11*map.g11 + map.det*c3*c2*c1*c0_0*c0_1*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*c0_1*map.g11*map.g11;
  const real G1_0_2_0_0 = map.det*c3*c2*c1*c0_0*c0_2*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*c0_2*map.g01*map.g01 + map.det*c3*c2*c1*c0_0*c0_2*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*c0_2*map.g01*map.g01;
  const real G1_0_2_0_1 = map.det*c3*c2*c1*c0_0*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*c0_2*map.g01*map.g11 + map.det*c3*c2*c1*c0_0*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*c0_2*map.g01*map.g11;
  const real G1_0_2_1_0 = map.det*c3*c2*c1*c0_0*c0_2*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*c0_2*map.g11*map.g01 + map.det*c3*c2*c1*c0_0*c0_2*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*c0_2*map.g11*map.g01;
  const real G1_0_2_1_1 = map.det*c3*c2*c1*c0_0*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*c0_2*map.g11*map.g11 + map.det*c3*c2*c1*c0_0*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*c0_2*map.g11*map.g11;
  const real G1_1_0_0_0 = map.det*c3*c2*c1*c0_1*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*c0_0*map.g01*map.g01 + map.det*c3*c2*c1*c0_1*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*c0_0*map.g01*map.g01;
  const real G1_1_0_0_1 = map.det*c3*c2*c1*c0_1*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*c0_0*map.g01*map.g11 + map.det*c3*c2*c1*c0_1*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*c0_0*map.g01*map.g11;
  const real G1_1_0_1_0 = map.det*c3*c2*c1*c0_1*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*c0_0*map.g11*map.g01 + map.det*c3*c2*c1*c0_1*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*c0_0*map.g11*map.g01;
  const real G1_1_0_1_1 = map.det*c3*c2*c1*c0_1*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*c0_0*map.g11*map.g11 + map.det*c3*c2*c1*c0_1*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*c0_0*map.g11*map.g11;
  const real G1_1_1_0_0 = map.det*c3*c2*c1*c0_1*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*c0_1*map.g01*map.g01 + map.det*c3*c2*c1*c0_1*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*c0_1*map.g01*map.g01;
  const real G1_1_1_0_1 = map.det*c3*c2*c1*c0_1*c0_1*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*c0_1*map.g01*map.g11 + map.det*c3*c2*c1*c0_1*c0_1*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*c0_1*map.g01*map.g11;
  const real G1_1_1_1_0 = map.det*c3*c2*c1*c0_1*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*c0_1*map.g11*map.g01 + map.det*c3*c2*c1*c0_1*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*c0_1*map.g11*map.g01;
  const real G1_1_1_1_1 = map.det*c3*c2*c1*c0_1*c0_1*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*c0_1*map.g11*map.g11 + map.det*c3*c2*c1*c0_1*c0_1*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*c0_1*map.g11*map.g11;
  const real G1_1_2_0_0 = map.det*c3*c2*c1*c0_1*c0_2*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*c0_2*map.g01*map.g01 + map.det*c3*c2*c1*c0_1*c0_2*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*c0_2*map.g01*map.g01;
  const real G1_1_2_0_1 = map.det*c3*c2*c1*c0_1*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*c0_2*map.g01*map.g11 + map.det*c3*c2*c1*c0_1*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*c0_2*map.g01*map.g11;
  const real G1_1_2_1_0 = map.det*c3*c2*c1*c0_1*c0_2*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*c0_2*map.g11*map.g01 + map.det*c3*c2*c1*c0_1*c0_2*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*c0_2*map.g11*map.g01;
  const real G1_1_2_1_1 = map.det*c3*c2*c1*c0_1*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*c0_2*map.g11*map.g11 + map.det*c3*c2*c1*c0_1*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*c0_2*map.g11*map.g11;
  const real G1_2_0_0_0 = map.det*c3*c2*c1*c0_2*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*c0_0*map.g01*map.g01 + map.det*c3*c2*c1*c0_2*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*c0_0*map.g01*map.g01;
  const real G1_2_0_0_1 = map.det*c3*c2*c1*c0_2*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*c0_0*map.g01*map.g11 + map.det*c3*c2*c1*c0_2*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*c0_0*map.g01*map.g11;
  const real G1_2_0_1_0 = map.det*c3*c2*c1*c0_2*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*c0_0*map.g11*map.g01 + map.det*c3*c2*c1*c0_2*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*c0_0*map.g11*map.g01;
  const real G1_2_0_1_1 = map.det*c3*c2*c1*c0_2*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*c0_0*map.g11*map.g11 + map.det*c3*c2*c1*c0_2*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*c0_0*map.g11*map.g11;
  const real G1_2_1_0_0 = map.det*c3*c2*c1*c0_2*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*c0_1*map.g01*map.g01 + map.det*c3*c2*c1*c0_2*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*c0_1*map.g01*map.g01;
  const real G1_2_1_0_1 = map.det*c3*c2*c1*c0_2*c0_1*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*c0_1*map.g01*map.g11 + map.det*c3*c2*c1*c0_2*c0_1*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*c0_1*map.g01*map.g11;
  const real G1_2_1_1_0 = map.det*c3*c2*c1*c0_2*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*c0_1*map.g11*map.g01 + map.det*c3*c2*c1*c0_2*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*c0_1*map.g11*map.g01;
  const real G1_2_1_1_1 = map.det*c3*c2*c1*c0_2*c0_1*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*c0_1*map.g11*map.g11 + map.det*c3*c2*c1*c0_2*c0_1*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*c0_1*map.g11*map.g11;
  const real G1_2_2_0_0 = map.det*c3*c2*c1*c0_2*c0_2*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*c0_2*map.g01*map.g01 + map.det*c3*c2*c1*c0_2*c0_2*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*c0_2*map.g01*map.g01;
  const real G1_2_2_0_1 = map.det*c3*c2*c1*c0_2*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*c0_2*map.g01*map.g11 + map.det*c3*c2*c1*c0_2*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*c0_2*map.g01*map.g11;
  const real G1_2_2_1_0 = map.det*c3*c2*c1*c0_2*c0_2*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*c0_2*map.g11*map.g01 + map.det*c3*c2*c1*c0_2*c0_2*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*c0_2*map.g11*map.g01;
  const real G1_2_2_1_1 = map.det*c3*c2*c1*c0_2*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*c0_2*map.g11*map.g11 + map.det*c3*c2*c1*c0_2*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*c0_2*map.g11*map.g11;
  const real G2_0_0_0 = map.det*c3*c2*c1*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*map.g01*map.g01 + map.det*c3*c2*c1*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*map.g01*map.g01;
  const real G2_0_0_1 = map.det*c3*c2*c1*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*map.g01*map.g11 + map.det*c3*c2*c1*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*map.g01*map.g11;
  const real G2_0_1_0 = map.det*c3*c2*c1*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*map.g11*map.g01 + map.det*c3*c2*c1*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*map.g11*map.g01;
  const real G2_0_1_1 = map.det*c3*c2*c1*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*map.g11*map.g11 + map.det*c3*c2*c1*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*map.g11*map.g11;
  const real G2_1_0_0 = map.det*c3*c2*c1*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*map.g01*map.g01 + map.det*c3*c2*c1*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*map.g01*map.g01;
  const real G2_1_0_1 = map.det*c3*c2*c1*c0_1*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*map.g01*map.g11 + map.det*c3*c2*c1*c0_1*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*map.g01*map.g11;
  const real G2_1_1_0 = map.det*c3*c2*c1*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*map.g11*map.g01 + map.det*c3*c2*c1*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*map.g11*map.g01;
  const real G2_1_1_1 = map.det*c3*c2*c1*c0_1*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*map.g11*map.g11 + map.det*c3*c2*c1*c0_1*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*map.g11*map.g11;
  const real G2_2_0_0 = map.det*c3*c2*c1*c0_2*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*map.g01*map.g01 + map.det*c3*c2*c1*c0_2*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*map.g01*map.g01;
  const real G2_2_0_1 = map.det*c3*c2*c1*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*map.g01*map.g11 + map.det*c3*c2*c1*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*map.g01*map.g11;
  const real G2_2_1_0 = map.det*c3*c2*c1*c0_2*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*map.g11*map.g01 + map.det*c3*c2*c1*c0_2*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*map.g11*map.g01;
  const real G2_2_1_1 = map.det*c3*c2*c1*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*map.g11*map.g11 + map.det*c3*c2*c1*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*map.g11*map.g11;
  const real G3_0_0 = map.det*c3*c2*c1*map.g00*map.g00 + map.det*c3*c2*c1*map.g01*map.g01;
  const real G3_0_1 = map.det*c3*c2*c1*map.g00*map.g10 + map.det*c3*c2*c1*map.g01*map.g11;
  const real G3_1_0 = map.det*c3*c2*c1*map.g10*map.g00 + map.det*c3*c2*c1*map.g11*map.g01;
  const real G3_1_1 = map.det*c3*c2*c1*map.g10*map.g10 + map.det*c3*c2*c1*map.g11*map.g11;
  const real G4_0_0_0_0 = map.det*c3*c2*c1*c0_0*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*c0_0*map.g01*map.g01;
  const real G4_0_0_0_1 = map.det*c3*c2*c1*c0_0*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*c0_0*map.g01*map.g11;
  const real G4_0_0_1_0 = map.det*c3*c2*c1*c0_0*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*c0_0*map.g11*map.g01;
  const real G4_0_0_1_1 = map.det*c3*c2*c1*c0_0*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*c0_0*map.g11*map.g11;
  const real G4_0_1_0_0 = map.det*c3*c2*c1*c0_0*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*c0_1*map.g01*map.g01;
  const real G4_0_1_0_1 = map.det*c3*c2*c1*c0_0*c0_1*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*c0_1*map.g01*map.g11;
  const real G4_0_1_1_0 = map.det*c3*c2*c1*c0_0*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*c0_1*map.g11*map.g01;
  const real G4_0_1_1_1 = map.det*c3*c2*c1*c0_0*c0_1*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*c0_1*map.g11*map.g11;
  const real G4_0_2_0_0 = map.det*c3*c2*c1*c0_0*c0_2*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*c0_2*map.g01*map.g01;
  const real G4_0_2_0_1 = map.det*c3*c2*c1*c0_0*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*c0_2*map.g01*map.g11;
  const real G4_0_2_1_0 = map.det*c3*c2*c1*c0_0*c0_2*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*c0_2*map.g11*map.g01;
  const real G4_0_2_1_1 = map.det*c3*c2*c1*c0_0*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*c0_2*map.g11*map.g11;
  const real G4_1_0_0_0 = map.det*c3*c2*c1*c0_1*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*c0_0*map.g01*map.g01;
  const real G4_1_0_0_1 = map.det*c3*c2*c1*c0_1*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*c0_0*map.g01*map.g11;
  const real G4_1_0_1_0 = map.det*c3*c2*c1*c0_1*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*c0_0*map.g11*map.g01;
  const real G4_1_0_1_1 = map.det*c3*c2*c1*c0_1*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*c0_0*map.g11*map.g11;
  const real G4_1_1_0_0 = map.det*c3*c2*c1*c0_1*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*c0_1*map.g01*map.g01;
  const real G4_1_1_0_1 = map.det*c3*c2*c1*c0_1*c0_1*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*c0_1*map.g01*map.g11;
  const real G4_1_1_1_0 = map.det*c3*c2*c1*c0_1*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*c0_1*map.g11*map.g01;
  const real G4_1_1_1_1 = map.det*c3*c2*c1*c0_1*c0_1*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*c0_1*map.g11*map.g11;
  const real G4_1_2_0_0 = map.det*c3*c2*c1*c0_1*c0_2*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*c0_2*map.g01*map.g01;
  const real G4_1_2_0_1 = map.det*c3*c2*c1*c0_1*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*c0_2*map.g01*map.g11;
  const real G4_1_2_1_0 = map.det*c3*c2*c1*c0_1*c0_2*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*c0_2*map.g11*map.g01;
  const real G4_1_2_1_1 = map.det*c3*c2*c1*c0_1*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*c0_2*map.g11*map.g11;
  const real G4_2_0_0_0 = map.det*c3*c2*c1*c0_2*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*c0_0*map.g01*map.g01;
  const real G4_2_0_0_1 = map.det*c3*c2*c1*c0_2*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*c0_0*map.g01*map.g11;
  const real G4_2_0_1_0 = map.det*c3*c2*c1*c0_2*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*c0_0*map.g11*map.g01;
  const real G4_2_0_1_1 = map.det*c3*c2*c1*c0_2*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*c0_0*map.g11*map.g11;
  const real G4_2_1_0_0 = map.det*c3*c2*c1*c0_2*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*c0_1*map.g01*map.g01;
  const real G4_2_1_0_1 = map.det*c3*c2*c1*c0_2*c0_1*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*c0_1*map.g01*map.g11;
  const real G4_2_1_1_0 = map.det*c3*c2*c1*c0_2*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*c0_1*map.g11*map.g01;
  const real G4_2_1_1_1 = map.det*c3*c2*c1*c0_2*c0_1*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*c0_1*map.g11*map.g11;
  const real G4_2_2_0_0 = map.det*c3*c2*c1*c0_2*c0_2*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*c0_2*map.g01*map.g01;
  const real G4_2_2_0_1 = map.det*c3*c2*c1*c0_2*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*c0_2*map.g01*map.g11;
  const real G4_2_2_1_0 = map.det*c3*c2*c1*c0_2*c0_2*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*c0_2*map.g11*map.g01;
  const real G4_2_2_1_1 = map.det*c3*c2*c1*c0_2*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*c0_2*map.g11*map.g11;
  const real G5_0_0_0 = map.det*c3*c2*c1*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*map.g01*map.g01;
  const real G5_0_0_1 = map.det*c3*c2*c1*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*map.g01*map.g11;
  const real G5_0_1_0 = map.det*c3*c2*c1*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*map.g11*map.g01;
  const real G5_0_1_1 = map.det*c3*c2*c1*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*map.g11*map.g11;
  const real G5_1_0_0 = map.det*c3*c2*c1*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*map.g01*map.g01;
  const real G5_1_0_1 = map.det*c3*c2*c1*c0_1*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*map.g01*map.g11;
  const real G5_1_1_0 = map.det*c3*c2*c1*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*map.g11*map.g01;
  const real G5_1_1_1 = map.det*c3*c2*c1*c0_1*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*map.g11*map.g11;
  const real G5_2_0_0 = map.det*c3*c2*c1*c0_2*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*map.g01*map.g01;
  const real G5_2_0_1 = map.det*c3*c2*c1*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*map.g01*map.g11;
  const real G5_2_1_0 = map.det*c3*c2*c1*c0_2*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*map.g11*map.g01;
  const real G5_2_1_1 = map.det*c3*c2*c1*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*map.g11*map.g11;
  const real G9_0_0_0_0 = map.det*c3*c2*c1*c0_0*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*c0_0*map.g01*map.g01;
  const real G9_0_0_0_1 = map.det*c3*c2*c1*c0_0*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*c0_0*map.g01*map.g11;
  const real G9_0_0_1_0 = map.det*c3*c2*c1*c0_0*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*c0_0*map.g11*map.g01;
  const real G9_0_0_1_1 = map.det*c3*c2*c1*c0_0*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*c0_0*map.g11*map.g11;
  const real G9_0_1_0_0 = map.det*c3*c2*c1*c0_0*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*c0_1*map.g01*map.g01;
  const real G9_0_1_1_0 = map.det*c3*c2*c1*c0_0*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*c0_1*map.g11*map.g01;
  const real G9_0_2_0_1 = map.det*c3*c2*c1*c0_0*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*c0_2*map.g01*map.g11;
  const real G9_0_2_1_1 = map.det*c3*c2*c1*c0_0*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*c0_2*map.g11*map.g11;
  const real G9_1_0_0_0 = map.det*c3*c2*c1*c0_1*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*c0_0*map.g01*map.g01;
  const real G9_1_0_0_1 = map.det*c3*c2*c1*c0_1*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*c0_0*map.g01*map.g11;
  const real G9_1_0_1_0 = map.det*c3*c2*c1*c0_1*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*c0_0*map.g11*map.g01;
  const real G9_1_0_1_1 = map.det*c3*c2*c1*c0_1*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*c0_0*map.g11*map.g11;
  const real G9_1_1_0_0 = map.det*c3*c2*c1*c0_1*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*c0_1*map.g01*map.g01;
  const real G9_1_1_1_0 = map.det*c3*c2*c1*c0_1*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*c0_1*map.g11*map.g01;
  const real G9_1_2_0_1 = map.det*c3*c2*c1*c0_1*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*c0_2*map.g01*map.g11;
  const real G9_1_2_1_1 = map.det*c3*c2*c1*c0_1*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*c0_2*map.g11*map.g11;
  const real G9_2_0_0_0 = map.det*c3*c2*c1*c0_2*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*c0_0*map.g01*map.g01;
  const real G9_2_0_0_1 = map.det*c3*c2*c1*c0_2*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*c0_0*map.g01*map.g11;
  const real G9_2_0_1_0 = map.det*c3*c2*c1*c0_2*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*c0_0*map.g11*map.g01;
  const real G9_2_0_1_1 = map.det*c3*c2*c1*c0_2*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*c0_0*map.g11*map.g11;
  const real G9_2_1_0_0 = map.det*c3*c2*c1*c0_2*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*c0_1*map.g01*map.g01;
  const real G9_2_1_1_0 = map.det*c3*c2*c1*c0_2*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*c0_1*map.g11*map.g01;
  const real G9_2_2_0_1 = map.det*c3*c2*c1*c0_2*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*c0_2*map.g01*map.g11;
  const real G9_2_2_1_1 = map.det*c3*c2*c1*c0_2*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*c0_2*map.g11*map.g11;
  const real G10_0_0_0 = map.det*c3*c2*c1*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*map.g01*map.g01;
  const real G10_0_0_1 = map.det*c3*c2*c1*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*map.g01*map.g11;
  const real G10_0_1_0 = map.det*c3*c2*c1*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*map.g11*map.g01;
  const real G10_0_1_1 = map.det*c3*c2*c1*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*map.g11*map.g11;
  const real G10_1_0_0 = map.det*c3*c2*c1*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*map.g01*map.g01;
  const real G10_1_1_0 = map.det*c3*c2*c1*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*map.g11*map.g01;
  const real G10_2_0_1 = map.det*c3*c2*c1*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*map.g01*map.g11;
  const real G10_2_1_1 = map.det*c3*c2*c1*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*map.g11*map.g11;
  const real G11_0_0 = map.det*c3*c2*map.g00*map.g00 + map.det*c3*c2*map.g01*map.g01;
  const real G11_0_1 = map.det*c3*c2*map.g00*map.g10 + map.det*c3*c2*map.g01*map.g11;
  const real G11_1_0 = map.det*c3*c2*map.g10*map.g00 + map.det*c3*c2*map.g11*map.g01;
  const real G11_1_1 = map.det*c3*c2*map.g10*map.g10 + map.det*c3*c2*map.g11*map.g11;
  const real G12_ = map.det;
  const real G13_0_0 = map.det*c0*map.g00*map.g00 + map.det*c0*map.g01*map.g01;
  const real G13_0_1 = map.det*c0*map.g00*map.g10 + map.det*c0*map.g01*map.g11;
  const real G13_1_0 = map.det*c0*map.g10*map.g00 + map.det*c0*map.g11*map.g01;
  const real G13_1_1 = map.det*c0*map.g10*map.g10 + map.det*c0*map.g11*map.g11;

  // Compute element tensor
  block[0] = 8.333333333333318e-02*G0_ + 1.666666666666664e-01*G1_0_0_0_0 + 1.666666666666664e-01*G1_0_0_0_1 + 1.666666666666664e-01*G1_0_0_1_0 + 1.666666666666664e-01*G1_0_0_1_1 + 8.333333333333320e-02*G1_0_1_0_0 + 8.333333333333319e-02*G1_0_1_0_1 + 8.333333333333319e-02*G1_0_1_1_0 + 8.333333333333318e-02*G1_0_1_1_1 + 8.333333333333319e-02*G1_0_2_0_0 + 8.333333333333318e-02*G1_0_2_0_1 + 8.333333333333318e-02*G1_0_2_1_0 + 8.333333333333316e-02*G1_0_2_1_1 + 8.333333333333320e-02*G1_1_0_0_0 + 8.333333333333319e-02*G1_1_0_0_1 + 8.333333333333319e-02*G1_1_0_1_0 + 8.333333333333318e-02*G1_1_0_1_1 + 1.666666666666664e-01*G1_1_1_0_0 + 1.666666666666664e-01*G1_1_1_0_1 + 1.666666666666664e-01*G1_1_1_1_0 + 1.666666666666664e-01*G1_1_1_1_1 + 8.333333333333322e-02*G1_1_2_0_0 + 8.333333333333320e-02*G1_1_2_0_1 + 8.333333333333320e-02*G1_1_2_1_0 + 8.333333333333318e-02*G1_1_2_1_1 + 8.333333333333319e-02*G1_2_0_0_0 + 8.333333333333318e-02*G1_2_0_0_1 + 8.333333333333318e-02*G1_2_0_1_0 + 8.333333333333316e-02*G1_2_0_1_1 + 8.333333333333322e-02*G1_2_1_0_0 + 8.333333333333320e-02*G1_2_1_0_1 + 8.333333333333320e-02*G1_2_1_1_0 + 8.333333333333318e-02*G1_2_1_1_1 + 1.666666666666664e-01*G1_2_2_0_0 + 1.666666666666664e-01*G1_2_2_0_1 + 1.666666666666664e-01*G1_2_2_1_0 + 1.666666666666663e-01*G1_2_2_1_1 - 3.333333333333331e-01*G2_0_0_0 - 3.333333333333331e-01*G2_0_0_1 - 3.333333333333331e-01*G2_0_1_0 - 3.333333333333330e-01*G2_0_1_1 - 3.333333333333332e-01*G2_1_0_0 - 3.333333333333331e-01*G2_1_0_1 - 3.333333333333331e-01*G2_1_1_0 - 3.333333333333331e-01*G2_1_1_1 - 3.333333333333331e-01*G2_2_0_0 - 3.333333333333331e-01*G2_2_0_1 - 3.333333333333331e-01*G2_2_1_0 - 3.333333333333330e-01*G2_2_1_1 + 9.999999999999996e-01*G3_0_0 + 9.999999999999993e-01*G3_0_1 + 9.999999999999993e-01*G3_1_0 + 9.999999999999991e-01*G3_1_1 + 6.666666666666656e-01*G4_0_0_0_0 + 6.666666666666655e-01*G4_0_0_0_1 + 6.666666666666655e-01*G4_0_0_1_0 + 6.666666666666654e-01*G4_0_0_1_1 + 3.333333333333328e-01*G4_0_1_0_0 + 3.333333333333328e-01*G4_0_1_0_1 + 3.333333333333328e-01*G4_0_1_1_0 + 3.333333333333327e-01*G4_0_1_1_1 + 3.333333333333328e-01*G4_0_2_0_0 + 3.333333333333327e-01*G4_0_2_0_1 + 3.333333333333327e-01*G4_0_2_1_0 + 3.333333333333326e-01*G4_0_2_1_1 + 3.333333333333328e-01*G4_1_0_0_0 + 3.333333333333328e-01*G4_1_0_0_1 + 3.333333333333328e-01*G4_1_0_1_0 + 3.333333333333327e-01*G4_1_0_1_1 + 6.666666666666656e-01*G4_1_1_0_0 + 6.666666666666655e-01*G4_1_1_0_1 + 6.666666666666655e-01*G4_1_1_1_0 + 6.666666666666654e-01*G4_1_1_1_1 + 3.333333333333329e-01*G4_1_2_0_0 + 3.333333333333328e-01*G4_1_2_0_1 + 3.333333333333328e-01*G4_1_2_1_0 + 3.333333333333327e-01*G4_1_2_1_1 + 3.333333333333328e-01*G4_2_0_0_0 + 3.333333333333327e-01*G4_2_0_0_1 + 3.333333333333327e-01*G4_2_0_1_0 + 3.333333333333326e-01*G4_2_0_1_1 + 3.333333333333329e-01*G4_2_1_0_0 + 3.333333333333328e-01*G4_2_1_0_1 + 3.333333333333328e-01*G4_2_1_1_0 + 3.333333333333327e-01*G4_2_1_1_1 + 6.666666666666656e-01*G4_2_2_0_0 + 6.666666666666654e-01*G4_2_2_0_1 + 6.666666666666654e-01*G4_2_2_1_0 + 6.666666666666653e-01*G4_2_2_1_1 - 1.333333333333333e+00*G5_0_0_0 - 1.333333333333332e+00*G5_0_0_1 - 1.333333333333332e+00*G5_0_1_0 - 1.333333333333332e+00*G5_0_1_1 - 1.333333333333333e+00*G5_1_0_0 - 1.333333333333333e+00*G5_1_0_1 - 1.333333333333333e+00*G5_1_1_0 - 1.333333333333332e+00*G5_1_1_1 - 1.333333333333333e+00*G5_2_0_0 - 1.333333333333332e+00*G5_2_0_1 - 1.333333333333332e+00*G5_2_1_0 - 1.333333333333332e+00*G5_2_1_1 + 1.999999999999997e+00*G9_0_0_0_0 + 1.999999999999997e+00*G9_0_0_0_1 + 1.999999999999997e+00*G9_0_0_1_0 + 1.999999999999996e+00*G9_0_0_1_1 - 1.999999999999997e+00*G9_0_1_0_0 - 1.999999999999997e+00*G9_0_1_1_0 - 1.999999999999997e+00*G9_0_2_0_1 - 1.999999999999996e+00*G9_0_2_1_1 + 9.999999999999984e-01*G9_1_0_0_0 + 9.999999999999983e-01*G9_1_0_0_1 + 9.999999999999983e-01*G9_1_0_1_0 + 9.999999999999982e-01*G9_1_0_1_1 - 9.999999999999984e-01*G9_1_1_0_0 - 9.999999999999983e-01*G9_1_1_1_0 - 9.999999999999983e-01*G9_1_2_0_1 - 9.999999999999982e-01*G9_1_2_1_1 + 9.999999999999983e-01*G9_2_0_0_0 + 9.999999999999982e-01*G9_2_0_0_1 + 9.999999999999982e-01*G9_2_0_1_0 + 9.999999999999980e-01*G9_2_0_1_1 - 9.999999999999983e-01*G9_2_1_0_0 - 9.999999999999982e-01*G9_2_1_1_0 - 9.999999999999982e-01*G9_2_2_0_1 - 9.999999999999980e-01*G9_2_2_1_1 - 1.999999999999999e+00*G10_0_0_0 - 1.999999999999999e+00*G10_0_0_1 - 1.999999999999999e+00*G10_0_1_0 - 1.999999999999998e+00*G10_0_1_1 + 1.999999999999999e+00*G10_1_0_0 + 1.999999999999999e+00*G10_1_1_0 + 1.999999999999999e+00*G10_2_0_1 + 1.999999999999998e+00*G10_2_1_1;
  block[1] = 4.166666666666659e-02*G0_ - 1.666666666666664e-01*G1_0_0_0_0 - 1.666666666666664e-01*G1_0_0_1_0 - 8.333333333333320e-02*G1_0_1_0_0 - 8.333333333333319e-02*G1_0_1_1_0 - 8.333333333333319e-02*G1_0_2_0_0 - 8.333333333333318e-02*G1_0_2_1_0 - 8.333333333333320e-02*G1_1_0_0_0 - 8.333333333333319e-02*G1_1_0_1_0 - 1.666666666666664e-01*G1_1_1_0_0 - 1.666666666666664e-01*G1_1_1_1_0 - 8.333333333333322e-02*G1_1_2_0_0 - 8.333333333333320e-02*G1_1_2_1_0 - 8.333333333333319e-02*G1_2_0_0_0 - 8.333333333333318e-02*G1_2_0_1_0 - 8.333333333333322e-02*G1_2_1_0_0 - 8.333333333333320e-02*G1_2_1_1_0 - 1.666666666666664e-01*G1_2_2_0_0 - 1.666666666666664e-01*G1_2_2_1_0 + 3.333333333333331e-01*G2_0_0_0 + 3.333333333333331e-01*G2_0_1_0 + 3.333333333333332e-01*G2_1_0_0 + 3.333333333333331e-01*G2_1_1_0 + 3.333333333333331e-01*G2_2_0_0 + 3.333333333333331e-01*G2_2_1_0 - 9.999999999999996e-01*G3_0_0 - 9.999999999999993e-01*G3_1_0 - 6.666666666666656e-01*G4_0_0_0_0 - 6.666666666666655e-01*G4_0_0_1_0 - 3.333333333333328e-01*G4_0_1_0_0 - 3.333333333333328e-01*G4_0_1_1_0 - 3.333333333333328e-01*G4_0_2_0_0 - 3.333333333333327e-01*G4_0_2_1_0 - 3.333333333333328e-01*G4_1_0_0_0 - 3.333333333333328e-01*G4_1_0_1_0 - 6.666666666666656e-01*G4_1_1_0_0 - 6.666666666666655e-01*G4_1_1_1_0 - 3.333333333333329e-01*G4_1_2_0_0 - 3.333333333333328e-01*G4_1_2_1_0 - 3.333333333333328e-01*G4_2_0_0_0 - 3.333333333333327e-01*G4_2_0_1_0 - 3.333333333333329e-01*G4_2_1_0_0 - 3.333333333333328e-01*G4_2_1_1_0 - 6.666666666666656e-01*G4_2_2_0_0 - 6.666666666666654e-01*G4_2_2_1_0 + 1.333333333333333e+00*G5_0_0_0 + 1.333333333333332e+00*G5_0_1_0 + 1.333333333333333e+00*G5_1_0_0 + 1.333333333333333e+00*G5_1_1_0 + 1.333333333333333e+00*G5_2_0_0 + 1.333333333333332e+00*G5_2_1_0 + 9.999999999999984e-01*G9_0_0_0_0 + 9.999999999999983e-01*G9_0_0_0_1 + 9.999999999999983e-01*G9_0_0_1_0 + 9.999999999999982e-01*G9_0_0_1_1 - 9.999999999999984e-01*G9_0_1_0_0 - 9.999999999999983e-01*G9_0_1_1_0 - 9.999999999999983e-01*G9_0_2_0_1 - 9.999999999999982e-01*G9_0_2_1_1 + 1.999999999999997e+00*G9_1_0_0_0 + 1.999999999999997e+00*G9_1_0_0_1 + 1.999999999999997e+00*G9_1_0_1_0 + 1.999999999999996e+00*G9_1_0_1_1 - 1.999999999999997e+00*G9_1_1_0_0 - 1.999999999999997e+00*G9_1_1_1_0 - 1.999999999999997e+00*G9_1_2_0_1 - 1.999999999999996e+00*G9_1_2_1_1 + 9.999999999999986e-01*G9_2_0_0_0 + 9.999999999999984e-01*G9_2_0_0_1 + 9.999999999999984e-01*G9_2_0_1_0 + 9.999999999999982e-01*G9_2_0_1_1 - 9.999999999999986e-01*G9_2_1_0_0 - 9.999999999999984e-01*G9_2_1_1_0 - 9.999999999999984e-01*G9_2_2_0_1 - 9.999999999999982e-01*G9_2_2_1_1 - 2.000000000000000e+00*G10_0_0_0 - 1.999999999999999e+00*G10_0_0_1 - 1.999999999999999e+00*G10_0_1_0 - 1.999999999999998e+00*G10_0_1_1 + 2.000000000000000e+00*G10_1_0_0 + 1.999999999999999e+00*G10_1_1_0 + 1.999999999999999e+00*G10_2_0_1 + 1.999999999999998e+00*G10_2_1_1;
  block[2] = 4.166666666666658e-02*G0_ - 1.666666666666664e-01*G1_0_0_0_1 - 1.666666666666664e-01*G1_0_0_1_1 - 8.333333333333319e-02*G1_0_1_0_1 - 8.333333333333318e-02*G1_0_1_1_1 - 8.333333333333318e-02*G1_0_2_0_1 - 8.333333333333316e-02*G1_0_2_1_1 - 8.333333333333319e-02*G1_1_0_0_1 - 8.333333333333318e-02*G1_1_0_1_1 - 1.666666666666664e-01*G1_1_1_0_1 - 1.666666666666664e-01*G1_1_1_1_1 - 8.333333333333320e-02*G1_1_2_0_1 - 8.333333333333318e-02*G1_1_2_1_1 - 8.333333333333318e-02*G1_2_0_0_1 - 8.333333333333316e-02*G1_2_0_1_1 - 8.333333333333320e-02*G1_2_1_0_1 - 8.333333333333318e-02*G1_2_1_1_1 - 1.666666666666664e-01*G1_2_2_0_1 - 1.666666666666663e-01*G1_2_2_1_1 + 3.333333333333331e-01*G2_0_0_1 + 3.333333333333330e-01*G2_0_1_1 + 3.333333333333331e-01*G2_1_0_1 + 3.333333333333331e-01*G2_1_1_1 + 3.333333333333331e-01*G2_2_0_1 + 3.333333333333330e-01*G2_2_1_1 - 9.999999999999993e-01*G3_0_1 - 9.999999999999991e-01*G3_1_1 - 6.666666666666655e-01*G4_0_0_0_1 - 6.666666666666654e-01*G4_0_0_1_1 - 3.333333333333328e-01*G4_0_1_0_1 - 3.333333333333327e-01*G4_0_1_1_1 - 3.333333333333327e-01*G4_0_2_0_1 - 3.333333333333326e-01*G4_0_2_1_1 - 3.333333333333328e-01*G4_1_0_0_1 - 3.333333333333327e-01*G4_1_0_1_1 - 6.666666666666655e-01*G4_1_1_0_1 - 6.666666666666654e-01*G4_1_1_1_1 - 3.333333333333328e-01*G4_1_2_0_1 - 3.333333333333327e-01*G4_1_2_1_1 - 3.333333333333327e-01*G4_2_0_0_1 - 3.333333333333326e-01*G4_2_0_1_1 - 3.333333333333328e-01*G4_2_1_0_1 - 3.333333333333327e-01*G4_2_1_1_1 - 6.666666666666654e-01*G4_2_2_0_1 - 6.666666666666653e-01*G4_2_2_1_1 + 1.333333333333332e+00*G5_0_0_1 + 1.333333333333332e+00*G5_0_1_1 + 1.333333333333333e+00*G5_1_0_1 + 1.333333333333332e+00*G5_1_1_1 + 1.333333333333332e+00*G5_2_0_1 + 1.333333333333332e+00*G5_2_1_1 + 9.999999999999984e-01*G9_0_0_0_0 + 9.999999999999982e-01*G9_0_0_0_1 + 9.999999999999982e-01*G9_0_0_1_0 + 9.999999999999980e-01*G9_0_0_1_1 - 9.999999999999984e-01*G9_0_1_0_0 - 9.999999999999982e-01*G9_0_1_1_0 - 9.999999999999982e-01*G9_0_2_0_1 - 9.999999999999980e-01*G9_0_2_1_1 + 9.999999999999987e-01*G9_1_0_0_0 + 9.999999999999984e-01*G9_1_0_0_1 + 9.999999999999984e-01*G9_1_0_1_0 + 9.999999999999982e-01*G9_1_0_1_1 - 9.999999999999987e-01*G9_1_1_0_0 - 9.999999999999984e-01*G9_1_1_1_0 - 9.999999999999984e-01*G9_1_2_0_1 - 9.999999999999982e-01*G9_1_2_1_1 + 1.999999999999997e+00*G9_2_0_0_0 + 1.999999999999996e+00*G9_2_0_0_1 + 1.999999999999996e+00*G9_2_0_1_0 + 1.999999999999996e+00*G9_2_0_1_1 - 1.999999999999997e+00*G9_2_1_0_0 - 1.999999999999996e+00*G9_2_1_1_0 - 1.999999999999996e+00*G9_2_2_0_1 - 1.999999999999996e+00*G9_2_2_1_1 - 1.999999999999999e+00*G10_0_0_0 - 1.999999999999999e+00*G10_0_0_1 - 1.999999999999999e+00*G10_0_1_0 - 1.999999999999998e+00*G10_0_1_1 + 1.999999999999999e+00*G10_1_0_0 + 1.999999999999999e+00*G10_1_1_0 + 1.999999999999999e+00*G10_2_0_1 + 1.999999999999998e+00*G10_2_1_1;
  block[3] = -4.999999999999998e-01*G11_0_0 - 4.999999999999997e-01*G11_0_1 - 4.999999999999997e-01*G11_1_0 - 4.999999999999996e-01*G11_1_1;
  block[4] = 4.999999999999998e-01*G11_0_0 + 4.999999999999997e-01*G11_1_0;
  block[5] = 4.999999999999997e-01*G11_0_1 + 4.999999999999996e-01*G11_1_1;
  block[6] = 4.166666666666659e-02*G0_ - 1.666666666666664e-01*G1_0_0_0_0 - 1.666666666666664e-01*G1_0_0_0_1 - 8.333333333333320e-02*G1_0_1_0_0 - 8.333333333333319e-02*G1_0_1_0_1 - 8.333333333333319e-02*G1_0_2_0_0 - 8.333333333333318e-02*G1_0_2_0_1 - 8.333333333333320e-02*G1_1_0_0_0 - 8.333333333333319e-02*G1_1_0_0_1 - 1.666666666666664e-01*G1_1_1_0_0 - 1.666666666666664e-01*G1_1_1_0_1 - 8.333333333333322e-02*G1_1_2_0_0 - 8.333333333333320e-02*G1_1_2_0_1 - 8.333333333333319e-02*G1_2_0_0_0 - 8.333333333333318e-02*G1_2_0_0_1 - 8.333333333333322e-02*G1_2_1_0_0 - 8.333333333333320e-02*G1_2_1_0_1 - 1.666666666666664e-01*G1_2_2_0_0 - 1.666666666666664e-01*G1_2_2_0_1 + 3.333333333333331e-01*G2_0_0_0 + 3.333333333333331e-01*G2_0_0_1 + 3.333333333333332e-01*G2_1_0_0 + 3.333333333333331e-01*G2_1_0_1 + 3.333333333333331e-01*G2_2_0_0 + 3.333333333333331e-01*G2_2_0_1 - 9.999999999999996e-01*G3_0_0 - 9.999999999999993e-01*G3_0_1 - 6.666666666666656e-01*G4_0_0_0_0 - 6.666666666666655e-01*G4_0_0_0_1 - 3.333333333333328e-01*G4_0_1_0_0 - 3.333333333333328e-01*G4_0_1_0_1 - 3.333333333333328e-01*G4_0_2_0_0 - 3.333333333333327e-01*G4_0_2_0_1 - 3.333333333333328e-01*G4_1_0_0_0 - 3.333333333333328e-01*G4_1_0_0_1 - 6.666666666666656e-01*G4_1_1_0_0 - 6.666666666666655e-01*G4_1_1_0_1 - 3.333333333333329e-01*G4_1_2_0_0 - 3.333333333333328e-01*G4_1_2_0_1 - 3.333333333333328e-01*G4_2_0_0_0 - 3.333333333333327e-01*G4_2_0_0_1 - 3.333333333333329e-01*G4_2_1_0_0 - 3.333333333333328e-01*G4_2_1_0_1 - 6.666666666666656e-01*G4_2_2_0_0 - 6.666666666666654e-01*G4_2_2_0_1 + 1.333333333333333e+00*G5_0_0_0 + 1.333333333333332e+00*G5_0_0_1 + 1.333333333333333e+00*G5_1_0_0 + 1.333333333333333e+00*G5_1_0_1 + 1.333333333333333e+00*G5_2_0_0 + 1.333333333333332e+00*G5_2_0_1 - 1.999999999999997e+00*G9_0_0_0_0 - 1.999999999999997e+00*G9_0_0_0_1 + 1.999999999999997e+00*G9_0_1_0_0 + 1.999999999999997e+00*G9_0_2_0_1 - 9.999999999999984e-01*G9_1_0_0_0 - 9.999999999999983e-01*G9_1_0_0_1 + 9.999999999999984e-01*G9_1_1_0_0 + 9.999999999999983e-01*G9_1_2_0_1 - 9.999999999999983e-01*G9_2_0_0_0 - 9.999999999999982e-01*G9_2_0_0_1 + 9.999999999999983e-01*G9_2_1_0_0 + 9.999999999999982e-01*G9_2_2_0_1 + 1.999999999999999e+00*G10_0_0_0 + 1.999999999999999e+00*G10_0_0_1 - 1.999999999999999e+00*G10_1_0_0 - 1.999999999999999e+00*G10_2_0_1;
  block[7] = 8.333333333333318e-02*G0_ + 1.666666666666664e-01*G1_0_0_0_0 + 8.333333333333320e-02*G1_0_1_0_0 + 8.333333333333319e-02*G1_0_2_0_0 + 8.333333333333320e-02*G1_1_0_0_0 + 1.666666666666664e-01*G1_1_1_0_0 + 8.333333333333322e-02*G1_1_2_0_0 + 8.333333333333319e-02*G1_2_0_0_0 + 8.333333333333322e-02*G1_2_1_0_0 + 1.666666666666664e-01*G1_2_2_0_0 - 3.333333333333331e-01*G2_0_0_0 - 3.333333333333332e-01*G2_1_0_0 - 3.333333333333331e-01*G2_2_0_0 + 9.999999999999996e-01*G3_0_0 + 6.666666666666656e-01*G4_0_0_0_0 + 3.333333333333328e-01*G4_0_1_0_0 + 3.333333333333328e-01*G4_0_2_0_0 + 3.333333333333328e-01*G4_1_0_0_0 + 6.666666666666656e-01*G4_1_1_0_0 + 3.333333333333329e-01*G4_1_2_0_0 + 3.333333333333328e-01*G4_2_0_0_0 + 3.333333333333329e-01*G4_2_1_0_0 + 6.666666666666656e-01*G4_2_2_0_0 - 1.333333333333333e+00*G5_0_0_0 - 1.333333333333333e+00*G5_1_0_0 - 1.333333333333333e+00*G5_2_0_0 - 9.999999999999984e-01*G9_0_0_0_0 - 9.999999999999983e-01*G9_0_0_0_1 + 9.999999999999984e-01*G9_0_1_0_0 + 9.999999999999983e-01*G9_0_2_0_1 - 1.999999999999997e+00*G9_1_0_0_0 - 1.999999999999997e+00*G9_1_0_0_1 + 1.999999999999997e+00*G9_1_1_0_0 + 1.999999999999997e+00*G9_1_2_0_1 - 9.999999999999986e-01*G9_2_0_0_0 - 9.999999999999984e-01*G9_2_0_0_1 + 9.999999999999986e-01*G9_2_1_0_0 + 9.999999999999984e-01*G9_2_2_0_1 + 2.000000000000000e+00*G10_0_0_0 + 1.999999999999999e+00*G10_0_0_1 - 2.000000000000000e+00*G10_1_0_0 - 1.999999999999999e+00*G10_2_0_1;
  block[8] = 4.166666666666659e-02*G0_ + 1.666666666666664e-01*G1_0_0_0_1 + 8.333333333333319e-02*G1_0_1_0_1 + 8.333333333333318e-02*G1_0_2_0_1 + 8.333333333333319e-02*G1_1_0_0_1 + 1.666666666666664e-01*G1_1_1_0_1 + 8.333333333333320e-02*G1_1_2_0_1 + 8.333333333333318e-02*G1_2_0_0_1 + 8.333333333333320e-02*G1_2_1_0_1 + 1.666666666666664e-01*G1_2_2_0_1 - 3.333333333333331e-01*G2_0_0_1 - 3.333333333333331e-01*G2_1_0_1 - 3.333333333333331e-01*G2_2_0_1 + 9.999999999999993e-01*G3_0_1 + 6.666666666666655e-01*G4_0_0_0_1 + 3.333333333333328e-01*G4_0_1_0_1 + 3.333333333333327e-01*G4_0_2_0_1 + 3.333333333333328e-01*G4_1_0_0_1 + 6.666666666666655e-01*G4_1_1_0_1 + 3.333333333333328e-01*G4_1_2_0_1 + 3.333333333333327e-01*G4_2_0_0_1 + 3.333333333333328e-01*G4_2_1_0_1 + 6.666666666666654e-01*G4_2_2_0_1 - 1.333333333333332e+00*G5_0_0_1 - 1.333333333333333e+00*G5_1_0_1 - 1.333333333333332e+00*G5_2_0_1 - 9.999999999999984e-01*G9_0_0_0_0 - 9.999999999999982e-01*G9_0_0_0_1 + 9.999999999999984e-01*G9_0_1_0_0 + 9.999999999999982e-01*G9_0_2_0_1 - 9.999999999999987e-01*G9_1_0_0_0 - 9.999999999999984e-01*G9_1_0_0_1 + 9.999999999999987e-01*G9_1_1_0_0 + 9.999999999999984e-01*G9_1_2_0_1 - 1.999999999999997e+00*G9_2_0_0_0 - 1.999999999999996e+00*G9_2_0_0_1 + 1.999999999999997e+00*G9_2_1_0_0 + 1.999999999999996e+00*G9_2_2_0_1 + 1.999999999999999e+00*G10_0_0_0 + 1.999999999999999e+00*G10_0_0_1 - 1.999999999999999e+00*G10_1_0_0 - 1.999999999999999e+00*G10_2_0_1;
  block[9] = 4.999999999999998e-01*G11_0_0 + 4.999999999999997e-01*G11_0_1;
  block[10] = -4.999999999999998e-01*G11_0_0;
  block[11] = -4.999999999999997e-01*G11_0_1;
  block[12] = 4.166666666666658e-02*G0_ - 1.666666666666664e-01*G1_0_0_1_0 - 1.666666666666664e-01*G1_0_0_1_1 - 8.333333333333319e-02*G1_0_1_1_0 - 8.333333333333318e-02*G1_0_1_1_1 - 8.333333333333318e-02*G1_0_2_1_0 - 8.333333333333316e-02*G1_0_2_1_1 - 8.333333333333319e-02*G1_1_0_1_0 - 8.333333333333318e-02*G1_1_0_1_1 - 1.666666666666664e-01*G1_1_1_1_0 - 1.666666666666664e-01*G1_1_1_1_1 - 8.333333333333320e-02*G1_1_2_1_0 - 8.333333333333318e-02*G1_1_2_1_1 - 8.333333333333318e-02*G1_2_0_1_0 - 8.333333333333316e-02*G1_2_0_1_1 - 8.333333333333320e-02*G1_2_1_1_0 - 8.333333333333318e-02*G1_2_1_1_1 - 1.666666666666664e-01*G1_2_2_1_0 - 1.666666666666663e-01*G1_2_2_1_1 + 3.333333333333331e-01*G2_0_1_0 + 3.333333333333330e-01*G2_0_1_1 + 3.333333333333331e-01*G2_1_1_0 + 3.333333333333331e-01*G2_1_1_1 + 3.333333333333331e-01*G2_2_1_0 + 3.333333333333330e-01*G2_2_1_1 - 9.999999999999993e-01*G3_1_0 - 9.999999999999991e-01*G3_1_1 - 6.666666666666655e-01*G4_0_0_1_0 - 6.666666666666654e-01*G4_0_0_1_1 - 3.333333333333328e-01*G4_0_1_1_0 - 3.333333333333327e-01*G4_0_1_1_1 - 3.333333333333327e-01*G4_0_2_1_0 - 3.333333333333326e-01*G4_0_2_1_1 - 3.333333333333328e-01*G4_1_0_1_0 - 3.333333333333327e-01*G4_1_0_1_1 - 6.666666666666655e-01*G4_1_1_1_0 - 6.666666666666654e-01*G4_1_1_1_1 - 3.333333333333328e-01*G4_1_2_1_0 - 3.333333333333327e-01*G4_1_2_1_1 - 3.333333333333327e-01*G4_2_0_1_0 - 3.333333333333326e-01*G4_2_0_1_1 - 3.333333333333328e-01*G4_2_1_1_0 - 3.333333333333327e-01*G4_2_1_1_1 - 6.666666666666654e-01*G4_2_2_1_0 - 6.666666666666653e-01*G4_2_2_1_1 + 1.333333333333332e+00*G5_0_1_0 + 1.333333333333332e+00*G5_0_1_1 + 1.333333333333333e+00*G5_1_1_0 + 1.333333333333332e+00*G5_1_1_1 + 1.333333333333332e+00*G5_2_1_0 + 1.333333333333332e+00*G5_2_1_1 - 1.999999999999997e+00*G9_0_0_1_0 - 1.999999999999996e+00*G9_0_0_1_1 + 1.999999999999997e+00*G9_0_1_1_0 + 1.999999999999996e+00*G9_0_2_1_1 - 9.999999999999983e-01*G9_1_0_1_0 - 9.999999999999982e-01*G9_1_0_1_1 + 9.999999999999983e-01*G9_1_1_1_0 + 9.999999999999982e-01*G9_1_2_1_1 - 9.999999999999982e-01*G9_2_0_1_0 - 9.999999999999980e-01*G9_2_0_1_1 + 9.999999999999982e-01*G9_2_1_1_0 + 9.999999999999980e-01*G9_2_2_1_1 + 1.999999999999999e+00*G10_0_1_0 + 1.999999999999998e+00*G10_0_1_1 - 1.999999999999999e+00*G10_1_1_0 - 1.999999999999998e+00*G10_2_1_1;
  block[13] = 4.166666666666659e-02*G0_ + 1.666666666666664e-01*G1_0_0_1_0 + 8.333333333333319e-02*G1_0_1_1_0 + 8.333333333333318e-02*G1_0_2_1_0 + 8.333333333333319e-02*G1_1_0_1_0 + 1.666666666666664e-01*G1_1_1_1_0 + 8.333333333333320e-02*G1_1_2_1_0 + 8.333333333333318e-02*G1_2_0_1_0 + 8.333333333333320e-02*G1_2_1_1_0 + 1.666666666666664e-01*G1_2_2_1_0 - 3.333333333333331e-01*G2_0_1_0 - 3.333333333333331e-01*G2_1_1_0 - 3.333333333333331e-01*G2_2_1_0 + 9.999999999999993e-01*G3_1_0 + 6.666666666666655e-01*G4_0_0_1_0 + 3.333333333333328e-01*G4_0_1_1_0 + 3.333333333333327e-01*G4_0_2_1_0 + 3.333333333333328e-01*G4_1_0_1_0 + 6.666666666666655e-01*G4_1_1_1_0 + 3.333333333333328e-01*G4_1_2_1_0 + 3.333333333333327e-01*G4_2_0_1_0 + 3.333333333333328e-01*G4_2_1_1_0 + 6.666666666666654e-01*G4_2_2_1_0 - 1.333333333333332e+00*G5_0_1_0 - 1.333333333333333e+00*G5_1_1_0 - 1.333333333333332e+00*G5_2_1_0 - 9.999999999999983e-01*G9_0_0_1_0 - 9.999999999999982e-01*G9_0_0_1_1 + 9.999999999999983e-01*G9_0_1_1_0 + 9.999999999999982e-01*G9_0_2_1_1 - 1.999999999999997e+00*G9_1_0_1_0 - 1.999999999999996e+00*G9_1_0_1_1 + 1.999999999999997e+00*G9_1_1_1_0 + 1.999999999999996e+00*G9_1_2_1_1 - 9.999999999999984e-01*G9_2_0_1_0 - 9.999999999999982e-01*G9_2_0_1_1 + 9.999999999999984e-01*G9_2_1_1_0 + 9.999999999999982e-01*G9_2_2_1_1 + 1.999999999999999e+00*G10_0_1_0 + 1.999999999999998e+00*G10_0_1_1 - 1.999999999999999e+00*G10_1_1_0 - 1.999999999999998e+00*G10_2_1_1;
  block[14] = 8.333333333333316e-02*G0_ + 1.666666666666664e-01*G1_0_0_1_1 + 8.333333333333318e-02*G1_0_1_1_1 + 8.333333333333316e-02*G1_0_2_1_1 + 8.333333333333318e-02*G1_1_0_1_1 + 1.666666666666664e-01*G1_1_1_1_1 + 8.333333333333318e-02*G1_1_2_1_1 + 8.333333333333316e-02*G1_2_0_1_1 + 8.333333333333318e-02*G1_2_1_1_1 + 1.666666666666663e-01*G1_2_2_1_1 - 3.333333333333330e-01*G2_0_1_1 - 3.333333333333331e-01*G2_1_1_1 - 3.333333333333330e-01*G2_2_1_1 + 9.999999999999991e-01*G3_1_1 + 6.666666666666654e-01*G4_0_0_1_1 + 3.333333333333327e-01*G4_0_1_1_1 + 3.333333333333326e-01*G4_0_2_1_1 + 3.333333333333327e-01*G4_1_0_1_1 + 6.666666666666654e-01*G4_1_1_1_1 + 3.333333333333327e-01*G4_1_2_1_1 + 3.333333333333326e-01*G4_2_0_1_1 + 3.333333333333327e-01*G4_2_1_1_1 + 6.666666666666653e-01*G4_2_2_1_1 - 1.333333333333332e+00*G5_0_1_1 - 1.333333333333332e+00*G5_1_1_1 - 1.333333333333332e+00*G5_2_1_1 - 9.999999999999982e-01*G9_0_0_1_0 - 9.999999999999980e-01*G9_0_0_1_1 + 9.999999999999982e-01*G9_0_1_1_0 + 9.999999999999980e-01*G9_0_2_1_1 - 9.999999999999984e-01*G9_1_0_1_0 - 9.999999999999982e-01*G9_1_0_1_1 + 9.999999999999984e-01*G9_1_1_1_0 + 9.999999999999982e-01*G9_1_2_1_1 - 1.999999999999996e+00*G9_2_0_1_0 - 1.999999999999996e+00*G9_2_0_1_1 + 1.999999999999996e+00*G9_2_1_1_0 + 1.999999999999996e+00*G9_2_2_1_1 + 1.999999999999999e+00*G10_0_1_0 + 1.999999999999998e+00*G10_0_1_1 - 1.999999999999999e+00*G10_1_1_0 - 1.999999999999998e+00*G10_2_1_1;
  block[15] = 4.999999999999997e-01*G11_1_0 + 4.999999999999996e-01*G11_1_1;
  block[16] = -4.999999999999997e-01*G11_1_0;
  block[17] = -4.999999999999996e-01*G11_1_1;
  block[18] = 4.999999999999998e-01*G13_0_0 + 4.999999999999997e-01*G13_0_1 + 4.999999999999997e-01*G13_1_0 + 4.999999999999996e-01*G13_1_1;
  block[19] = -4.999999999999998e-01*G13_0_0 - 4.999999999999997e-01*G13_1_0;
  block[20] = -4.999999999999997e-01*G13_0_1 - 4.999999999999996e-01*G13_1_1;
  block[21] = 8.333333333333318e-02*G12_;
  block[22] = 4.166666666666659e-02*G12_;
  block[23] = 4.166666666666658e-02*G12_;
  block[24] = -4.999999999999998e-01*G13_0_0 - 4.999999999999997e-01*G13_0_1;
  block[25] = 4.999999999999998e-01*G13_0_0;
  block[26] = 4.999999999999997e-01*G13_0_1;
  block[27] = 4.166666666666659e-02*G12_;
  block[28] = 8.333333333333318e-02*G12_;
  block[29] = 4.166666666666659e-02*G12_;
  block[30] = -4.999999999999997e-01*G13_1_0 - 4.999999999999996e-01*G13_1_1;
  block[31] = 4.999999999999997e-01*G13_1_0;
  block[32] = 4.999999999999996e-01*G13_1_1;
  block[33] = 4.166666666666658e-02*G12_;
  block[34] = 4.166666666666659e-02*G12_;
  block[35] = 8.333333333333316e-02*G12_;
}

// No contribution from the boundary
bool BilinearForm::boundary_contribution() const { return false; }

void BilinearForm::eval(real block[], const AffineMap& map, unsigned int facet) const {}

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class LinearForm : public dolfin::LinearForm
{
public:

  class TestElement;

  class FunctionElement_0;

  class FunctionElement_1;

  class FunctionElement_2;

  LinearForm(Function& w0, Function& w1, Function& w2, const real& c0, const real& c1, const real& c2, const real& c3);
  

  bool interior_contribution() const;

  void eval(real block[], const AffineMap& map) const;

  bool boundary_contribution() const;

  void eval(real block[], const AffineMap& map, unsigned int facet) const;

private:

  const real& c0;  const real& c1;  const real& c2;  const real& c3;

};

class LinearForm::TestElement : public dolfin::FiniteElement
{
public:

  TestElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 2;

    subelements = new FiniteElement* [2];
    subelements[0] = new SubElement_0();
    subelements[1] = new SubElement_1();
  }

  ~TestElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 6;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 2;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(0)[0];
    nodes[4] = offset + cell.entities(0)[1];
    nodes[5] = offset + cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[4] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[3] = 1;
    components[4] = 1;
    components[5] = 1;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *subelements[i];
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *subelements[i];
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("mixed");
    return s;
  }
  
private:

class SubElement_0 : public dolfin::FiniteElement
{
public:

  SubElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 3;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class SubElement_1 : public dolfin::FiniteElement
{
public:

  SubElement_1() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_1()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 3;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class LinearForm::FunctionElement_0 : public dolfin::FiniteElement
{
public:

  FunctionElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 2;

    subelements = new FiniteElement* [2];
    subelements[0] = new SubElement_0();
    subelements[1] = new SubElement_1();
  }

  ~FunctionElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 6;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 2;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(0)[0];
    nodes[4] = offset + cell.entities(0)[1];
    nodes[5] = offset + cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[4] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[3] = 1;
    components[4] = 1;
    components[5] = 1;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *subelements[i];
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *subelements[i];
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("mixed");
    return s;
  }
  
private:

class SubElement_0 : public dolfin::FiniteElement
{
public:

  SubElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 3;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class SubElement_1 : public dolfin::FiniteElement
{
public:

  SubElement_1() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_1()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 3;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class LinearForm::FunctionElement_1 : public dolfin::FiniteElement
{
public:

  FunctionElement_1() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_1()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 3;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class LinearForm::FunctionElement_2 : public dolfin::FiniteElement
{
public:

  FunctionElement_2() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_2()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 3;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

LinearForm::LinearForm(Function& w0, Function& w1, Function& w2, const real& c0, const real& c1, const real& c2, const real& c3) : dolfin::LinearForm(3), c0(c0), c1(c1), c2(c2), c3(c3)
{
  // Create finite element for test space
  _test = new TestElement();

  // Add functions
  initFunction(0, w0, new FunctionElement_0());
  initFunction(1, w1, new FunctionElement_1());
  initFunction(2, w2, new FunctionElement_2());
}

// Contribution from the interior
bool LinearForm::interior_contribution() const { return true; }

void LinearForm::eval(real block[], const AffineMap& map) const
{
  // Compute coefficients
  const real c0_0 = c[0][0];
  const real c0_1 = c[0][1];
  const real c0_2 = c[0][2];
  const real c0_3 = c[0][3];
  const real c0_4 = c[0][4];
  const real c0_5 = c[0][5];
  const real c1_0 = c[1][0];
  const real c1_1 = c[1][1];
  const real c1_2 = c[1][2];
  const real c2_0 = c[2][0];
  const real c2_1 = c[2][1];
  const real c2_2 = c[2][2];

  // Compute geometry tensors
  const real G0_0_0_0_0_0 = map.det*c3*c2*c1*c0_0*c0_0*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*c0_0*c0_0*map.g01*map.g01 + map.det*c3*c2*c1*c0_0*c0_0*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*c0_0*c0_0*map.g01*map.g01;
  const real G0_0_0_0_0_1 = map.det*c3*c2*c1*c0_0*c0_0*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*c0_0*c0_0*map.g01*map.g11 + map.det*c3*c2*c1*c0_0*c0_0*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*c0_0*c0_0*map.g01*map.g11;
  const real G0_0_0_0_1_0 = map.det*c3*c2*c1*c0_0*c0_0*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*c0_0*c0_0*map.g11*map.g01 + map.det*c3*c2*c1*c0_0*c0_0*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*c0_0*c0_0*map.g11*map.g01;
  const real G0_0_0_0_1_1 = map.det*c3*c2*c1*c0_0*c0_0*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*c0_0*c0_0*map.g11*map.g11 + map.det*c3*c2*c1*c0_0*c0_0*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*c0_0*c0_0*map.g11*map.g11;
  const real G0_0_0_1_0_0 = map.det*c3*c2*c1*c0_0*c0_0*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*c0_0*c0_1*map.g01*map.g01 + map.det*c3*c2*c1*c0_0*c0_0*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*c0_0*c0_1*map.g01*map.g01;
  const real G0_0_0_1_1_0 = map.det*c3*c2*c1*c0_0*c0_0*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*c0_0*c0_1*map.g11*map.g01 + map.det*c3*c2*c1*c0_0*c0_0*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*c0_0*c0_1*map.g11*map.g01;
  const real G0_0_0_2_0_1 = map.det*c3*c2*c1*c0_0*c0_0*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*c0_0*c0_2*map.g01*map.g11 + map.det*c3*c2*c1*c0_0*c0_0*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*c0_0*c0_2*map.g01*map.g11;
  const real G0_0_0_2_1_1 = map.det*c3*c2*c1*c0_0*c0_0*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*c0_0*c0_2*map.g11*map.g11 + map.det*c3*c2*c1*c0_0*c0_0*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*c0_0*c0_2*map.g11*map.g11;
  const real G0_0_1_0_0_0 = map.det*c3*c2*c1*c0_0*c0_1*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*c0_1*c0_0*map.g01*map.g01 + map.det*c3*c2*c1*c0_0*c0_1*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*c0_1*c0_0*map.g01*map.g01;
  const real G0_0_1_0_0_1 = map.det*c3*c2*c1*c0_0*c0_1*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*c0_1*c0_0*map.g01*map.g11 + map.det*c3*c2*c1*c0_0*c0_1*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*c0_1*c0_0*map.g01*map.g11;
  const real G0_0_1_0_1_0 = map.det*c3*c2*c1*c0_0*c0_1*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*c0_1*c0_0*map.g11*map.g01 + map.det*c3*c2*c1*c0_0*c0_1*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*c0_1*c0_0*map.g11*map.g01;
  const real G0_0_1_0_1_1 = map.det*c3*c2*c1*c0_0*c0_1*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*c0_1*c0_0*map.g11*map.g11 + map.det*c3*c2*c1*c0_0*c0_1*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*c0_1*c0_0*map.g11*map.g11;
  const real G0_0_1_1_0_0 = map.det*c3*c2*c1*c0_0*c0_1*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*c0_1*c0_1*map.g01*map.g01 + map.det*c3*c2*c1*c0_0*c0_1*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*c0_1*c0_1*map.g01*map.g01;
  const real G0_0_1_1_1_0 = map.det*c3*c2*c1*c0_0*c0_1*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*c0_1*c0_1*map.g11*map.g01 + map.det*c3*c2*c1*c0_0*c0_1*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*c0_1*c0_1*map.g11*map.g01;
  const real G0_0_1_2_0_1 = map.det*c3*c2*c1*c0_0*c0_1*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*c0_1*c0_2*map.g01*map.g11 + map.det*c3*c2*c1*c0_0*c0_1*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*c0_1*c0_2*map.g01*map.g11;
  const real G0_0_1_2_1_1 = map.det*c3*c2*c1*c0_0*c0_1*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*c0_1*c0_2*map.g11*map.g11 + map.det*c3*c2*c1*c0_0*c0_1*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*c0_1*c0_2*map.g11*map.g11;
  const real G0_0_2_0_0_0 = map.det*c3*c2*c1*c0_0*c0_2*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*c0_2*c0_0*map.g01*map.g01 + map.det*c3*c2*c1*c0_0*c0_2*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*c0_2*c0_0*map.g01*map.g01;
  const real G0_0_2_0_0_1 = map.det*c3*c2*c1*c0_0*c0_2*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*c0_2*c0_0*map.g01*map.g11 + map.det*c3*c2*c1*c0_0*c0_2*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*c0_2*c0_0*map.g01*map.g11;
  const real G0_0_2_0_1_0 = map.det*c3*c2*c1*c0_0*c0_2*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*c0_2*c0_0*map.g11*map.g01 + map.det*c3*c2*c1*c0_0*c0_2*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*c0_2*c0_0*map.g11*map.g01;
  const real G0_0_2_0_1_1 = map.det*c3*c2*c1*c0_0*c0_2*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*c0_2*c0_0*map.g11*map.g11 + map.det*c3*c2*c1*c0_0*c0_2*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*c0_2*c0_0*map.g11*map.g11;
  const real G0_0_2_1_0_0 = map.det*c3*c2*c1*c0_0*c0_2*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*c0_2*c0_1*map.g01*map.g01 + map.det*c3*c2*c1*c0_0*c0_2*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*c0_2*c0_1*map.g01*map.g01;
  const real G0_0_2_1_1_0 = map.det*c3*c2*c1*c0_0*c0_2*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*c0_2*c0_1*map.g11*map.g01 + map.det*c3*c2*c1*c0_0*c0_2*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*c0_2*c0_1*map.g11*map.g01;
  const real G0_0_2_2_0_1 = map.det*c3*c2*c1*c0_0*c0_2*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*c0_2*c0_2*map.g01*map.g11 + map.det*c3*c2*c1*c0_0*c0_2*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*c0_2*c0_2*map.g01*map.g11;
  const real G0_0_2_2_1_1 = map.det*c3*c2*c1*c0_0*c0_2*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*c0_2*c0_2*map.g11*map.g11 + map.det*c3*c2*c1*c0_0*c0_2*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*c0_2*c0_2*map.g11*map.g11;
  const real G0_1_0_0_0_0 = map.det*c3*c2*c1*c0_1*c0_0*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*c0_0*c0_0*map.g01*map.g01 + map.det*c3*c2*c1*c0_1*c0_0*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*c0_0*c0_0*map.g01*map.g01;
  const real G0_1_0_0_0_1 = map.det*c3*c2*c1*c0_1*c0_0*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*c0_0*c0_0*map.g01*map.g11 + map.det*c3*c2*c1*c0_1*c0_0*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*c0_0*c0_0*map.g01*map.g11;
  const real G0_1_0_0_1_0 = map.det*c3*c2*c1*c0_1*c0_0*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*c0_0*c0_0*map.g11*map.g01 + map.det*c3*c2*c1*c0_1*c0_0*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*c0_0*c0_0*map.g11*map.g01;
  const real G0_1_0_0_1_1 = map.det*c3*c2*c1*c0_1*c0_0*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*c0_0*c0_0*map.g11*map.g11 + map.det*c3*c2*c1*c0_1*c0_0*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*c0_0*c0_0*map.g11*map.g11;
  const real G0_1_0_1_0_0 = map.det*c3*c2*c1*c0_1*c0_0*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*c0_0*c0_1*map.g01*map.g01 + map.det*c3*c2*c1*c0_1*c0_0*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*c0_0*c0_1*map.g01*map.g01;
  const real G0_1_0_1_1_0 = map.det*c3*c2*c1*c0_1*c0_0*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*c0_0*c0_1*map.g11*map.g01 + map.det*c3*c2*c1*c0_1*c0_0*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*c0_0*c0_1*map.g11*map.g01;
  const real G0_1_0_2_0_1 = map.det*c3*c2*c1*c0_1*c0_0*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*c0_0*c0_2*map.g01*map.g11 + map.det*c3*c2*c1*c0_1*c0_0*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*c0_0*c0_2*map.g01*map.g11;
  const real G0_1_0_2_1_1 = map.det*c3*c2*c1*c0_1*c0_0*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*c0_0*c0_2*map.g11*map.g11 + map.det*c3*c2*c1*c0_1*c0_0*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*c0_0*c0_2*map.g11*map.g11;
  const real G0_1_1_0_0_0 = map.det*c3*c2*c1*c0_1*c0_1*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*c0_1*c0_0*map.g01*map.g01 + map.det*c3*c2*c1*c0_1*c0_1*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*c0_1*c0_0*map.g01*map.g01;
  const real G0_1_1_0_0_1 = map.det*c3*c2*c1*c0_1*c0_1*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*c0_1*c0_0*map.g01*map.g11 + map.det*c3*c2*c1*c0_1*c0_1*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*c0_1*c0_0*map.g01*map.g11;
  const real G0_1_1_0_1_0 = map.det*c3*c2*c1*c0_1*c0_1*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*c0_1*c0_0*map.g11*map.g01 + map.det*c3*c2*c1*c0_1*c0_1*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*c0_1*c0_0*map.g11*map.g01;
  const real G0_1_1_0_1_1 = map.det*c3*c2*c1*c0_1*c0_1*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*c0_1*c0_0*map.g11*map.g11 + map.det*c3*c2*c1*c0_1*c0_1*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*c0_1*c0_0*map.g11*map.g11;
  const real G0_1_1_1_0_0 = map.det*c3*c2*c1*c0_1*c0_1*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*c0_1*c0_1*map.g01*map.g01 + map.det*c3*c2*c1*c0_1*c0_1*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*c0_1*c0_1*map.g01*map.g01;
  const real G0_1_1_1_1_0 = map.det*c3*c2*c1*c0_1*c0_1*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*c0_1*c0_1*map.g11*map.g01 + map.det*c3*c2*c1*c0_1*c0_1*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*c0_1*c0_1*map.g11*map.g01;
  const real G0_1_1_2_0_1 = map.det*c3*c2*c1*c0_1*c0_1*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*c0_1*c0_2*map.g01*map.g11 + map.det*c3*c2*c1*c0_1*c0_1*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*c0_1*c0_2*map.g01*map.g11;
  const real G0_1_1_2_1_1 = map.det*c3*c2*c1*c0_1*c0_1*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*c0_1*c0_2*map.g11*map.g11 + map.det*c3*c2*c1*c0_1*c0_1*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*c0_1*c0_2*map.g11*map.g11;
  const real G0_1_2_0_0_0 = map.det*c3*c2*c1*c0_1*c0_2*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*c0_2*c0_0*map.g01*map.g01 + map.det*c3*c2*c1*c0_1*c0_2*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*c0_2*c0_0*map.g01*map.g01;
  const real G0_1_2_0_0_1 = map.det*c3*c2*c1*c0_1*c0_2*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*c0_2*c0_0*map.g01*map.g11 + map.det*c3*c2*c1*c0_1*c0_2*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*c0_2*c0_0*map.g01*map.g11;
  const real G0_1_2_0_1_0 = map.det*c3*c2*c1*c0_1*c0_2*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*c0_2*c0_0*map.g11*map.g01 + map.det*c3*c2*c1*c0_1*c0_2*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*c0_2*c0_0*map.g11*map.g01;
  const real G0_1_2_0_1_1 = map.det*c3*c2*c1*c0_1*c0_2*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*c0_2*c0_0*map.g11*map.g11 + map.det*c3*c2*c1*c0_1*c0_2*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*c0_2*c0_0*map.g11*map.g11;
  const real G0_1_2_1_0_0 = map.det*c3*c2*c1*c0_1*c0_2*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*c0_2*c0_1*map.g01*map.g01 + map.det*c3*c2*c1*c0_1*c0_2*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*c0_2*c0_1*map.g01*map.g01;
  const real G0_1_2_1_1_0 = map.det*c3*c2*c1*c0_1*c0_2*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*c0_2*c0_1*map.g11*map.g01 + map.det*c3*c2*c1*c0_1*c0_2*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*c0_2*c0_1*map.g11*map.g01;
  const real G0_1_2_2_0_1 = map.det*c3*c2*c1*c0_1*c0_2*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*c0_2*c0_2*map.g01*map.g11 + map.det*c3*c2*c1*c0_1*c0_2*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*c0_2*c0_2*map.g01*map.g11;
  const real G0_1_2_2_1_1 = map.det*c3*c2*c1*c0_1*c0_2*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*c0_2*c0_2*map.g11*map.g11 + map.det*c3*c2*c1*c0_1*c0_2*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*c0_2*c0_2*map.g11*map.g11;
  const real G0_2_0_0_0_0 = map.det*c3*c2*c1*c0_2*c0_0*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*c0_0*c0_0*map.g01*map.g01 + map.det*c3*c2*c1*c0_2*c0_0*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*c0_0*c0_0*map.g01*map.g01;
  const real G0_2_0_0_0_1 = map.det*c3*c2*c1*c0_2*c0_0*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*c0_0*c0_0*map.g01*map.g11 + map.det*c3*c2*c1*c0_2*c0_0*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*c0_0*c0_0*map.g01*map.g11;
  const real G0_2_0_0_1_0 = map.det*c3*c2*c1*c0_2*c0_0*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*c0_0*c0_0*map.g11*map.g01 + map.det*c3*c2*c1*c0_2*c0_0*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*c0_0*c0_0*map.g11*map.g01;
  const real G0_2_0_0_1_1 = map.det*c3*c2*c1*c0_2*c0_0*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*c0_0*c0_0*map.g11*map.g11 + map.det*c3*c2*c1*c0_2*c0_0*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*c0_0*c0_0*map.g11*map.g11;
  const real G0_2_0_1_0_0 = map.det*c3*c2*c1*c0_2*c0_0*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*c0_0*c0_1*map.g01*map.g01 + map.det*c3*c2*c1*c0_2*c0_0*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*c0_0*c0_1*map.g01*map.g01;
  const real G0_2_0_1_1_0 = map.det*c3*c2*c1*c0_2*c0_0*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*c0_0*c0_1*map.g11*map.g01 + map.det*c3*c2*c1*c0_2*c0_0*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*c0_0*c0_1*map.g11*map.g01;
  const real G0_2_0_2_0_1 = map.det*c3*c2*c1*c0_2*c0_0*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*c0_0*c0_2*map.g01*map.g11 + map.det*c3*c2*c1*c0_2*c0_0*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*c0_0*c0_2*map.g01*map.g11;
  const real G0_2_0_2_1_1 = map.det*c3*c2*c1*c0_2*c0_0*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*c0_0*c0_2*map.g11*map.g11 + map.det*c3*c2*c1*c0_2*c0_0*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*c0_0*c0_2*map.g11*map.g11;
  const real G0_2_1_0_0_0 = map.det*c3*c2*c1*c0_2*c0_1*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*c0_1*c0_0*map.g01*map.g01 + map.det*c3*c2*c1*c0_2*c0_1*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*c0_1*c0_0*map.g01*map.g01;
  const real G0_2_1_0_0_1 = map.det*c3*c2*c1*c0_2*c0_1*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*c0_1*c0_0*map.g01*map.g11 + map.det*c3*c2*c1*c0_2*c0_1*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*c0_1*c0_0*map.g01*map.g11;
  const real G0_2_1_0_1_0 = map.det*c3*c2*c1*c0_2*c0_1*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*c0_1*c0_0*map.g11*map.g01 + map.det*c3*c2*c1*c0_2*c0_1*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*c0_1*c0_0*map.g11*map.g01;
  const real G0_2_1_0_1_1 = map.det*c3*c2*c1*c0_2*c0_1*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*c0_1*c0_0*map.g11*map.g11 + map.det*c3*c2*c1*c0_2*c0_1*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*c0_1*c0_0*map.g11*map.g11;
  const real G0_2_1_1_0_0 = map.det*c3*c2*c1*c0_2*c0_1*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*c0_1*c0_1*map.g01*map.g01 + map.det*c3*c2*c1*c0_2*c0_1*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*c0_1*c0_1*map.g01*map.g01;
  const real G0_2_1_1_1_0 = map.det*c3*c2*c1*c0_2*c0_1*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*c0_1*c0_1*map.g11*map.g01 + map.det*c3*c2*c1*c0_2*c0_1*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*c0_1*c0_1*map.g11*map.g01;
  const real G0_2_1_2_0_1 = map.det*c3*c2*c1*c0_2*c0_1*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*c0_1*c0_2*map.g01*map.g11 + map.det*c3*c2*c1*c0_2*c0_1*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*c0_1*c0_2*map.g01*map.g11;
  const real G0_2_1_2_1_1 = map.det*c3*c2*c1*c0_2*c0_1*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*c0_1*c0_2*map.g11*map.g11 + map.det*c3*c2*c1*c0_2*c0_1*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*c0_1*c0_2*map.g11*map.g11;
  const real G0_2_2_0_0_0 = map.det*c3*c2*c1*c0_2*c0_2*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*c0_2*c0_0*map.g01*map.g01 + map.det*c3*c2*c1*c0_2*c0_2*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*c0_2*c0_0*map.g01*map.g01;
  const real G0_2_2_0_0_1 = map.det*c3*c2*c1*c0_2*c0_2*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*c0_2*c0_0*map.g01*map.g11 + map.det*c3*c2*c1*c0_2*c0_2*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*c0_2*c0_0*map.g01*map.g11;
  const real G0_2_2_0_1_0 = map.det*c3*c2*c1*c0_2*c0_2*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*c0_2*c0_0*map.g11*map.g01 + map.det*c3*c2*c1*c0_2*c0_2*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*c0_2*c0_0*map.g11*map.g01;
  const real G0_2_2_0_1_1 = map.det*c3*c2*c1*c0_2*c0_2*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*c0_2*c0_0*map.g11*map.g11 + map.det*c3*c2*c1*c0_2*c0_2*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*c0_2*c0_0*map.g11*map.g11;
  const real G0_2_2_1_0_0 = map.det*c3*c2*c1*c0_2*c0_2*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*c0_2*c0_1*map.g01*map.g01 + map.det*c3*c2*c1*c0_2*c0_2*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*c0_2*c0_1*map.g01*map.g01;
  const real G0_2_2_1_1_0 = map.det*c3*c2*c1*c0_2*c0_2*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*c0_2*c0_1*map.g11*map.g01 + map.det*c3*c2*c1*c0_2*c0_2*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*c0_2*c0_1*map.g11*map.g01;
  const real G0_2_2_2_0_1 = map.det*c3*c2*c1*c0_2*c0_2*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*c0_2*c0_2*map.g01*map.g11 + map.det*c3*c2*c1*c0_2*c0_2*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*c0_2*c0_2*map.g01*map.g11;
  const real G0_2_2_2_1_1 = map.det*c3*c2*c1*c0_2*c0_2*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*c0_2*c0_2*map.g11*map.g11 + map.det*c3*c2*c1*c0_2*c0_2*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*c0_2*c0_2*map.g11*map.g11;
  const real G1_0_0_0_0 = map.det*c3*c2*c1*c0_0*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*c0_0*map.g01*map.g01 + map.det*c3*c2*c1*c0_0*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*c0_0*map.g01*map.g01;
  const real G1_0_0_0_1 = map.det*c3*c2*c1*c0_0*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*c0_0*map.g01*map.g11 + map.det*c3*c2*c1*c0_0*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*c0_0*map.g01*map.g11;
  const real G1_0_0_1_0 = map.det*c3*c2*c1*c0_0*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*c0_0*map.g11*map.g01 + map.det*c3*c2*c1*c0_0*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*c0_0*map.g11*map.g01;
  const real G1_0_0_1_1 = map.det*c3*c2*c1*c0_0*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*c0_0*map.g11*map.g11 + map.det*c3*c2*c1*c0_0*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*c0_0*map.g11*map.g11;
  const real G1_0_1_0_0 = map.det*c3*c2*c1*c0_0*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*c0_1*map.g01*map.g01 + map.det*c3*c2*c1*c0_0*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*c0_1*map.g01*map.g01;
  const real G1_0_1_1_0 = map.det*c3*c2*c1*c0_0*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*c0_1*map.g11*map.g01 + map.det*c3*c2*c1*c0_0*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*c0_1*map.g11*map.g01;
  const real G1_0_2_0_1 = map.det*c3*c2*c1*c0_0*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*c0_2*map.g01*map.g11 + map.det*c3*c2*c1*c0_0*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*c0_2*map.g01*map.g11;
  const real G1_0_2_1_1 = map.det*c3*c2*c1*c0_0*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*c0_2*map.g11*map.g11 + map.det*c3*c2*c1*c0_0*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*c0_2*map.g11*map.g11;
  const real G1_1_0_0_0 = map.det*c3*c2*c1*c0_1*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*c0_0*map.g01*map.g01 + map.det*c3*c2*c1*c0_1*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*c0_0*map.g01*map.g01;
  const real G1_1_0_0_1 = map.det*c3*c2*c1*c0_1*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*c0_0*map.g01*map.g11 + map.det*c3*c2*c1*c0_1*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*c0_0*map.g01*map.g11;
  const real G1_1_0_1_0 = map.det*c3*c2*c1*c0_1*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*c0_0*map.g11*map.g01 + map.det*c3*c2*c1*c0_1*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*c0_0*map.g11*map.g01;
  const real G1_1_0_1_1 = map.det*c3*c2*c1*c0_1*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*c0_0*map.g11*map.g11 + map.det*c3*c2*c1*c0_1*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*c0_0*map.g11*map.g11;
  const real G1_1_1_0_0 = map.det*c3*c2*c1*c0_1*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*c0_1*map.g01*map.g01 + map.det*c3*c2*c1*c0_1*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*c0_1*map.g01*map.g01;
  const real G1_1_1_1_0 = map.det*c3*c2*c1*c0_1*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*c0_1*map.g11*map.g01 + map.det*c3*c2*c1*c0_1*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*c0_1*map.g11*map.g01;
  const real G1_1_2_0_1 = map.det*c3*c2*c1*c0_1*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*c0_2*map.g01*map.g11 + map.det*c3*c2*c1*c0_1*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*c0_2*map.g01*map.g11;
  const real G1_1_2_1_1 = map.det*c3*c2*c1*c0_1*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*c0_2*map.g11*map.g11 + map.det*c3*c2*c1*c0_1*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*c0_2*map.g11*map.g11;
  const real G1_2_0_0_0 = map.det*c3*c2*c1*c0_2*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*c0_0*map.g01*map.g01 + map.det*c3*c2*c1*c0_2*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*c0_0*map.g01*map.g01;
  const real G1_2_0_0_1 = map.det*c3*c2*c1*c0_2*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*c0_0*map.g01*map.g11 + map.det*c3*c2*c1*c0_2*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*c0_0*map.g01*map.g11;
  const real G1_2_0_1_0 = map.det*c3*c2*c1*c0_2*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*c0_0*map.g11*map.g01 + map.det*c3*c2*c1*c0_2*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*c0_0*map.g11*map.g01;
  const real G1_2_0_1_1 = map.det*c3*c2*c1*c0_2*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*c0_0*map.g11*map.g11 + map.det*c3*c2*c1*c0_2*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*c0_0*map.g11*map.g11;
  const real G1_2_1_0_0 = map.det*c3*c2*c1*c0_2*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*c0_1*map.g01*map.g01 + map.det*c3*c2*c1*c0_2*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*c0_1*map.g01*map.g01;
  const real G1_2_1_1_0 = map.det*c3*c2*c1*c0_2*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*c0_1*map.g11*map.g01 + map.det*c3*c2*c1*c0_2*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*c0_1*map.g11*map.g01;
  const real G1_2_2_0_1 = map.det*c3*c2*c1*c0_2*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*c0_2*map.g01*map.g11 + map.det*c3*c2*c1*c0_2*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*c0_2*map.g01*map.g11;
  const real G1_2_2_1_1 = map.det*c3*c2*c1*c0_2*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*c0_2*map.g11*map.g11 + map.det*c3*c2*c1*c0_2*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*c0_2*map.g11*map.g11;
  const real G2_0_0_0 = map.det*c3*c2*c1*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*map.g01*map.g01;
  const real G2_0_0_1 = map.det*c3*c2*c1*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*map.g01*map.g11;
  const real G2_0_1_0 = map.det*c3*c2*c1*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*map.g11*map.g01;
  const real G2_0_1_1 = map.det*c3*c2*c1*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*map.g11*map.g11;
  const real G2_1_0_0 = map.det*c3*c2*c1*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*map.g01*map.g01;
  const real G2_1_1_0 = map.det*c3*c2*c1*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*map.g11*map.g01;
  const real G2_2_0_1 = map.det*c3*c2*c1*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*map.g01*map.g11;
  const real G2_2_1_1 = map.det*c3*c2*c1*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*map.g11*map.g11;
  const real G3_0_0_0_0_0 = map.det*c3*c2*c1*c0_0*c0_0*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*c0_0*c0_0*map.g01*map.g01;
  const real G3_0_0_0_0_1 = map.det*c3*c2*c1*c0_0*c0_0*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*c0_0*c0_0*map.g01*map.g11;
  const real G3_0_0_0_1_0 = map.det*c3*c2*c1*c0_0*c0_0*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*c0_0*c0_0*map.g11*map.g01;
  const real G3_0_0_0_1_1 = map.det*c3*c2*c1*c0_0*c0_0*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*c0_0*c0_0*map.g11*map.g11;
  const real G3_0_0_1_0_0 = map.det*c3*c2*c1*c0_0*c0_0*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*c0_0*c0_1*map.g01*map.g01;
  const real G3_0_0_1_1_0 = map.det*c3*c2*c1*c0_0*c0_0*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*c0_0*c0_1*map.g11*map.g01;
  const real G3_0_0_2_0_1 = map.det*c3*c2*c1*c0_0*c0_0*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*c0_0*c0_2*map.g01*map.g11;
  const real G3_0_0_2_1_1 = map.det*c3*c2*c1*c0_0*c0_0*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*c0_0*c0_2*map.g11*map.g11;
  const real G3_0_1_0_0_0 = map.det*c3*c2*c1*c0_0*c0_1*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*c0_1*c0_0*map.g01*map.g01;
  const real G3_0_1_0_0_1 = map.det*c3*c2*c1*c0_0*c0_1*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*c0_1*c0_0*map.g01*map.g11;
  const real G3_0_1_0_1_0 = map.det*c3*c2*c1*c0_0*c0_1*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*c0_1*c0_0*map.g11*map.g01;
  const real G3_0_1_0_1_1 = map.det*c3*c2*c1*c0_0*c0_1*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*c0_1*c0_0*map.g11*map.g11;
  const real G3_0_1_1_0_0 = map.det*c3*c2*c1*c0_0*c0_1*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*c0_1*c0_1*map.g01*map.g01;
  const real G3_0_1_1_1_0 = map.det*c3*c2*c1*c0_0*c0_1*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*c0_1*c0_1*map.g11*map.g01;
  const real G3_0_1_2_0_1 = map.det*c3*c2*c1*c0_0*c0_1*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*c0_1*c0_2*map.g01*map.g11;
  const real G3_0_1_2_1_1 = map.det*c3*c2*c1*c0_0*c0_1*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*c0_1*c0_2*map.g11*map.g11;
  const real G3_0_2_0_0_0 = map.det*c3*c2*c1*c0_0*c0_2*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*c0_2*c0_0*map.g01*map.g01;
  const real G3_0_2_0_0_1 = map.det*c3*c2*c1*c0_0*c0_2*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*c0_2*c0_0*map.g01*map.g11;
  const real G3_0_2_0_1_0 = map.det*c3*c2*c1*c0_0*c0_2*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*c0_2*c0_0*map.g11*map.g01;
  const real G3_0_2_0_1_1 = map.det*c3*c2*c1*c0_0*c0_2*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*c0_2*c0_0*map.g11*map.g11;
  const real G3_0_2_1_0_0 = map.det*c3*c2*c1*c0_0*c0_2*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*c0_2*c0_1*map.g01*map.g01;
  const real G3_0_2_1_1_0 = map.det*c3*c2*c1*c0_0*c0_2*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*c0_2*c0_1*map.g11*map.g01;
  const real G3_0_2_2_0_1 = map.det*c3*c2*c1*c0_0*c0_2*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*c0_2*c0_2*map.g01*map.g11;
  const real G3_0_2_2_1_1 = map.det*c3*c2*c1*c0_0*c0_2*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*c0_2*c0_2*map.g11*map.g11;
  const real G3_1_0_0_0_0 = map.det*c3*c2*c1*c0_1*c0_0*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*c0_0*c0_0*map.g01*map.g01;
  const real G3_1_0_0_0_1 = map.det*c3*c2*c1*c0_1*c0_0*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*c0_0*c0_0*map.g01*map.g11;
  const real G3_1_0_0_1_0 = map.det*c3*c2*c1*c0_1*c0_0*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*c0_0*c0_0*map.g11*map.g01;
  const real G3_1_0_0_1_1 = map.det*c3*c2*c1*c0_1*c0_0*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*c0_0*c0_0*map.g11*map.g11;
  const real G3_1_0_1_0_0 = map.det*c3*c2*c1*c0_1*c0_0*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*c0_0*c0_1*map.g01*map.g01;
  const real G3_1_0_1_1_0 = map.det*c3*c2*c1*c0_1*c0_0*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*c0_0*c0_1*map.g11*map.g01;
  const real G3_1_0_2_0_1 = map.det*c3*c2*c1*c0_1*c0_0*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*c0_0*c0_2*map.g01*map.g11;
  const real G3_1_0_2_1_1 = map.det*c3*c2*c1*c0_1*c0_0*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*c0_0*c0_2*map.g11*map.g11;
  const real G3_1_1_0_0_0 = map.det*c3*c2*c1*c0_1*c0_1*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*c0_1*c0_0*map.g01*map.g01;
  const real G3_1_1_0_0_1 = map.det*c3*c2*c1*c0_1*c0_1*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*c0_1*c0_0*map.g01*map.g11;
  const real G3_1_1_0_1_0 = map.det*c3*c2*c1*c0_1*c0_1*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*c0_1*c0_0*map.g11*map.g01;
  const real G3_1_1_0_1_1 = map.det*c3*c2*c1*c0_1*c0_1*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*c0_1*c0_0*map.g11*map.g11;
  const real G3_1_1_1_0_0 = map.det*c3*c2*c1*c0_1*c0_1*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*c0_1*c0_1*map.g01*map.g01;
  const real G3_1_1_1_1_0 = map.det*c3*c2*c1*c0_1*c0_1*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*c0_1*c0_1*map.g11*map.g01;
  const real G3_1_1_2_0_1 = map.det*c3*c2*c1*c0_1*c0_1*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*c0_1*c0_2*map.g01*map.g11;
  const real G3_1_1_2_1_1 = map.det*c3*c2*c1*c0_1*c0_1*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*c0_1*c0_2*map.g11*map.g11;
  const real G3_1_2_0_0_0 = map.det*c3*c2*c1*c0_1*c0_2*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*c0_2*c0_0*map.g01*map.g01;
  const real G3_1_2_0_0_1 = map.det*c3*c2*c1*c0_1*c0_2*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*c0_2*c0_0*map.g01*map.g11;
  const real G3_1_2_0_1_0 = map.det*c3*c2*c1*c0_1*c0_2*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*c0_2*c0_0*map.g11*map.g01;
  const real G3_1_2_0_1_1 = map.det*c3*c2*c1*c0_1*c0_2*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*c0_2*c0_0*map.g11*map.g11;
  const real G3_1_2_1_0_0 = map.det*c3*c2*c1*c0_1*c0_2*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*c0_2*c0_1*map.g01*map.g01;
  const real G3_1_2_1_1_0 = map.det*c3*c2*c1*c0_1*c0_2*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*c0_2*c0_1*map.g11*map.g01;
  const real G3_1_2_2_0_1 = map.det*c3*c2*c1*c0_1*c0_2*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*c0_2*c0_2*map.g01*map.g11;
  const real G3_1_2_2_1_1 = map.det*c3*c2*c1*c0_1*c0_2*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*c0_2*c0_2*map.g11*map.g11;
  const real G3_2_0_0_0_0 = map.det*c3*c2*c1*c0_2*c0_0*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*c0_0*c0_0*map.g01*map.g01;
  const real G3_2_0_0_0_1 = map.det*c3*c2*c1*c0_2*c0_0*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*c0_0*c0_0*map.g01*map.g11;
  const real G3_2_0_0_1_0 = map.det*c3*c2*c1*c0_2*c0_0*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*c0_0*c0_0*map.g11*map.g01;
  const real G3_2_0_0_1_1 = map.det*c3*c2*c1*c0_2*c0_0*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*c0_0*c0_0*map.g11*map.g11;
  const real G3_2_0_1_0_0 = map.det*c3*c2*c1*c0_2*c0_0*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*c0_0*c0_1*map.g01*map.g01;
  const real G3_2_0_1_1_0 = map.det*c3*c2*c1*c0_2*c0_0*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*c0_0*c0_1*map.g11*map.g01;
  const real G3_2_0_2_0_1 = map.det*c3*c2*c1*c0_2*c0_0*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*c0_0*c0_2*map.g01*map.g11;
  const real G3_2_0_2_1_1 = map.det*c3*c2*c1*c0_2*c0_0*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*c0_0*c0_2*map.g11*map.g11;
  const real G3_2_1_0_0_0 = map.det*c3*c2*c1*c0_2*c0_1*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*c0_1*c0_0*map.g01*map.g01;
  const real G3_2_1_0_0_1 = map.det*c3*c2*c1*c0_2*c0_1*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*c0_1*c0_0*map.g01*map.g11;
  const real G3_2_1_0_1_0 = map.det*c3*c2*c1*c0_2*c0_1*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*c0_1*c0_0*map.g11*map.g01;
  const real G3_2_1_0_1_1 = map.det*c3*c2*c1*c0_2*c0_1*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*c0_1*c0_0*map.g11*map.g11;
  const real G3_2_1_1_0_0 = map.det*c3*c2*c1*c0_2*c0_1*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*c0_1*c0_1*map.g01*map.g01;
  const real G3_2_1_1_1_0 = map.det*c3*c2*c1*c0_2*c0_1*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*c0_1*c0_1*map.g11*map.g01;
  const real G3_2_1_2_0_1 = map.det*c3*c2*c1*c0_2*c0_1*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*c0_1*c0_2*map.g01*map.g11;
  const real G3_2_1_2_1_1 = map.det*c3*c2*c1*c0_2*c0_1*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*c0_1*c0_2*map.g11*map.g11;
  const real G3_2_2_0_0_0 = map.det*c3*c2*c1*c0_2*c0_2*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*c0_2*c0_0*map.g01*map.g01;
  const real G3_2_2_0_0_1 = map.det*c3*c2*c1*c0_2*c0_2*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*c0_2*c0_0*map.g01*map.g11;
  const real G3_2_2_0_1_0 = map.det*c3*c2*c1*c0_2*c0_2*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*c0_2*c0_0*map.g11*map.g01;
  const real G3_2_2_0_1_1 = map.det*c3*c2*c1*c0_2*c0_2*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*c0_2*c0_0*map.g11*map.g11;
  const real G3_2_2_1_0_0 = map.det*c3*c2*c1*c0_2*c0_2*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*c0_2*c0_1*map.g01*map.g01;
  const real G3_2_2_1_1_0 = map.det*c3*c2*c1*c0_2*c0_2*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*c0_2*c0_1*map.g11*map.g01;
  const real G3_2_2_2_0_1 = map.det*c3*c2*c1*c0_2*c0_2*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*c0_2*c0_2*map.g01*map.g11;
  const real G3_2_2_2_1_1 = map.det*c3*c2*c1*c0_2*c0_2*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*c0_2*c0_2*map.g11*map.g11;
  const real G4_0_0_0_0 = map.det*c3*c2*c1*c0_0*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*c0_0*map.g01*map.g01;
  const real G4_0_0_0_1 = map.det*c3*c2*c1*c0_0*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*c0_0*map.g01*map.g11;
  const real G4_0_0_1_0 = map.det*c3*c2*c1*c0_0*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*c0_0*map.g11*map.g01;
  const real G4_0_0_1_1 = map.det*c3*c2*c1*c0_0*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*c0_0*map.g11*map.g11;
  const real G4_0_1_0_0 = map.det*c3*c2*c1*c0_0*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_0*c0_1*map.g01*map.g01;
  const real G4_0_1_1_0 = map.det*c3*c2*c1*c0_0*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_0*c0_1*map.g11*map.g01;
  const real G4_0_2_0_1 = map.det*c3*c2*c1*c0_0*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_0*c0_2*map.g01*map.g11;
  const real G4_0_2_1_1 = map.det*c3*c2*c1*c0_0*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_0*c0_2*map.g11*map.g11;
  const real G4_1_0_0_0 = map.det*c3*c2*c1*c0_1*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*c0_0*map.g01*map.g01;
  const real G4_1_0_0_1 = map.det*c3*c2*c1*c0_1*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*c0_0*map.g01*map.g11;
  const real G4_1_0_1_0 = map.det*c3*c2*c1*c0_1*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*c0_0*map.g11*map.g01;
  const real G4_1_0_1_1 = map.det*c3*c2*c1*c0_1*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*c0_0*map.g11*map.g11;
  const real G4_1_1_0_0 = map.det*c3*c2*c1*c0_1*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_1*c0_1*map.g01*map.g01;
  const real G4_1_1_1_0 = map.det*c3*c2*c1*c0_1*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_1*c0_1*map.g11*map.g01;
  const real G4_1_2_0_1 = map.det*c3*c2*c1*c0_1*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_1*c0_2*map.g01*map.g11;
  const real G4_1_2_1_1 = map.det*c3*c2*c1*c0_1*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_1*c0_2*map.g11*map.g11;
  const real G4_2_0_0_0 = map.det*c3*c2*c1*c0_2*c0_0*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*c0_0*map.g01*map.g01;
  const real G4_2_0_0_1 = map.det*c3*c2*c1*c0_2*c0_0*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*c0_0*map.g01*map.g11;
  const real G4_2_0_1_0 = map.det*c3*c2*c1*c0_2*c0_0*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*c0_0*map.g11*map.g01;
  const real G4_2_0_1_1 = map.det*c3*c2*c1*c0_2*c0_0*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*c0_0*map.g11*map.g11;
  const real G4_2_1_0_0 = map.det*c3*c2*c1*c0_2*c0_1*map.g00*map.g00 + map.det*c3*c2*c1*c0_2*c0_1*map.g01*map.g01;
  const real G4_2_1_1_0 = map.det*c3*c2*c1*c0_2*c0_1*map.g10*map.g00 + map.det*c3*c2*c1*c0_2*c0_1*map.g11*map.g01;
  const real G4_2_2_0_1 = map.det*c3*c2*c1*c0_2*c0_2*map.g00*map.g10 + map.det*c3*c2*c1*c0_2*c0_2*map.g01*map.g11;
  const real G4_2_2_1_1 = map.det*c3*c2*c1*c0_2*c0_2*map.g10*map.g10 + map.det*c3*c2*c1*c0_2*c0_2*map.g11*map.g11;
  const real G5_3_0_0 = map.det*c3*c2*c0_3*map.g00*map.g00 + map.det*c3*c2*c0_3*map.g01*map.g01;
  const real G5_3_0_1 = map.det*c3*c2*c0_3*map.g00*map.g10 + map.det*c3*c2*c0_3*map.g01*map.g11;
  const real G5_3_1_0 = map.det*c3*c2*c0_3*map.g10*map.g00 + map.det*c3*c2*c0_3*map.g11*map.g01;
  const real G5_3_1_1 = map.det*c3*c2*c0_3*map.g10*map.g10 + map.det*c3*c2*c0_3*map.g11*map.g11;
  const real G5_4_0_0 = map.det*c3*c2*c0_4*map.g00*map.g00 + map.det*c3*c2*c0_4*map.g01*map.g01;
  const real G5_4_1_0 = map.det*c3*c2*c0_4*map.g10*map.g00 + map.det*c3*c2*c0_4*map.g11*map.g01;
  const real G5_5_0_1 = map.det*c3*c2*c0_5*map.g00*map.g10 + map.det*c3*c2*c0_5*map.g01*map.g11;
  const real G5_5_1_1 = map.det*c3*c2*c0_5*map.g10*map.g10 + map.det*c3*c2*c0_5*map.g11*map.g11;
  const real G6_0 = map.det*c3*c2*(1.0/c2)*(1.0/c3)*c0_0;
  const real G6_1 = map.det*c3*c2*(1.0/c2)*(1.0/c3)*c0_1;
  const real G6_2 = map.det*c3*c2*(1.0/c2)*(1.0/c3)*c0_2;
  const real G7_0 = map.det*c3*c2*(1.0/c2)*(1.0/c3)*c1_0 + map.det*c3*c2*(1.0/c3)*c2_0;
  const real G7_1 = map.det*c3*c2*(1.0/c2)*(1.0/c3)*c1_1 + map.det*c3*c2*(1.0/c3)*c2_1;
  const real G7_2 = map.det*c3*c2*(1.0/c2)*(1.0/c3)*c1_2 + map.det*c3*c2*(1.0/c3)*c2_2;
  const real G8_0 = map.det*c3*c2*c3*(1.0/c3)*c2_0;
  const real G8_1 = map.det*c3*c2*c3*(1.0/c3)*c2_1;
  const real G8_2 = map.det*c3*c2*c3*(1.0/c3)*c2_2;
  const real G9_3 = map.det*c0_3;
  const real G9_4 = map.det*c0_4;
  const real G9_5 = map.det*c0_5;
  const real G10_0_0_0 = map.det*c0*c0_0*map.g00*map.g00 + map.det*c0*c0_0*map.g01*map.g01;
  const real G10_0_0_1 = map.det*c0*c0_0*map.g00*map.g10 + map.det*c0*c0_0*map.g01*map.g11;
  const real G10_0_1_0 = map.det*c0*c0_0*map.g10*map.g00 + map.det*c0*c0_0*map.g11*map.g01;
  const real G10_0_1_1 = map.det*c0*c0_0*map.g10*map.g10 + map.det*c0*c0_0*map.g11*map.g11;
  const real G10_1_0_0 = map.det*c0*c0_1*map.g00*map.g00 + map.det*c0*c0_1*map.g01*map.g01;
  const real G10_1_1_0 = map.det*c0*c0_1*map.g10*map.g00 + map.det*c0*c0_1*map.g11*map.g01;
  const real G10_2_0_1 = map.det*c0*c0_2*map.g00*map.g10 + map.det*c0*c0_2*map.g01*map.g11;
  const real G10_2_1_1 = map.det*c0*c0_2*map.g10*map.g10 + map.det*c0*c0_2*map.g11*map.g11;

  // Compute element tensor
  block[0] = -1.666666666666664e-01*G0_0_0_0_0_0 - 1.666666666666664e-01*G0_0_0_0_0_1 - 1.666666666666664e-01*G0_0_0_0_1_0 - 1.666666666666664e-01*G0_0_0_0_1_1 + 1.666666666666664e-01*G0_0_0_1_0_0 + 1.666666666666664e-01*G0_0_0_1_1_0 + 1.666666666666664e-01*G0_0_0_2_0_1 + 1.666666666666664e-01*G0_0_0_2_1_1 - 8.333333333333320e-02*G0_0_1_0_0_0 - 8.333333333333319e-02*G0_0_1_0_0_1 - 8.333333333333319e-02*G0_0_1_0_1_0 - 8.333333333333318e-02*G0_0_1_0_1_1 + 8.333333333333320e-02*G0_0_1_1_0_0 + 8.333333333333319e-02*G0_0_1_1_1_0 + 8.333333333333319e-02*G0_0_1_2_0_1 + 8.333333333333318e-02*G0_0_1_2_1_1 - 8.333333333333319e-02*G0_0_2_0_0_0 - 8.333333333333318e-02*G0_0_2_0_0_1 - 8.333333333333318e-02*G0_0_2_0_1_0 - 8.333333333333316e-02*G0_0_2_0_1_1 + 8.333333333333319e-02*G0_0_2_1_0_0 + 8.333333333333318e-02*G0_0_2_1_1_0 + 8.333333333333318e-02*G0_0_2_2_0_1 + 8.333333333333316e-02*G0_0_2_2_1_1 - 8.333333333333320e-02*G0_1_0_0_0_0 - 8.333333333333319e-02*G0_1_0_0_0_1 - 8.333333333333319e-02*G0_1_0_0_1_0 - 8.333333333333318e-02*G0_1_0_0_1_1 + 8.333333333333320e-02*G0_1_0_1_0_0 + 8.333333333333319e-02*G0_1_0_1_1_0 + 8.333333333333319e-02*G0_1_0_2_0_1 + 8.333333333333318e-02*G0_1_0_2_1_1 - 1.666666666666664e-01*G0_1_1_0_0_0 - 1.666666666666664e-01*G0_1_1_0_0_1 - 1.666666666666664e-01*G0_1_1_0_1_0 - 1.666666666666664e-01*G0_1_1_0_1_1 + 1.666666666666664e-01*G0_1_1_1_0_0 + 1.666666666666664e-01*G0_1_1_1_1_0 + 1.666666666666664e-01*G0_1_1_2_0_1 + 1.666666666666664e-01*G0_1_1_2_1_1 - 8.333333333333322e-02*G0_1_2_0_0_0 - 8.333333333333320e-02*G0_1_2_0_0_1 - 8.333333333333320e-02*G0_1_2_0_1_0 - 8.333333333333318e-02*G0_1_2_0_1_1 + 8.333333333333322e-02*G0_1_2_1_0_0 + 8.333333333333320e-02*G0_1_2_1_1_0 + 8.333333333333320e-02*G0_1_2_2_0_1 + 8.333333333333318e-02*G0_1_2_2_1_1 - 8.333333333333319e-02*G0_2_0_0_0_0 - 8.333333333333318e-02*G0_2_0_0_0_1 - 8.333333333333318e-02*G0_2_0_0_1_0 - 8.333333333333316e-02*G0_2_0_0_1_1 + 8.333333333333319e-02*G0_2_0_1_0_0 + 8.333333333333318e-02*G0_2_0_1_1_0 + 8.333333333333318e-02*G0_2_0_2_0_1 + 8.333333333333316e-02*G0_2_0_2_1_1 - 8.333333333333322e-02*G0_2_1_0_0_0 - 8.333333333333320e-02*G0_2_1_0_0_1 - 8.333333333333320e-02*G0_2_1_0_1_0 - 8.333333333333318e-02*G0_2_1_0_1_1 + 8.333333333333322e-02*G0_2_1_1_0_0 + 8.333333333333320e-02*G0_2_1_1_1_0 + 8.333333333333320e-02*G0_2_1_2_0_1 + 8.333333333333318e-02*G0_2_1_2_1_1 - 1.666666666666664e-01*G0_2_2_0_0_0 - 1.666666666666664e-01*G0_2_2_0_0_1 - 1.666666666666664e-01*G0_2_2_0_1_0 - 1.666666666666663e-01*G0_2_2_0_1_1 + 1.666666666666664e-01*G0_2_2_1_0_0 + 1.666666666666664e-01*G0_2_2_1_1_0 + 1.666666666666664e-01*G0_2_2_2_0_1 + 1.666666666666663e-01*G0_2_2_2_1_1 + 3.333333333333331e-01*G1_0_0_0_0 + 3.333333333333331e-01*G1_0_0_0_1 + 3.333333333333331e-01*G1_0_0_1_0 + 3.333333333333330e-01*G1_0_0_1_1 - 3.333333333333331e-01*G1_0_1_0_0 - 3.333333333333331e-01*G1_0_1_1_0 - 3.333333333333331e-01*G1_0_2_0_1 - 3.333333333333330e-01*G1_0_2_1_1 + 3.333333333333332e-01*G1_1_0_0_0 + 3.333333333333331e-01*G1_1_0_0_1 + 3.333333333333331e-01*G1_1_0_1_0 + 3.333333333333331e-01*G1_1_0_1_1 - 3.333333333333332e-01*G1_1_1_0_0 - 3.333333333333331e-01*G1_1_1_1_0 - 3.333333333333331e-01*G1_1_2_0_1 - 3.333333333333331e-01*G1_1_2_1_1 + 3.333333333333331e-01*G1_2_0_0_0 + 3.333333333333331e-01*G1_2_0_0_1 + 3.333333333333331e-01*G1_2_0_1_0 + 3.333333333333330e-01*G1_2_0_1_1 - 3.333333333333331e-01*G1_2_1_0_0 - 3.333333333333331e-01*G1_2_1_1_0 - 3.333333333333331e-01*G1_2_2_0_1 - 3.333333333333330e-01*G1_2_2_1_1 - 9.999999999999996e-01*G2_0_0_0 - 9.999999999999993e-01*G2_0_0_1 - 9.999999999999993e-01*G2_0_1_0 - 9.999999999999991e-01*G2_0_1_1 + 9.999999999999996e-01*G2_1_0_0 + 9.999999999999993e-01*G2_1_1_0 + 9.999999999999993e-01*G2_2_0_1 + 9.999999999999991e-01*G2_2_1_1 - 6.666666666666656e-01*G3_0_0_0_0_0 - 6.666666666666655e-01*G3_0_0_0_0_1 - 6.666666666666655e-01*G3_0_0_0_1_0 - 6.666666666666654e-01*G3_0_0_0_1_1 + 6.666666666666656e-01*G3_0_0_1_0_0 + 6.666666666666655e-01*G3_0_0_1_1_0 + 6.666666666666655e-01*G3_0_0_2_0_1 + 6.666666666666654e-01*G3_0_0_2_1_1 - 3.333333333333328e-01*G3_0_1_0_0_0 - 3.333333333333328e-01*G3_0_1_0_0_1 - 3.333333333333328e-01*G3_0_1_0_1_0 - 3.333333333333327e-01*G3_0_1_0_1_1 + 3.333333333333328e-01*G3_0_1_1_0_0 + 3.333333333333328e-01*G3_0_1_1_1_0 + 3.333333333333328e-01*G3_0_1_2_0_1 + 3.333333333333327e-01*G3_0_1_2_1_1 - 3.333333333333328e-01*G3_0_2_0_0_0 - 3.333333333333327e-01*G3_0_2_0_0_1 - 3.333333333333327e-01*G3_0_2_0_1_0 - 3.333333333333326e-01*G3_0_2_0_1_1 + 3.333333333333328e-01*G3_0_2_1_0_0 + 3.333333333333327e-01*G3_0_2_1_1_0 + 3.333333333333327e-01*G3_0_2_2_0_1 + 3.333333333333326e-01*G3_0_2_2_1_1 - 3.333333333333328e-01*G3_1_0_0_0_0 - 3.333333333333328e-01*G3_1_0_0_0_1 - 3.333333333333328e-01*G3_1_0_0_1_0 - 3.333333333333327e-01*G3_1_0_0_1_1 + 3.333333333333328e-01*G3_1_0_1_0_0 + 3.333333333333328e-01*G3_1_0_1_1_0 + 3.333333333333328e-01*G3_1_0_2_0_1 + 3.333333333333327e-01*G3_1_0_2_1_1 - 6.666666666666656e-01*G3_1_1_0_0_0 - 6.666666666666655e-01*G3_1_1_0_0_1 - 6.666666666666655e-01*G3_1_1_0_1_0 - 6.666666666666654e-01*G3_1_1_0_1_1 + 6.666666666666656e-01*G3_1_1_1_0_0 + 6.666666666666655e-01*G3_1_1_1_1_0 + 6.666666666666655e-01*G3_1_1_2_0_1 + 6.666666666666654e-01*G3_1_1_2_1_1 - 3.333333333333329e-01*G3_1_2_0_0_0 - 3.333333333333328e-01*G3_1_2_0_0_1 - 3.333333333333328e-01*G3_1_2_0_1_0 - 3.333333333333327e-01*G3_1_2_0_1_1 + 3.333333333333329e-01*G3_1_2_1_0_0 + 3.333333333333328e-01*G3_1_2_1_1_0 + 3.333333333333328e-01*G3_1_2_2_0_1 + 3.333333333333327e-01*G3_1_2_2_1_1 - 3.333333333333328e-01*G3_2_0_0_0_0 - 3.333333333333327e-01*G3_2_0_0_0_1 - 3.333333333333327e-01*G3_2_0_0_1_0 - 3.333333333333326e-01*G3_2_0_0_1_1 + 3.333333333333328e-01*G3_2_0_1_0_0 + 3.333333333333327e-01*G3_2_0_1_1_0 + 3.333333333333327e-01*G3_2_0_2_0_1 + 3.333333333333326e-01*G3_2_0_2_1_1 - 3.333333333333329e-01*G3_2_1_0_0_0 - 3.333333333333328e-01*G3_2_1_0_0_1 - 3.333333333333328e-01*G3_2_1_0_1_0 - 3.333333333333327e-01*G3_2_1_0_1_1 + 3.333333333333329e-01*G3_2_1_1_0_0 + 3.333333333333328e-01*G3_2_1_1_1_0 + 3.333333333333328e-01*G3_2_1_2_0_1 + 3.333333333333327e-01*G3_2_1_2_1_1 - 6.666666666666656e-01*G3_2_2_0_0_0 - 6.666666666666654e-01*G3_2_2_0_0_1 - 6.666666666666654e-01*G3_2_2_0_1_0 - 6.666666666666653e-01*G3_2_2_0_1_1 + 6.666666666666656e-01*G3_2_2_1_0_0 + 6.666666666666654e-01*G3_2_2_1_1_0 + 6.666666666666654e-01*G3_2_2_2_0_1 + 6.666666666666653e-01*G3_2_2_2_1_1 + 1.333333333333333e+00*G4_0_0_0_0 + 1.333333333333332e+00*G4_0_0_0_1 + 1.333333333333332e+00*G4_0_0_1_0 + 1.333333333333332e+00*G4_0_0_1_1 - 1.333333333333333e+00*G4_0_1_0_0 - 1.333333333333332e+00*G4_0_1_1_0 - 1.333333333333332e+00*G4_0_2_0_1 - 1.333333333333332e+00*G4_0_2_1_1 + 1.333333333333333e+00*G4_1_0_0_0 + 1.333333333333333e+00*G4_1_0_0_1 + 1.333333333333333e+00*G4_1_0_1_0 + 1.333333333333332e+00*G4_1_0_1_1 - 1.333333333333333e+00*G4_1_1_0_0 - 1.333333333333333e+00*G4_1_1_1_0 - 1.333333333333333e+00*G4_1_2_0_1 - 1.333333333333332e+00*G4_1_2_1_1 + 1.333333333333333e+00*G4_2_0_0_0 + 1.333333333333332e+00*G4_2_0_0_1 + 1.333333333333332e+00*G4_2_0_1_0 + 1.333333333333332e+00*G4_2_0_1_1 - 1.333333333333333e+00*G4_2_1_0_0 - 1.333333333333332e+00*G4_2_1_1_0 - 1.333333333333332e+00*G4_2_2_0_1 - 1.333333333333332e+00*G4_2_2_1_1 + 4.999999999999998e-01*G5_3_0_0 + 4.999999999999997e-01*G5_3_0_1 + 4.999999999999997e-01*G5_3_1_0 + 4.999999999999996e-01*G5_3_1_1 - 4.999999999999998e-01*G5_4_0_0 - 4.999999999999997e-01*G5_4_1_0 - 4.999999999999997e-01*G5_5_0_1 - 4.999999999999996e-01*G5_5_1_1 - 8.333333333333318e-02*G6_0 - 4.166666666666659e-02*G6_1 - 4.166666666666658e-02*G6_2 + 8.333333333333318e-02*G7_0 + 4.166666666666659e-02*G7_1 + 4.166666666666658e-02*G7_2 - 8.333333333333318e-02*G8_0 - 4.166666666666659e-02*G8_1 - 4.166666666666658e-02*G8_2;
  block[1] = 1.666666666666664e-01*G0_0_0_0_0_0 + 1.666666666666664e-01*G0_0_0_0_0_1 - 1.666666666666664e-01*G0_0_0_1_0_0 - 1.666666666666664e-01*G0_0_0_2_0_1 + 8.333333333333320e-02*G0_0_1_0_0_0 + 8.333333333333319e-02*G0_0_1_0_0_1 - 8.333333333333320e-02*G0_0_1_1_0_0 - 8.333333333333319e-02*G0_0_1_2_0_1 + 8.333333333333319e-02*G0_0_2_0_0_0 + 8.333333333333318e-02*G0_0_2_0_0_1 - 8.333333333333319e-02*G0_0_2_1_0_0 - 8.333333333333318e-02*G0_0_2_2_0_1 + 8.333333333333320e-02*G0_1_0_0_0_0 + 8.333333333333319e-02*G0_1_0_0_0_1 - 8.333333333333320e-02*G0_1_0_1_0_0 - 8.333333333333319e-02*G0_1_0_2_0_1 + 1.666666666666664e-01*G0_1_1_0_0_0 + 1.666666666666664e-01*G0_1_1_0_0_1 - 1.666666666666664e-01*G0_1_1_1_0_0 - 1.666666666666664e-01*G0_1_1_2_0_1 + 8.333333333333322e-02*G0_1_2_0_0_0 + 8.333333333333320e-02*G0_1_2_0_0_1 - 8.333333333333322e-02*G0_1_2_1_0_0 - 8.333333333333320e-02*G0_1_2_2_0_1 + 8.333333333333319e-02*G0_2_0_0_0_0 + 8.333333333333318e-02*G0_2_0_0_0_1 - 8.333333333333319e-02*G0_2_0_1_0_0 - 8.333333333333318e-02*G0_2_0_2_0_1 + 8.333333333333322e-02*G0_2_1_0_0_0 + 8.333333333333320e-02*G0_2_1_0_0_1 - 8.333333333333322e-02*G0_2_1_1_0_0 - 8.333333333333320e-02*G0_2_1_2_0_1 + 1.666666666666664e-01*G0_2_2_0_0_0 + 1.666666666666664e-01*G0_2_2_0_0_1 - 1.666666666666664e-01*G0_2_2_1_0_0 - 1.666666666666664e-01*G0_2_2_2_0_1 - 3.333333333333331e-01*G1_0_0_0_0 - 3.333333333333331e-01*G1_0_0_0_1 + 3.333333333333331e-01*G1_0_1_0_0 + 3.333333333333331e-01*G1_0_2_0_1 - 3.333333333333332e-01*G1_1_0_0_0 - 3.333333333333331e-01*G1_1_0_0_1 + 3.333333333333332e-01*G1_1_1_0_0 + 3.333333333333331e-01*G1_1_2_0_1 - 3.333333333333331e-01*G1_2_0_0_0 - 3.333333333333331e-01*G1_2_0_0_1 + 3.333333333333331e-01*G1_2_1_0_0 + 3.333333333333331e-01*G1_2_2_0_1 + 9.999999999999996e-01*G2_0_0_0 + 9.999999999999993e-01*G2_0_0_1 - 9.999999999999996e-01*G2_1_0_0 - 9.999999999999993e-01*G2_2_0_1 + 6.666666666666656e-01*G3_0_0_0_0_0 + 6.666666666666655e-01*G3_0_0_0_0_1 - 6.666666666666656e-01*G3_0_0_1_0_0 - 6.666666666666655e-01*G3_0_0_2_0_1 + 3.333333333333328e-01*G3_0_1_0_0_0 + 3.333333333333328e-01*G3_0_1_0_0_1 - 3.333333333333328e-01*G3_0_1_1_0_0 - 3.333333333333328e-01*G3_0_1_2_0_1 + 3.333333333333328e-01*G3_0_2_0_0_0 + 3.333333333333327e-01*G3_0_2_0_0_1 - 3.333333333333328e-01*G3_0_2_1_0_0 - 3.333333333333327e-01*G3_0_2_2_0_1 + 3.333333333333328e-01*G3_1_0_0_0_0 + 3.333333333333328e-01*G3_1_0_0_0_1 - 3.333333333333328e-01*G3_1_0_1_0_0 - 3.333333333333328e-01*G3_1_0_2_0_1 + 6.666666666666656e-01*G3_1_1_0_0_0 + 6.666666666666655e-01*G3_1_1_0_0_1 - 6.666666666666656e-01*G3_1_1_1_0_0 - 6.666666666666655e-01*G3_1_1_2_0_1 + 3.333333333333329e-01*G3_1_2_0_0_0 + 3.333333333333328e-01*G3_1_2_0_0_1 - 3.333333333333329e-01*G3_1_2_1_0_0 - 3.333333333333328e-01*G3_1_2_2_0_1 + 3.333333333333328e-01*G3_2_0_0_0_0 + 3.333333333333327e-01*G3_2_0_0_0_1 - 3.333333333333328e-01*G3_2_0_1_0_0 - 3.333333333333327e-01*G3_2_0_2_0_1 + 3.333333333333329e-01*G3_2_1_0_0_0 + 3.333333333333328e-01*G3_2_1_0_0_1 - 3.333333333333329e-01*G3_2_1_1_0_0 - 3.333333333333328e-01*G3_2_1_2_0_1 + 6.666666666666656e-01*G3_2_2_0_0_0 + 6.666666666666654e-01*G3_2_2_0_0_1 - 6.666666666666656e-01*G3_2_2_1_0_0 - 6.666666666666654e-01*G3_2_2_2_0_1 - 1.333333333333333e+00*G4_0_0_0_0 - 1.333333333333332e+00*G4_0_0_0_1 + 1.333333333333333e+00*G4_0_1_0_0 + 1.333333333333332e+00*G4_0_2_0_1 - 1.333333333333333e+00*G4_1_0_0_0 - 1.333333333333333e+00*G4_1_0_0_1 + 1.333333333333333e+00*G4_1_1_0_0 + 1.333333333333333e+00*G4_1_2_0_1 - 1.333333333333333e+00*G4_2_0_0_0 - 1.333333333333332e+00*G4_2_0_0_1 + 1.333333333333333e+00*G4_2_1_0_0 + 1.333333333333332e+00*G4_2_2_0_1 - 4.999999999999998e-01*G5_3_0_0 - 4.999999999999997e-01*G5_3_0_1 + 4.999999999999998e-01*G5_4_0_0 + 4.999999999999997e-01*G5_5_0_1 - 4.166666666666659e-02*G6_0 - 8.333333333333318e-02*G6_1 - 4.166666666666659e-02*G6_2 + 4.166666666666659e-02*G7_0 + 8.333333333333318e-02*G7_1 + 4.166666666666659e-02*G7_2 - 4.166666666666659e-02*G8_0 - 8.333333333333318e-02*G8_1 - 4.166666666666659e-02*G8_2;
  block[2] = 1.666666666666664e-01*G0_0_0_0_1_0 + 1.666666666666664e-01*G0_0_0_0_1_1 - 1.666666666666664e-01*G0_0_0_1_1_0 - 1.666666666666664e-01*G0_0_0_2_1_1 + 8.333333333333319e-02*G0_0_1_0_1_0 + 8.333333333333318e-02*G0_0_1_0_1_1 - 8.333333333333319e-02*G0_0_1_1_1_0 - 8.333333333333318e-02*G0_0_1_2_1_1 + 8.333333333333318e-02*G0_0_2_0_1_0 + 8.333333333333316e-02*G0_0_2_0_1_1 - 8.333333333333318e-02*G0_0_2_1_1_0 - 8.333333333333316e-02*G0_0_2_2_1_1 + 8.333333333333319e-02*G0_1_0_0_1_0 + 8.333333333333318e-02*G0_1_0_0_1_1 - 8.333333333333319e-02*G0_1_0_1_1_0 - 8.333333333333318e-02*G0_1_0_2_1_1 + 1.666666666666664e-01*G0_1_1_0_1_0 + 1.666666666666664e-01*G0_1_1_0_1_1 - 1.666666666666664e-01*G0_1_1_1_1_0 - 1.666666666666664e-01*G0_1_1_2_1_1 + 8.333333333333320e-02*G0_1_2_0_1_0 + 8.333333333333318e-02*G0_1_2_0_1_1 - 8.333333333333320e-02*G0_1_2_1_1_0 - 8.333333333333318e-02*G0_1_2_2_1_1 + 8.333333333333318e-02*G0_2_0_0_1_0 + 8.333333333333316e-02*G0_2_0_0_1_1 - 8.333333333333318e-02*G0_2_0_1_1_0 - 8.333333333333316e-02*G0_2_0_2_1_1 + 8.333333333333320e-02*G0_2_1_0_1_0 + 8.333333333333318e-02*G0_2_1_0_1_1 - 8.333333333333320e-02*G0_2_1_1_1_0 - 8.333333333333318e-02*G0_2_1_2_1_1 + 1.666666666666664e-01*G0_2_2_0_1_0 + 1.666666666666663e-01*G0_2_2_0_1_1 - 1.666666666666664e-01*G0_2_2_1_1_0 - 1.666666666666663e-01*G0_2_2_2_1_1 - 3.333333333333331e-01*G1_0_0_1_0 - 3.333333333333330e-01*G1_0_0_1_1 + 3.333333333333331e-01*G1_0_1_1_0 + 3.333333333333330e-01*G1_0_2_1_1 - 3.333333333333331e-01*G1_1_0_1_0 - 3.333333333333331e-01*G1_1_0_1_1 + 3.333333333333331e-01*G1_1_1_1_0 + 3.333333333333331e-01*G1_1_2_1_1 - 3.333333333333331e-01*G1_2_0_1_0 - 3.333333333333330e-01*G1_2_0_1_1 + 3.333333333333331e-01*G1_2_1_1_0 + 3.333333333333330e-01*G1_2_2_1_1 + 9.999999999999993e-01*G2_0_1_0 + 9.999999999999991e-01*G2_0_1_1 - 9.999999999999993e-01*G2_1_1_0 - 9.999999999999991e-01*G2_2_1_1 + 6.666666666666655e-01*G3_0_0_0_1_0 + 6.666666666666654e-01*G3_0_0_0_1_1 - 6.666666666666655e-01*G3_0_0_1_1_0 - 6.666666666666654e-01*G3_0_0_2_1_1 + 3.333333333333328e-01*G3_0_1_0_1_0 + 3.333333333333327e-01*G3_0_1_0_1_1 - 3.333333333333328e-01*G3_0_1_1_1_0 - 3.333333333333327e-01*G3_0_1_2_1_1 + 3.333333333333327e-01*G3_0_2_0_1_0 + 3.333333333333326e-01*G3_0_2_0_1_1 - 3.333333333333327e-01*G3_0_2_1_1_0 - 3.333333333333326e-01*G3_0_2_2_1_1 + 3.333333333333328e-01*G3_1_0_0_1_0 + 3.333333333333327e-01*G3_1_0_0_1_1 - 3.333333333333328e-01*G3_1_0_1_1_0 - 3.333333333333327e-01*G3_1_0_2_1_1 + 6.666666666666655e-01*G3_1_1_0_1_0 + 6.666666666666654e-01*G3_1_1_0_1_1 - 6.666666666666655e-01*G3_1_1_1_1_0 - 6.666666666666654e-01*G3_1_1_2_1_1 + 3.333333333333328e-01*G3_1_2_0_1_0 + 3.333333333333327e-01*G3_1_2_0_1_1 - 3.333333333333328e-01*G3_1_2_1_1_0 - 3.333333333333327e-01*G3_1_2_2_1_1 + 3.333333333333327e-01*G3_2_0_0_1_0 + 3.333333333333326e-01*G3_2_0_0_1_1 - 3.333333333333327e-01*G3_2_0_1_1_0 - 3.333333333333326e-01*G3_2_0_2_1_1 + 3.333333333333328e-01*G3_2_1_0_1_0 + 3.333333333333327e-01*G3_2_1_0_1_1 - 3.333333333333328e-01*G3_2_1_1_1_0 - 3.333333333333327e-01*G3_2_1_2_1_1 + 6.666666666666654e-01*G3_2_2_0_1_0 + 6.666666666666653e-01*G3_2_2_0_1_1 - 6.666666666666654e-01*G3_2_2_1_1_0 - 6.666666666666653e-01*G3_2_2_2_1_1 - 1.333333333333332e+00*G4_0_0_1_0 - 1.333333333333332e+00*G4_0_0_1_1 + 1.333333333333332e+00*G4_0_1_1_0 + 1.333333333333332e+00*G4_0_2_1_1 - 1.333333333333333e+00*G4_1_0_1_0 - 1.333333333333332e+00*G4_1_0_1_1 + 1.333333333333333e+00*G4_1_1_1_0 + 1.333333333333332e+00*G4_1_2_1_1 - 1.333333333333332e+00*G4_2_0_1_0 - 1.333333333333332e+00*G4_2_0_1_1 + 1.333333333333332e+00*G4_2_1_1_0 + 1.333333333333332e+00*G4_2_2_1_1 - 4.999999999999997e-01*G5_3_1_0 - 4.999999999999996e-01*G5_3_1_1 + 4.999999999999997e-01*G5_4_1_0 + 4.999999999999996e-01*G5_5_1_1 - 4.166666666666658e-02*G6_0 - 4.166666666666659e-02*G6_1 - 8.333333333333316e-02*G6_2 + 4.166666666666658e-02*G7_0 + 4.166666666666659e-02*G7_1 + 8.333333333333316e-02*G7_2 - 4.166666666666658e-02*G8_0 - 4.166666666666659e-02*G8_1 - 8.333333333333316e-02*G8_2;
  block[3] = -8.333333333333318e-02*G9_3 - 4.166666666666659e-02*G9_4 - 4.166666666666658e-02*G9_5 - 4.999999999999998e-01*G10_0_0_0 - 4.999999999999997e-01*G10_0_0_1 - 4.999999999999997e-01*G10_0_1_0 - 4.999999999999996e-01*G10_0_1_1 + 4.999999999999998e-01*G10_1_0_0 + 4.999999999999997e-01*G10_1_1_0 + 4.999999999999997e-01*G10_2_0_1 + 4.999999999999996e-01*G10_2_1_1;
  block[4] = -4.166666666666659e-02*G9_3 - 8.333333333333318e-02*G9_4 - 4.166666666666659e-02*G9_5 + 4.999999999999998e-01*G10_0_0_0 + 4.999999999999997e-01*G10_0_0_1 - 4.999999999999998e-01*G10_1_0_0 - 4.999999999999997e-01*G10_2_0_1;
  block[5] = -4.166666666666658e-02*G9_3 - 4.166666666666659e-02*G9_4 - 8.333333333333316e-02*G9_5 + 4.999999999999997e-01*G10_0_1_0 + 4.999999999999996e-01*G10_0_1_1 - 4.999999999999997e-01*G10_1_1_0 - 4.999999999999996e-01*G10_2_1_1;
}

// No contribution from the boundary
bool LinearForm::boundary_contribution() const { return false; }

void LinearForm::eval(real block[], const AffineMap& map, unsigned int facet) const {}

} }

#endif
