// This file was automatically generated by FFC, the FEniCS Form Compiler.
// Licensed under the GNU GPL Version 2.

#ifndef __POISSONSYSTEM_H
#define __POISSONSYSTEM_H

#include <dolfin/NewFiniteElement.h>
#include <dolfin/LinearForm.h>
#include <dolfin/BilinearForm.h>

namespace dolfin { namespace PoissonSystem {

/// This is the finite element for which the form is generated,
/// providing the information neccessary to do assembly.

class FiniteElement : public dolfin::NewFiniteElement
{
public:

  FiniteElement() : dolfin::NewFiniteElement(), tensordims(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 3;
  }

  ~FiniteElement()
  {
    if ( tensordims ) delete [] tensordims;
  }

  inline unsigned int spacedim() const
  {
    return 9;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  // FIXME: Only works for nodal basis
  inline unsigned int dof(unsigned int i, const Cell& cell, const Mesh& mesh) const
  {
    return (i/3) * mesh.noNodes() + cell.nodeID(i % 3);
  }

  // FIXME: Only works for nodal basis
  inline const Point coord(unsigned int i, const Cell& cell, const Mesh& mesh) const
  {
    Point p;
    return p;
  }

private:

  unsigned int* tensordims;

};

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class BilinearForm : public dolfin::BilinearForm
{
public:

  BilinearForm() : dolfin::BilinearForm()
  {
  }

  bool interior(real* block) const
  {
    // Compute geometry tensors
    real G0_00 = det*(g00*g00 + g01*g01);
    real G0_01 = det*(g00*g10 + g01*g11);
    real G0_10 = det*(g10*g00 + g11*g01);
    real G0_11 = det*(g10*g10 + g11*g11);

    // Compute element tensor
    block[0] = 0.5*G0_00 + 0.5*G0_01 + 0.5*G0_10 + 0.5*G0_11;
    block[1] = -0.5*G0_00 - 0.5*G0_10;
    block[2] = -0.5*G0_01 - 0.5*G0_11;
    block[3] = 0.0;
    block[4] = 0.0;
    block[5] = 0.0;
    block[6] = 0.0;
    block[7] = 0.0;
    block[8] = 0.0;
    block[9] = -0.5*G0_00 - 0.5*G0_01;
    block[10] = 0.5*G0_00;
    block[11] = 0.5*G0_01;
    block[12] = 0.0;
    block[13] = 0.0;
    block[14] = 0.0;
    block[15] = 0.0;
    block[16] = 0.0;
    block[17] = 0.0;
    block[18] = -0.5*G0_10 - 0.5*G0_11;
    block[19] = 0.5*G0_10;
    block[20] = 0.5*G0_11;
    block[21] = 0.0;
    block[22] = 0.0;
    block[23] = 0.0;
    block[24] = 0.0;
    block[25] = 0.0;
    block[26] = 0.0;
    block[27] = 0.0;
    block[28] = 0.0;
    block[29] = 0.0;
    block[30] = 0.5*G0_00 + 0.5*G0_01 + 0.5*G0_10 + 0.5*G0_11;
    block[31] = -0.5*G0_00 - 0.5*G0_10;
    block[32] = -0.5*G0_01 - 0.5*G0_11;
    block[33] = 0.0;
    block[34] = 0.0;
    block[35] = 0.0;
    block[36] = 0.0;
    block[37] = 0.0;
    block[38] = 0.0;
    block[39] = -0.5*G0_00 - 0.5*G0_01;
    block[40] = 0.5*G0_00;
    block[41] = 0.5*G0_01;
    block[42] = 0.0;
    block[43] = 0.0;
    block[44] = 0.0;
    block[45] = 0.0;
    block[46] = 0.0;
    block[47] = 0.0;
    block[48] = -0.5*G0_10 - 0.5*G0_11;
    block[49] = 0.5*G0_10;
    block[50] = 0.5*G0_11;
    block[51] = 0.0;
    block[52] = 0.0;
    block[53] = 0.0;
    block[54] = 0.0;
    block[55] = 0.0;
    block[56] = 0.0;
    block[57] = 0.0;
    block[58] = 0.0;
    block[59] = 0.0;
    block[60] = 0.5*G0_00 + 0.5*G0_01 + 0.5*G0_10 + 0.5*G0_11;
    block[61] = -0.5*G0_00 - 0.5*G0_10;
    block[62] = -0.5*G0_01 - 0.5*G0_11;
    block[63] = 0.0;
    block[64] = 0.0;
    block[65] = 0.0;
    block[66] = 0.0;
    block[67] = 0.0;
    block[68] = 0.0;
    block[69] = -0.5*G0_00 - 0.5*G0_01;
    block[70] = 0.5*G0_00;
    block[71] = 0.5*G0_01;
    block[72] = 0.0;
    block[73] = 0.0;
    block[74] = 0.0;
    block[75] = 0.0;
    block[76] = 0.0;
    block[77] = 0.0;
    block[78] = -0.5*G0_10 - 0.5*G0_11;
    block[79] = 0.5*G0_10;
    block[80] = 0.5*G0_11;

    return true;
  }

};

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class LinearForm : public dolfin::LinearForm
{
public:

  LinearForm(const NewFunction& w0) : dolfin::LinearForm()
  {
    // Add functions
    init(1, 9);
    add(w0);
  }

  bool interior(real* block) const
  {
    // Compute geometry tensors
    real G0_0 = det*w[0][0];
    real G0_1 = det*w[0][1];
    real G0_2 = det*w[0][2];
    real G0_3 = det*w[0][3];
    real G0_4 = det*w[0][4];
    real G0_5 = det*w[0][5];
    real G0_6 = det*w[0][6];
    real G0_7 = det*w[0][7];
    real G0_8 = det*w[0][8];

    // Compute element tensor
    block[0] = 0.0833333333333*G0_0 + 0.0416666666667*G0_1 + 0.0416666666667*G0_2;
    block[1] = 0.0416666666667*G0_0 + 0.0833333333333*G0_1 + 0.0416666666667*G0_2;
    block[2] = 0.0416666666667*G0_0 + 0.0416666666667*G0_1 + 0.0833333333333*G0_2;
    block[3] = 0.0833333333333*G0_3 + 0.0416666666667*G0_4 + 0.0416666666667*G0_5;
    block[4] = 0.0416666666667*G0_3 + 0.0833333333333*G0_4 + 0.0416666666667*G0_5;
    block[5] = 0.0416666666667*G0_3 + 0.0416666666667*G0_4 + 0.0833333333333*G0_5;
    block[6] = 0.0833333333333*G0_6 + 0.0416666666667*G0_7 + 0.0416666666667*G0_8;
    block[7] = 0.0416666666667*G0_6 + 0.0833333333333*G0_7 + 0.0416666666667*G0_8;
    block[8] = 0.0416666666667*G0_6 + 0.0416666666667*G0_7 + 0.0833333333333*G0_8;

    return true;
  }

};


} }

#endif
