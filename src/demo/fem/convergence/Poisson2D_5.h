// Automatically generated by FFC, the FEniCS Form Compiler, version 0.3.1.
// For further information, go to http://www/fenics.org/ffc/.
// Licensed under the GNU GPL Version 2.

#ifndef __POISSON2D_5_H
#define __POISSON2D_5_H

#include <dolfin/Mesh.h>
#include <dolfin/Cell.h>
#include <dolfin/Point.h>
#include <dolfin/Vector.h>
#include <dolfin/AffineMap.h>
#include <dolfin/FiniteElement.h>
#include <dolfin/FiniteElementSpec.h>
#include <dolfin/LinearForm.h>
#include <dolfin/BilinearForm.h>

namespace dolfin { namespace Poisson2D_5 {

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class BilinearForm : public dolfin::BilinearForm
{
public:
  
  class TestElement : public dolfin::FiniteElement
  {
  public:
  
    TestElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
    {
      // Element is scalar, don't need to initialize tensordims
  
      // Element is simple, don't need to initialize subelements
    }
  
    ~TestElement()
    {
      if ( tensordims ) delete [] tensordims;
      if ( subelements )
      {
        for (unsigned int i = 0; i < elementdim(); i++)
          delete subelements[i];
        delete [] subelements;
      }
    }
  
    inline unsigned int spacedim() const
    {
      return 21;
    }
  
    inline unsigned int shapedim() const
    {
      return 2;
    }
  
    inline unsigned int tensordim(unsigned int i) const
    {
      dolfin_error("Element is scalar.");
      return 0;
    }
  
    inline unsigned int elementdim() const
    {
      return 1;
    }
  
    inline unsigned int rank() const
    {
      return 0;
    }
  
    void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
    {
      static unsigned int edge_reordering_0[2][4] = {{0, 1, 2, 3}, {3, 2, 1, 0}};
      nodes[0] = cell.vertexID(0);
      nodes[1] = cell.vertexID(1);
      nodes[2] = cell.vertexID(2);
      int alignment = cell.edgeAlignment(0);
      int offset = mesh.numVertices();
      nodes[3] = offset + 4*cell.edgeID(0) + edge_reordering_0[alignment][0];
      nodes[4] = offset + 4*cell.edgeID(0) + edge_reordering_0[alignment][1];
      nodes[5] = offset + 4*cell.edgeID(0) + edge_reordering_0[alignment][2];
      nodes[6] = offset + 4*cell.edgeID(0) + edge_reordering_0[alignment][3];
      alignment = cell.edgeAlignment(1);
      nodes[7] = offset + 4*cell.edgeID(1) + edge_reordering_0[alignment][0];
      nodes[8] = offset + 4*cell.edgeID(1) + edge_reordering_0[alignment][1];
      nodes[9] = offset + 4*cell.edgeID(1) + edge_reordering_0[alignment][2];
      nodes[10] = offset + 4*cell.edgeID(1) + edge_reordering_0[alignment][3];
      alignment = cell.edgeAlignment(2);
      nodes[11] = offset + 4*cell.edgeID(2) + edge_reordering_0[alignment][0];
      nodes[12] = offset + 4*cell.edgeID(2) + edge_reordering_0[alignment][1];
      nodes[13] = offset + 4*cell.edgeID(2) + edge_reordering_0[alignment][2];
      nodes[14] = offset + 4*cell.edgeID(2) + edge_reordering_0[alignment][3];
      offset = offset + 4*mesh.numEdges();
      nodes[15] = offset + 6*cell.id() + 0;
      nodes[16] = offset + 6*cell.id() + 1;
      nodes[17] = offset + 6*cell.id() + 2;
      nodes[18] = offset + 6*cell.id() + 3;
      nodes[19] = offset + 6*cell.id() + 4;
      nodes[20] = offset + 6*cell.id() + 5;
    }
  
    void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
    {
      points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
      points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
      points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
      points[3] = map(8.000000000000000e-01, 2.000000000000000e-01);
      points[4] = map(6.000000000000000e-01, 4.000000000000000e-01);
      points[5] = map(4.000000000000000e-01, 6.000000000000000e-01);
      points[6] = map(2.000000000000000e-01, 8.000000000000000e-01);
      points[7] = map(0.000000000000000e+00, 8.000000000000000e-01);
      points[8] = map(0.000000000000000e+00, 6.000000000000000e-01);
      points[9] = map(0.000000000000000e+00, 4.000000000000000e-01);
      points[10] = map(0.000000000000000e+00, 2.000000000000000e-01);
      points[11] = map(2.000000000000000e-01, 0.000000000000000e+00);
      points[12] = map(4.000000000000000e-01, 0.000000000000000e+00);
      points[13] = map(6.000000000000000e-01, 0.000000000000000e+00);
      points[14] = map(8.000000000000000e-01, 0.000000000000000e+00);
      points[15] = map(2.000000000000000e-01, 2.000000000000000e-01);
      points[16] = map(4.000000000000000e-01, 2.000000000000000e-01);
      points[17] = map(6.000000000000000e-01, 2.000000000000000e-01);
      points[18] = map(2.000000000000000e-01, 4.000000000000000e-01);
      points[19] = map(4.000000000000000e-01, 4.000000000000000e-01);
      points[20] = map(2.000000000000000e-01, 6.000000000000000e-01);
      components[0] = 0;
      components[1] = 0;
      components[2] = 0;
      components[3] = 0;
      components[4] = 0;
      components[5] = 0;
      components[6] = 0;
      components[7] = 0;
      components[8] = 0;
      components[9] = 0;
      components[10] = 0;
      components[11] = 0;
      components[12] = 0;
      components[13] = 0;
      components[14] = 0;
      components[15] = 0;
      components[16] = 0;
      components[17] = 0;
      components[18] = 0;
      components[19] = 0;
      components[20] = 0;
    }
  
    void vertexeval(real values[], unsigned int vertex, const real x[], const Mesh& mesh) const
    {
      // FIXME: Temporary fix for Lagrange elements
      values[0] = x[vertex];
    }
  
    const FiniteElement& operator[] (unsigned int i) const
    {
      return *this;
    }
  
    FiniteElement& operator[] (unsigned int i)
    {
      return *this;
    }
  
    FiniteElementSpec spec() const
    {
      FiniteElementSpec s("Lagrange", "triangle", 5);
      return s;
    }
    
  private:
  
    unsigned int* tensordims;
    FiniteElement** subelements;
  
  };
    
  class TrialElement : public dolfin::FiniteElement
  {
  public:
  
    TrialElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
    {
      // Element is scalar, don't need to initialize tensordims
  
      // Element is simple, don't need to initialize subelements
    }
  
    ~TrialElement()
    {
      if ( tensordims ) delete [] tensordims;
      if ( subelements )
      {
        for (unsigned int i = 0; i < elementdim(); i++)
          delete subelements[i];
        delete [] subelements;
      }
    }
  
    inline unsigned int spacedim() const
    {
      return 21;
    }
  
    inline unsigned int shapedim() const
    {
      return 2;
    }
  
    inline unsigned int tensordim(unsigned int i) const
    {
      dolfin_error("Element is scalar.");
      return 0;
    }
  
    inline unsigned int elementdim() const
    {
      return 1;
    }
  
    inline unsigned int rank() const
    {
      return 0;
    }
  
    void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
    {
      static unsigned int edge_reordering_0[2][4] = {{0, 1, 2, 3}, {3, 2, 1, 0}};
      nodes[0] = cell.vertexID(0);
      nodes[1] = cell.vertexID(1);
      nodes[2] = cell.vertexID(2);
      int alignment = cell.edgeAlignment(0);
      int offset = mesh.numVertices();
      nodes[3] = offset + 4*cell.edgeID(0) + edge_reordering_0[alignment][0];
      nodes[4] = offset + 4*cell.edgeID(0) + edge_reordering_0[alignment][1];
      nodes[5] = offset + 4*cell.edgeID(0) + edge_reordering_0[alignment][2];
      nodes[6] = offset + 4*cell.edgeID(0) + edge_reordering_0[alignment][3];
      alignment = cell.edgeAlignment(1);
      nodes[7] = offset + 4*cell.edgeID(1) + edge_reordering_0[alignment][0];
      nodes[8] = offset + 4*cell.edgeID(1) + edge_reordering_0[alignment][1];
      nodes[9] = offset + 4*cell.edgeID(1) + edge_reordering_0[alignment][2];
      nodes[10] = offset + 4*cell.edgeID(1) + edge_reordering_0[alignment][3];
      alignment = cell.edgeAlignment(2);
      nodes[11] = offset + 4*cell.edgeID(2) + edge_reordering_0[alignment][0];
      nodes[12] = offset + 4*cell.edgeID(2) + edge_reordering_0[alignment][1];
      nodes[13] = offset + 4*cell.edgeID(2) + edge_reordering_0[alignment][2];
      nodes[14] = offset + 4*cell.edgeID(2) + edge_reordering_0[alignment][3];
      offset = offset + 4*mesh.numEdges();
      nodes[15] = offset + 6*cell.id() + 0;
      nodes[16] = offset + 6*cell.id() + 1;
      nodes[17] = offset + 6*cell.id() + 2;
      nodes[18] = offset + 6*cell.id() + 3;
      nodes[19] = offset + 6*cell.id() + 4;
      nodes[20] = offset + 6*cell.id() + 5;
    }
  
    void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
    {
      points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
      points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
      points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
      points[3] = map(8.000000000000000e-01, 2.000000000000000e-01);
      points[4] = map(6.000000000000000e-01, 4.000000000000000e-01);
      points[5] = map(4.000000000000000e-01, 6.000000000000000e-01);
      points[6] = map(2.000000000000000e-01, 8.000000000000000e-01);
      points[7] = map(0.000000000000000e+00, 8.000000000000000e-01);
      points[8] = map(0.000000000000000e+00, 6.000000000000000e-01);
      points[9] = map(0.000000000000000e+00, 4.000000000000000e-01);
      points[10] = map(0.000000000000000e+00, 2.000000000000000e-01);
      points[11] = map(2.000000000000000e-01, 0.000000000000000e+00);
      points[12] = map(4.000000000000000e-01, 0.000000000000000e+00);
      points[13] = map(6.000000000000000e-01, 0.000000000000000e+00);
      points[14] = map(8.000000000000000e-01, 0.000000000000000e+00);
      points[15] = map(2.000000000000000e-01, 2.000000000000000e-01);
      points[16] = map(4.000000000000000e-01, 2.000000000000000e-01);
      points[17] = map(6.000000000000000e-01, 2.000000000000000e-01);
      points[18] = map(2.000000000000000e-01, 4.000000000000000e-01);
      points[19] = map(4.000000000000000e-01, 4.000000000000000e-01);
      points[20] = map(2.000000000000000e-01, 6.000000000000000e-01);
      components[0] = 0;
      components[1] = 0;
      components[2] = 0;
      components[3] = 0;
      components[4] = 0;
      components[5] = 0;
      components[6] = 0;
      components[7] = 0;
      components[8] = 0;
      components[9] = 0;
      components[10] = 0;
      components[11] = 0;
      components[12] = 0;
      components[13] = 0;
      components[14] = 0;
      components[15] = 0;
      components[16] = 0;
      components[17] = 0;
      components[18] = 0;
      components[19] = 0;
      components[20] = 0;
    }
  
    void vertexeval(real values[], unsigned int vertex, const real x[], const Mesh& mesh) const
    {
      // FIXME: Temporary fix for Lagrange elements
      values[0] = x[vertex];
    }
  
    const FiniteElement& operator[] (unsigned int i) const
    {
      return *this;
    }
  
    FiniteElement& operator[] (unsigned int i)
    {
      return *this;
    }
  
    FiniteElementSpec spec() const
    {
      FiniteElementSpec s("Lagrange", "triangle", 5);
      return s;
    }
    
  private:
  
    unsigned int* tensordims;
    FiniteElement** subelements;
  
  };
  
  BilinearForm() : dolfin::BilinearForm(0)
  {
    // Create finite element for test space
    _test = new TestElement();

    // Create finite element for trial space
    _trial = new TrialElement();
  }

  void eval(real block[], const AffineMap& map) const
  {
    // Compute geometry tensors
    const real G0_0_0 = map.det*(map.g00*map.g00 + map.g01*map.g01);
    const real G0_0_1 = map.det*(map.g00*map.g10 + map.g01*map.g11);
    const real G0_1_0 = map.det*(map.g10*map.g00 + map.g11*map.g01);
    const real G0_1_1 = map.det*(map.g10*map.g10 + map.g11*map.g11);

    // Compute element tensor
    block[150] = 3.401606591710740e-01*G0_0_0 + 7.104621362433819e-02*G0_0_1 + 7.104621362433799e-02*G0_1_0;
    block[345] = block[150] + 4.736414241622949e-02*G0_0_0 + -5.425347222222187e-01*G0_0_1 + -5.425347222222148e-01*G0_1_0 + -3.186315035273329e-01*G0_1_1;
    block[217] = -block[150] + -5.985105268959402e-01*G0_0_1 + -1.980682319223950e-01*G0_1_0 + -9.386711860670126e-01*G0_1_1;
    block[269] = block[150] + 3.401606591710778e-01*G0_0_0 + 1.539334628527329e+00*G0_0_1 + 1.539334628527335e+00*G0_1_0 + 2.023740630511460e+00*G0_1_1;
    block[89] = block[150] + -2.144303902116394e+00*G0_0_0 + 6.286513447971743e-01*G0_0_1 + -4.219714506172808e-01*G0_1_0 + -1.804143242945319e+00*G0_1_1;
    block[370] = block[150] + -9.515886794532618e-01*G0_0_0 + -2.723438188932974e+00*G0_0_1 + -2.723438188932970e+00*G0_1_0 + -3.961364638447963e+00*G0_1_1;
    block[198] = block[150] + 2.734202766754837e+00*G0_0_0 + 1.827825314153429e+00*G0_0_1 + 1.827825314153429e+00*G0_1_0 + 4.417782738095217e+00*G0_1_1;
    block[224] = -block[150] + 5.382288910934727e-01*G0_0_0;
    block[302] = block[150] + -2.691144455467345e-01*G0_0_0 + -1.011870315255728e-01*G0_0_1 + -1.011870315255728e-01*G0_1_0;
    block[328] = block[269] + -2.540440365961190e+00*G0_0_1 + -2.540440365961189e+00*G0_1_0 + -2.540440365961194e+00*G0_1_1;
    block[319] = block[328] + -1.024787808641969e+00*G0_0_0 + 4.822530864197569e-01*G0_0_1 + 4.822530864197522e-01*G0_1_0;
    block[293] = block[328] + -6.458746693121656e-01*G0_0_0 + 8.611662257495616e-01*G0_0_1 + 8.611662257495539e-01*G0_1_0;
    block[209] = block[269] + 1.343419312169305e+00*G0_0_0 + -1.343419312169319e+00*G0_1_1;
    block[313] = block[150] + -1.291749338624350e-01*G0_0_0 + -6.437217537477925e-01*G0_0_1 + -6.437217537477933e-01*G0_1_0;
    block[259] = block[302] + -7.104621362434158e-02*G0_0_0 + 1.119516093474422e-01*G0_1_1;
    block[180] = -block[259] + -1.722332451499162e-02*G0_0_0 + 1.507040895061879e-02*G0_0_1 + 1.507040895061538e-02*G0_1_0;
    block[260] = block[180];
    block[279] = -block[259] + 2.841848544973513e-01*G0_1_1;
    block[101] = block[370] + 1.343419312169315e+00*G0_0_0 + 1.343419312169312e+00*G0_0_1 + 1.343419312169309e+00*G0_1_0;
    block[125] = block[101] + -4.693355930335081e+00*G0_0_0 + 4.693355930335080e+00*G0_1_1;
    block[356] = block[150] + -4.262772817460327e-01*G0_0_0 + -1.141045249118097e-01*G0_0_1 + -1.141045249118149e-01*G0_1_0 + 1.420924272486770e+00*G0_1_1;
    block[374] = block[150] + 6.721402391975295e+00*G0_0_0 + 3.890318424823624e+00*G0_0_1 + 3.890318424823625e+00*G0_1_0 + 7.922729276895923e+00*G0_1_1;
    block[334] = block[356] + 1.507040895061719e+00*G0_0_0 + 1.507040895061720e+00*G0_0_1 + 1.507040895061707e+00*G0_1_0;
    block[144] = -block[313] + 2.109857253086337e-01*G0_0_0 + 1.356336805555549e+00*G0_1_1;
    block[405] = block[144] + -1.614686673280377e-01*G0_1_1;
    block[395] = block[356] + 1.507040895061732e+00*G0_0_0 + -1.507040895061720e+00*G0_1_1;
    block[239] = block[302] + 3.337019124779527e-01*G0_0_1 + 3.337019124779536e-01*G0_1_0 + -3.595368992504380e-01*G0_1_1;
    block[301] = -block[150] + 3.401606591710730e-01*G0_0_0;
    block[427] = block[301] + 1.733097029320983e+00*G0_0_1 + 1.733097029320975e+00*G0_1_0 + 5.037822420634884e-01*G0_1_1;
    block[80] = -block[427] + -2.820319389329795e+00*G0_0_0 + 5.037822420634873e-01*G0_1_1;
    block[343] = block[301] + 1.442453428130511e-01*G0_0_1 + 1.442453428130525e-01*G0_1_0 + -2.734202766754825e-01*G0_1_1;
    block[140] = -block[301] + 3.401606591710747e-01*G0_1_1;
    block[229] = block[343] + -4.198185350529087e-01*G0_0_0 + -4.198185350529109e-01*G0_0_1 + -4.198185350529071e-01*G0_1_0;
    block[250] = block[229] + 1.463982583774278e-01*G0_0_0 + -1.463982583774233e-01*G0_1_1;
    block[414] = block[334];
    block[360] = block[80];
    block[163] = block[343];
    block[428] = block[370] + -3.349936618165767e+00*G0_0_0 + 3.349936618165784e+00*G0_1_1;
    block[182] = block[302];
    block[204] = block[428] + 4.693355930335072e+00*G0_0_0 + 4.693355930335074e+00*G0_0_1 + 4.693355930335069e+00*G0_1_0;
    block[188] = block[428];
    block[330] = block[374] + -8.611662257495669e-01*G0_0_1 + -8.611662257495678e-01*G0_1_0 + -8.611662257495754e-01*G0_1_1;
    block[120] = block[319] + -1.722332451499187e-01*G0_0_0 + 1.722332451499058e-01*G0_1_1;
    block[272] = block[120] + 5.511463844797175e-01*G0_0_0 + 5.511463844797126e-01*G0_0_1 + 5.511463844797143e-01*G0_1_0;
    block[206] = block[272] + -3.789131393298046e-01*G0_0_0 + 3.789131393298038e-01*G0_1_1;
    block[82] = -block[313] + 1.405853863536148e+00*G0_0_0;
    block[388] = block[82] + 4.951705798059869e-02*G0_0_1 + 4.951705798059391e-02*G0_1_0 + 4.951705798059673e-02*G0_1_1;
    block[347] = block[388] + -1.145351080246909e+00*G0_0_0 + 1.145351080246911e+00*G0_1_1;
    block[138] = -block[259] + 2.432794587742482e-01*G0_1_1;
    block[104] = block[209] + -1.197021053791874e+00*G0_0_1 + -1.197021053791878e+00*G0_1_0 + -1.197021053791873e+00*G0_1_1;
    block[419] = -block[209] + 2.859071869488511e+00*G0_0_1 + 2.859071869488521e+00*G0_1_0 + -1.128127755731928e+00*G0_1_1;
    block[361] = block[101];
    block[381] = -block[343] + -4.198185350529052e-01*G0_0_0 + -2.734202766754800e-01*G0_1_1;
    block[237] = -block[301] + 1.420924272486762e-01*G0_1_1;
    block[367] = -block[237] + -6.674038249559102e-01*G0_0_0 + -3.337019124779542e-01*G0_0_1 + -3.337019124779501e-01*G0_1_0;
    block[311] = -block[80] + -2.316537147266305e+00*G0_0_0;
    block[227] = block[367];
    block[402] = block[82];
    block[424] = block[104];
    block[398] = -block[209] + -1.662050815696638e+00*G0_0_1 + -1.662050815696646e+00*G0_1_0 + -5.649250440917086e+00*G0_1_1;
    block[192] = -block[302] + 2.023740630511467e-01*G0_0_0;
    block[142] = -block[343] + -6.932388117283905e-01*G0_1_1;
    block[365] = block[293] + -5.511463844797225e-01*G0_0_0 + 5.511463844797154e-01*G0_1_1;
    block[177] = block[89] + -2.152915564373882e+00*G0_0_1 + -2.152915564373889e+00*G0_1_0 + -2.152915564373886e+00*G0_1_1;
    block[213] = block[150] + -1.980682319223971e-01*G0_0_0;
    block[434] = -block[213] + 3.337019124779541e-01*G0_0_1 + 3.337019124779513e-01*G0_1_0;
    block[363] = -block[434] + -1.420924272486793e-01*G0_0_0 + -9.903411596119889e-01*G0_1_1;
    block[162] = -block[363] + -1.455370921516746e+00*G0_1_1;
    block[321] = block[363] + 3.229373346560843e-01*G0_1_1;
    block[423] = -block[434] + -1.132433586860668e+00*G0_0_0;
    block[265] = block[177] + -2.152915564373888e+00*G0_0_0 + 2.152915564373885e+00*G0_1_1;
    block[69] = -block[150] + 4.004422949735433e-01*G0_0_1 + -3.401606591710752e-01*G0_1_1;
    block[109] = block[89] + -1.050622795414455e+00*G0_0_1 + 1.050622795414455e+00*G0_1_0;
    block[137] = block[237];
    block[416] = block[419] + 2.152915564373854e-01*G0_0_0 + -2.152915564373934e-01*G0_1_1;
    block[393] = block[416] + -4.305831128747760e+00*G0_0_1 + -4.305831128747774e+00*G0_1_0 + -4.305831128747768e+00*G0_1_1;
    block[165] = -block[144] + 1.405853863536147e+00*G0_1_1;
    block[222] = -block[165] + 2.863377700617358e-01*G0_0_0 + -1.151809826940026e+00*G0_0_1 + -1.151809826940029e+00*G0_1_0;
    block[262] = block[222];
    block[76] = block[222] + 1.444606343694880e+00*G0_0_1 + 1.444606343694883e+00*G0_1_0 + 1.444606343694878e+00*G0_1_1;
    block[67] = -block[76] + -6.200396825396781e-01*G0_0_0 + 1.662050815696642e+00*G0_0_1 + 3.358548280423276e-01*G0_1_0;
    block[111] = block[67] + -4.887118331128717e-01*G0_0_0 + 4.887118331128745e-01*G0_1_1;
    block[98] = -block[67] + -9.558945105820060e-01*G0_0_0 + 1.326195987654316e+00*G0_0_1;
    block[241] = -block[222] + 4.155127039241607e-01*G0_0_1 + 4.155127039241565e-01*G0_1_0 + -3.358548280423261e-01*G0_1_1;
    block[430] = block[423] + -4.650297619047544e-01*G0_0_1 + -4.650297619047530e-01*G0_1_0 + -4.650297619047540e-01*G0_1_1;
    block[384] = block[144];
    block[202] = block[180] + -9.472828483245035e-02*G0_0_0 + 9.472828483245027e-02*G0_1_1;
    block[193] = block[202] + -1.851507385361551e-01*G0_0_0 + -1.937624007936477e-01*G0_0_1 + -1.937624007936487e-01*G0_1_0;
    block[230] = block[430];
    block[324] = block[204];
    block[282] = block[202];
    block[78] = -block[434] + -8.094962522045872e-01*G0_0_0;
    block[92] = block[202] + -1.076457782186980e-01*G0_0_0 + -1.076457782186974e-01*G0_0_1 + -1.076457782186962e-01*G0_1_0;
    block[118] = block[92] + 2.023740630511447e-01*G0_0_0 + -2.023740630511451e-01*G0_1_1;
    block[158] = block[301] + 1.980682319223968e-01*G0_1_1;
    block[353] = block[398] + -4.305831128747799e+00*G0_0_0 + 4.305831128747765e+00*G0_1_1;
    block[131] = block[111] + -1.326195987654314e+00*G0_0_1 + 1.326195987654315e+00*G0_1_0;
    block[426] = -block[427] + -2.316537147266300e+00*G0_1_1;
    block[246] = block[426] + 5.037822420634966e-01*G0_0_0 + 5.037822420634954e-01*G0_0_1 + 5.037822420634881e-01*G0_1_0;
    block[325] = block[246] + -3.324101631393289e+00*G0_0_0 + 3.324101631393282e+00*G0_1_1;
    block[396] = block[150] + 8.314559909611953e+00*G0_0_0 + 4.902188740079334e+00*G0_0_1 + 4.902188740079334e+00*G0_1_0 + 9.946469907407364e+00*G0_1_1;
    block[172] = block[92];
    block[216] = -block[217] + -4.004422949735442e-01*G0_0_1 + -7.406029541446160e-01*G0_1_1;
    block[74] = block[216] + -1.420924272486730e-01*G0_0_0 + 1.420924272486774e-01*G0_1_1;
    block[234] = block[74];
    block[320] = block[120];
    block[88] = block[198] + -7.233796296296238e-01*G0_0_1 + -7.233796296296238e-01*G0_1_0 + -7.233796296296218e-01*G0_1_1;
    block[351] = block[393] + -4.521122685185182e+00*G0_0_0 + 4.521122685185174e+00*G0_1_1;
    block[409] = block[229];
    block[371] = block[311];
    block[433] = block[293];
    block[179] = block[239];
    block[185] = block[365];
    block[305] = block[217] + -5.985105268959435e-01*G0_0_0 + 5.985105268959390e-01*G0_1_1;
    block[267] = block[204] + -1.343419312169307e+00*G0_0_0 + 1.343419312169308e+00*G0_1_1;
    block[287] = -block[76] + -2.282090498236320e+00*G0_0_0 + -1.326195987654314e+00*G0_1_0;
    block[71] = -block[302] + 2.432794587742516e-01*G0_0_0;
    block[87] = block[67] + -1.326195987654316e+00*G0_0_1 + 1.326195987654316e+00*G0_1_0;
    block[342] = block[142];
    block[418] = block[396] + -1.291749338624329e+00*G0_0_1 + -1.291749338624329e+00*G0_1_0 + -1.291749338624332e+00*G0_1_1;
    block[364] = -block[363] + -1.132433586860664e+00*G0_1_1;
    block[159] = block[259];
    block[440] = block[374] + 8.611662257495407e-01*G0_0_0 + -8.611662257495807e-01*G0_1_1;
    block[236] = block[302] + 1.313278494268075e-01*G0_0_1 + 1.313278494268063e-01*G0_1_0 + 1.313278494268076e-01*G0_1_1;
    block[312] = -block[381] + -6.932388117283903e-01*G0_0_0;
    block[258] = block[138];
    block[228] = block[388];
    block[326] = block[246];
    block[280] = block[259] + -4.090539572310323e-02*G0_1_1;
    block[151] = block[280] + -8.956128747795380e-01*G0_0_0 + -2.023740630511442e-01*G0_0_1 + -2.023740630511450e-01*G0_1_0;
    block[195] = block[151] + -4.305831128747781e-01*G0_0_1 + -4.305831128747741e-01*G0_1_0 + -4.305831128747757e-01*G0_1_1;
    block[91] = block[151];
    block[156] = -block[195] + 7.147679673721361e-01*G0_1_0 + 1.603922095458546e+00*G0_1_1;
    block[335] = block[156] + 1.377865961199253e-01*G0_0_0 + 7.147679673721254e-01*G0_0_1 + 7.922729276895915e-01*G0_1_1;
    block[377] = block[335] + -1.722332451499104e+00*G0_0_1 + -1.722332451499115e+00*G0_1_0 + -1.722332451499110e+00*G0_1_1;
    block[208] = block[335] + -7.190737985008721e-01*G0_0_1 + -7.190737985008856e-01*G0_1_0 + -2.428488756613746e+00*G0_1_1;
    block[271] = block[208] + -7.061563051146352e-01*G0_0_0 + 7.061563051146367e-01*G0_1_1;
    block[291] = block[271] + -9.903411596119894e-01*G0_0_1 + -9.903411596119920e-01*G0_1_0 + -9.903411596119889e-01*G0_1_1;
    block[299] = block[151] + 9.666590884038763e-01*G0_0_0 + -9.666590884038757e-01*G0_1_1;
    block[437] = block[377];
    block[255] = block[195] + 5.360759755290957e-01*G0_0_0 + -5.360759755290989e-01*G0_1_1;
    block[306] = -block[255] + 1.603922095458545e+00*G0_0_0 + 7.147679673721268e-01*G0_0_1;
    block[344] = block[291] + -2.841848544973496e-01*G0_0_0 + 2.841848544973518e-01*G0_1_1;
    block[391] = block[291];
    block[135] = block[195];
    block[94] = block[236] + 6.028163580246607e-02*G0_0_0 + -6.028163580246768e-02*G0_1_1;
    block[116] = block[236];
    block[152] = -block[111] + 1.326195987654315e+00*G0_0_1 + -9.558945105820056e-01*G0_1_1;
    block[439] = block[419];
    block[375] = block[395];
    block[331] = block[351];
    block[247] = block[347];
    block[43] = block[301] + 7.104621362433873e-02*G0_0_1 + 1.120446152998238e-01*G0_1_0;
    block[295] = block[43] + -6.480275848765407e-01*G0_0_0 + -8.913139329805948e-01*G0_1_0;
    block[60] = block[43] + -4.099840167548619e-02*G0_1_0 + -5.382288910934869e-02*G0_1_1;
    block[36] = block[43] + 1.076457782186945e-01*G0_0_0 + -4.099840167548478e-02*G0_1_0;
    block[54] = block[60] + 1.584545855379380e-02*G0_1_1;
    block[106] = block[43] + -6.966834766313908e-02*G0_0_0 + 3.392926036155191e-01*G0_1_0;
    block[49] = block[43] + -8.913139329805965e-01*G0_1_0 + -6.480275848765413e-01*G0_1_1;
    block[400] = block[36] + -1.614686673280414e-01*G0_0_0;
    block[168] = block[106] + -6.966834766313797e-02*G0_0_1 + -8.302503582451461e-01*G0_1_0 + -4.499593529541426e-01*G0_1_1;
    block[421] = block[36];
    block[39] = block[36];
    block[338] = block[60] + 1.614686673280430e-01*G0_1_1;
    block[17] = block[338] + 1.076457782186947e-01*G0_0_0 + 1.076457782186945e-01*G0_0_1 + 1.076457782186945e-01*G0_1_0;
    block[336] = -4.999999999999893e-01*block[17];
    block[5] = -3.528000000000057e-01*block[17];
    block[19] = block[17];
    block[58] = block[338];
    block[0] = 3.180863999999999e+00*block[17];
    block[34] = block[36] + 4.865589175484997e-01*G0_0_0 + 6.100501543209855e-01*G0_0_1;
    block[253] = -block[106] + -5.196277006172829e-01*G0_0_0;
    block[47] = block[43] + -6.510485559964699e-01*G0_1_0 + -1.584545855379104e-02*G0_1_1;
    block[170] = block[60] + 6.100501543209859e-01*G0_0_1 + 6.480275848765421e-01*G0_1_1;
    block[296] = block[60] + 1.300361000882012e-02*G0_1_1;
    block[65] = -block[296] + -1.615547839506162e-01*G0_0_1;
    block[64] = -block[295] + -4.457396384479706e-01*G0_0_0;
    block[37] = block[400];
    block[315] = -2.000000000000008e+00*block[17];
    block[11] = block[295] + 2.022879464285706e-01*G0_0_1 + 2.022879464285692e-01*G0_1_0 + 2.022879464285707e-01*G0_1_1;
    block[31] = block[36] + -1.484650573192234e-01*G0_0_0;
    block[127] = -block[31] + -1.615547839506170e-01*G0_1_0;
    block[232] = -block[127] + 2.431933421516749e-01*G0_0_0;
    block[27] = -block[31] + -1.615547839506167e-01*G0_0_1;
    block[85] = block[43] + -1.584545855379219e-02*G0_0_0 + -6.510485559964704e-01*G0_1_0;
    block[358] = block[36] + -3.229373346560830e-01*G0_0_0;
    block[24] = block[64] + 8.503155313051101e-01*G0_0_1 + -8.503155313051100e-01*G0_1_0;
    block[50] = -block[47] + 5.783592372134022e-01*G0_1_1;
    block[128] = block[60] + 8.503155313051114e-01*G0_0_1 + 2.561108355379191e-01*G0_1_1;
    block[379] = block[36];
    block[275] = block[54];
    block[25] = -block[34] + 5.783592372134020e-01*G0_0_0;
    block[189] = block[25] + 5.942046957671934e-01*G0_0_1 + 5.942046957671929e-01*G0_1_0 + 5.942046957671931e-01*G0_1_1;
    block[9] = block[189] + 6.100501543209851e-01*G0_0_1 + -6.100501543209851e-01*G0_1_0;
    block[45] = -block[296] + -1.615547839506164e-01*G0_1_0;
    block[52] = -block[45] + 2.431933421516735e-01*G0_1_1;
    block[190] = block[36] + -1.456232087742504e-01*G0_0_0;
    block[16] = block[336];
    block[211] = block[31];
    block[317] = block[338];
    block[13] = block[168] + -3.802910052910062e-01*G0_0_0 + 3.802910052910033e-01*G0_1_1;
    block[29] = block[190];
    block[57] = block[338];
    block[107] = -block[170] + 5.783592372134022e-01*G0_1_1;
    block[4] = block[5];
    block[22] = block[36] + 2.347608024691346e-01*G0_0_0;
    block[48] = -block[49] + -4.457396384479712e-01*G0_1_1;
    block[126] = -3.791999999999874e-01*block[17];
    block[14] = -block[126] + 1.615547839506185e-01*G0_0_0 + 1.615547839506178e-01*G0_1_0;
    block[7] = -block[126] + 1.615547839506167e-01*G0_0_1 + 1.615547839506165e-01*G0_1_1;
    block[147] = -block[126] + 1.615547839506162e-01*G0_1_0 + 1.615547839506165e-01*G0_1_1;
    block[294] = -block[126] + 1.615547839506185e-01*G0_0_0 + 1.615547839506183e-01*G0_0_1;
    block[273] = block[13] + -3.802910052910044e-01*G0_0_1 + 3.802910052910044e-01*G0_1_0;
    block[149] = -block[128] + -4.457396384479712e-01*G0_1_1;
    block[406] = -block[144] + 1.567322530864186e+00*G0_1_1;
    block[368] = block[430] + 5.253113977072257e-01*G0_0_0 + -5.253113977072332e-01*G0_1_1;
    block[420] = block[17];
    block[394] = -block[345] + 2.079716435185172e+00*G0_0_1 + 2.079716435185174e+00*G0_1_0 + -7.061563051146450e-01*G0_1_1;
    block[174] = block[76] + 1.108751515652552e+00*G0_0_0 + -1.108751515652553e+00*G0_1_1;
    block[175] = -block[174] + -1.326195987654318e+00*G0_0_1 + -2.282090498236322e+00*G0_1_1;
    block[219] = block[175] + 4.887118331128782e-01*G0_0_0 + 4.887118331128775e-01*G0_0_1 + 4.887118331128747e-01*G0_1_0;
    block[199] = block[219] + 1.326195987654316e+00*G0_0_1 + -1.326195987654315e+00*G0_1_0;
    block[243] = block[199] + -1.662050815696646e+00*G0_0_0 + 1.662050815696640e+00*G0_1_1;
    block[196] = -block[195] + 7.147679673721337e-01*G0_0_1 + 1.603922095458546e+00*G0_1_1;
    block[214] = block[94];
    block[240] = block[222] + -3.358548280423270e-01*G0_0_0 + 3.358548280423268e-01*G0_1_1;
    block[133] = -block[240] + -2.611486579585526e+00*G0_0_0 + -1.860119047619042e+00*G0_0_1 + -1.860119047619037e+00*G0_1_0;
    block[308] = -block[133] + -5.726755401234556e-01*G0_0_0 + 2.275631751543196e+00*G0_1_1;
    block[153] = block[133];
    block[66] = block[308];
    block[18] = block[336];
    block[300] = block[140];
    block[270] = block[345] + -7.061563051146330e-01*G0_0_0 + 7.061563051146348e-01*G0_1_1;
    block[397] = -block[270] + -6.196090994268038e+00*G0_0_0 + -3.410218253968229e+00*G0_0_1 + -3.410218253968226e+00*G0_1_0;
    block[412] = block[270] + 6.243455136684251e-01*G0_0_1 + 6.243455136684289e-01*G0_1_0 + 6.243455136684271e-01*G0_1_1;
    block[403] = block[412] + -3.492029045414449e+00*G0_0_0 + -1.554405037477950e+00*G0_0_1 + -1.554405037477947e+00*G0_1_0;
    block[417] = block[397];
    block[383] = block[270] + 1.330501818783058e+00*G0_0_0 + 1.330501818783056e+00*G0_0_1 + 1.330501818783062e+00*G0_1_0;
    block[103] = block[403];
    block[123] = block[383];
    block[407] = block[412] + 1.330501818783068e+00*G0_0_0 + -1.330501818783062e+00*G0_1_1;
    block[186] = block[407] + 2.260561342592575e+00*G0_0_1 + 2.260561342592580e+00*G0_1_0 + 3.229373346560766e-01*G0_1_1;
    block[386] = block[186];
    block[349] = block[186] + -1.007564484126973e+00*G0_0_0 + 1.007564484126991e+00*G0_1_1;
    block[289] = block[349];
    block[340] = block[383] + -6.243455136684354e-01*G0_0_0 + 6.243455136684289e-01*G0_1_1;
    block[404] = block[403] + 4.822530864197509e+00*G0_0_0 + -4.822530864197512e+00*G0_1_1;
    block[268] = block[404] + -1.007564484126979e+00*G0_0_0 + -1.007564484126979e+00*G0_0_1 + -1.007564484126984e+00*G0_1_0;
    block[100] = block[340];
    block[355] = block[397] + 5.489934689153421e+00*G0_0_0 + -5.489934689153420e+00*G0_1_1;
    block[40] = block[400];
    block[322] = block[162];
    block[292] = block[412];
    block[8] = block[168] + -3.802910052910045e-01*G0_0_1 + 3.802910052910045e-01*G0_1_0;
    block[68] = -block[299] + 8.891541280864169e-01*G0_0_0 + -7.147679673721303e-01*G0_0_1;
    block[90] = -block[151] + -7.147679673721302e-01*G0_0_1 + 8.891541280864160e-01*G0_1_1;
    block[284] = block[90] + 1.067846119929451e+00*G0_0_0 + 1.782614087301578e+00*G0_0_1 + 3.530781525573192e-01*G0_1_0;
    block[218] = block[284] + -1.145351080246913e+00*G0_0_0 + 1.145351080246907e+00*G0_1_1;
    block[112] = block[152];
    block[337] = block[400];
    block[146] = block[426];
    block[411] = block[271];
    block[369] = block[269];
    block[164] = block[364];
    block[435] = block[335];
    block[181] = block[180] + 8.611662257495399e-02*G0_0_1 + 8.611662257495659e-02*G0_1_0 + 9.472828483244949e-02*G0_1_1;
    block[197] = block[177] + -1.050622795414462e+00*G0_0_1 + 1.050622795414462e+00*G0_1_0;
    block[225] = block[325];
    block[187] = block[407];
    block[245] = -block[74] + -7.406029541446165e-01*G0_0_0 + -4.004422949735401e-01*G0_1_0;
    block[207] = block[268] + -3.814966380070526e+00*G0_0_0 + 3.814966380070541e+00*G0_1_1;
    block[303] = block[302] + 4.090539572310188e-02*G0_0_0;
    block[96] = -block[303] + -1.873036541005278e-01*G0_0_1 + -1.873036541005239e-01*G0_1_0 + -2.195973875661374e-01*G0_1_1;
    block[235] = block[303] + 1.722332451499093e-01*G0_0_1 + 1.722332451499080e-01*G0_1_0 + 1.722332451499087e-01*G0_1_1;
    block[95] = block[235];
    block[115] = block[235] + 6.028163580247312e-02*G0_0_0 + -6.028163580246793e-02*G0_1_1;
    block[215] = block[115];
    block[256] = block[96];
    block[261] = block[302] + 3.229373346560452e-02*G0_0_0 + 1.033399470899462e-01*G0_1_1;
    block[173] = block[261] + 1.636215828924164e-01*G0_0_0 + 1.636215828924152e-01*G0_0_1 + 1.636215828924173e-01*G0_1_0;
    block[277] = block[173] + -1.636215828924155e-01*G0_0_0 + 1.636215828924156e-01*G0_1_1;
    block[113] = block[173];
    block[41] = block[36];
    block[327] = block[267];
    block[285] = block[265] + -1.050622795414454e+00*G0_0_1 + 1.050622795414454e+00*G0_1_0;
    block[61] = block[60];
    block[15] = block[315];
    block[73] = block[213];
    block[35] = -block[24] + -4.457396384479706e-01*G0_0_0;
    block[97] = block[277];
    block[55] = block[54];
    block[105] = block[5];
    block[79] = -block[313] + 1.567322530864195e+00*G0_0_0;
    block[346] = block[79] + 2.109857253086348e-01*G0_0_1 + 2.109857253086369e-01*G0_1_0 + 2.109857253086346e-01*G0_1_1;
    block[389] = block[346] + -1.145351080246916e+00*G0_0_0 + 1.145351080246910e+00*G0_1_1;
    block[141] = block[321];
    block[362] = block[104] + -2.540440365961192e+00*G0_0_0 + 2.540440365961190e+00*G0_1_1;
    block[161] = block[301];
    block[380] = block[60];
    block[238] = block[158];
    block[310] = block[313] + -1.614686673280407e-01*G0_0_0;
    block[252] = block[9] + 6.100501543209867e-01*G0_0_0 + -6.100501543209851e-01*G0_1_1;
    block[226] = block[346];
    block[278] = block[118];
    block[6] = block[126];
    block[28] = block[31];
    block[46] = block[43] + 3.392926036155188e-01*G0_1_0 + -6.966834766313952e-02*G0_1_1;
    block[114] = block[96] + -1.076457782186987e-01*G0_0_0 + 1.076457782186959e-01*G0_1_1;
    block[132] = -block[133] + 1.702956211419743e+00*G0_1_1;
    block[220] = block[132] + -5.726755401234565e-01*G0_0_0 + -5.726755401234547e-01*G0_0_1 + -5.726755401234547e-01*G0_1_0;
    block[154] = block[132];
    block[124] = block[404];
    block[399] = block[17];
    block[373] = block[353];
    block[169] = block[190];
    block[333] = block[393];
    block[249] = block[389];
    block[348] = block[268];
    block[145] = block[405];
    block[408] = block[208];
    block[366] = block[206];
    block[422] = block[60] + -1.614686673280379e-01*G0_1_1;
    block[392] = block[312];
    block[194] = block[114];
    block[212] = -block[65] + 2.431933421516735e-01*G0_1_1;
    block[242] = block[220];
    block[20] = block[17];
    block[298] = block[98];
    block[264] = block[198] + 1.343419312169308e+00*G0_0_0 + -1.343419312169304e+00*G0_1_1;
    block[286] = block[264] + 6.200396825396841e-01*G0_0_1 + 6.200396825396843e-01*G0_1_0 + 6.200396825396859e-01*G0_1_1;
    block[176] = block[286] + -7.233796296296240e-01*G0_0_0 + 7.233796296296235e-01*G0_1_1;
    block[38] = block[358];
    block[316] = block[36];
    block[290] = block[370];
    block[70] = block[150];
    block[32] = -block[27] + 2.431933421516749e-01*G0_0_0;
    block[84] = block[5];
    block[110] = block[88] + 6.200396825396814e-01*G0_0_0 + -6.200396825396828e-01*G0_1_1;
    block[339] = block[79];
    block[136] = block[216];
    block[413] = block[313];
    block[359] = block[338];
    block[166] = block[406];
    block[429] = block[209];
    block[387] = block[207];
    block[183] = block[328] + -1.197021053791878e+00*G0_0_0 + 1.197021053791883e+00*G0_1_1;
    block[203] = block[303];
    block[223] = block[239] + -4.305831128747771e-01*G0_0_0 + 4.305831128747779e-01*G0_1_1;
    block[231] = block[11] + -8.503155313051114e-01*G0_0_1 + 8.503155313051113e-01*G0_1_0;
    block[10] = block[231] + 8.503155313051116e-01*G0_0_0 + -8.503155313051107e-01*G0_1_1;
    block[205] = block[345];
    block[309] = block[434] + -3.229373346560818e-01*G0_0_0;
    block[263] = block[219] + -1.662050815696646e+00*G0_0_0 + 1.662050815696641e+00*G0_1_1;
    block[329] = block[309];
    block[283] = block[223];
    block[59] = block[338];
    block[1] = -block[43] + -4.099840167548514e-02*G0_0_0;
    block[21] = block[1] + -4.099840167548514e-02*G0_0_1 + 4.099840167548514e-02*G0_1_0;
    block[75] = block[255];
    block[33] = block[36] + -5.576051311728383e-01*G0_0_0 + -3.802910052910027e-01*G0_0_1;
    block[99] = block[319];
    block[53] = block[296];
    block[119] = block[299];
    block[81] = block[381];
    block[139] = block[279];
    block[155] = block[287] + 1.173338982583767e+00*G0_0_0 + -1.173338982583769e+00*G0_1_1;
    block[436] = block[356];
    block[378] = block[336];
    block[352] = block[396] + 1.291749338624355e+00*G0_0_0 + -1.291749338624330e+00*G0_1_1;
    block[254] = block[54];
    block[276] = block[76];
    block[26] = -block[33] + -5.196277006172829e-01*G0_0_0;
    block[44] = block[60] + 3.962294697971783e-01*G0_1_1;
    block[130] = -block[151] + -7.147679673721321e-01*G0_1_0 + 8.891541280864160e-01*G0_1_1;
    block[148] = block[31];
    block[122] = block[362];
    block[401] = block[60];
    block[425] = block[125];
    block[171] = block[71];
    block[191] = block[60] + -3.802910052910043e-01*G0_0_1 + -3.961364638447931e-01*G0_1_1;
    block[251] = block[367] + 5.253113977072315e-01*G0_0_0 + -5.253113977072281e-01*G0_1_1;
    block[297] = -block[308] + 1.702956211419745e+00*G0_0_0;
    block[63] = block[126];
    block[350] = block[310];
    block[143] = block[363];
    block[410] = block[250];
    block[372] = block[335] + 1.722332451499123e+00*G0_0_0 + -1.722332451499112e+00*G0_1_1;
    block[121] = block[372] + -2.712673611111104e+00*G0_0_0 + -1.003258652998232e+00*G0_0_1 + -1.003258652998232e+00*G0_1_0;
    block[382] = block[121] + 9.903411596119800e-01*G0_0_0 + -9.903411596119887e-01*G0_1_1;
    block[102] = block[382];
    block[167] = block[427];
    block[432] = block[272];
    block[390] = block[270];
    block[178] = block[218] + -7.147679673721344e-01*G0_0_1 + 7.147679673721342e-01*G0_1_0;
    block[200] = block[240];
    block[210] = block[11] + 8.503155313051117e-01*G0_0_0 + -8.503155313051107e-01*G0_1_1;
    block[184] = block[344];
    block[244] = block[284] + -7.147679673721287e-01*G0_0_1 + 7.147679673721288e-01*G0_1_0;
    block[304] = block[224];
    block[266] = block[156] + 1.067846119929449e+00*G0_0_0 + -1.067846119929447e+00*G0_1_1;
    block[318] = block[78];
    block[288] = block[328];
    block[62] = block[422];
    block[12] = block[189] + 6.100501543209867e-01*G0_0_0 + -6.100501543209852e-01*G0_1_1;
    block[72] = block[192];
    block[30] = block[190];
    block[86] = -block[191] + -5.196277006172815e-01*G0_1_1;
    block[56] = block[296];
    block[108] = -block[299] + 8.891541280864171e-01*G0_0_0 + -7.147679673721308e-01*G0_1_0;
    block[341] = block[121];
    block[134] = block[174];
    block[415] = block[355];
    block[357] = block[17];
    block[160] = block[280];
    block[431] = block[251];
    block[385] = block[165];
    block[201] = block[261];
    block[221] = block[241];
    block[233] = block[296];
    block[307] = -block[76] + -2.282090498236320e+00*G0_0_0 + -1.326195987654315e+00*G0_0_1;
    block[257] = block[193] + 2.798790233686038e-01*G0_0_0 + -2.798790233686039e-01*G0_1_1;
    block[323] = block[183];
    block[281] = block[181];
    block[3] = block[126];
    block[77] = block[297];
    block[23] = -block[21] + -4.099840167548514e-02*G0_0_0;
    block[2] = -block[23] + -4.099840167548462e-02*G0_1_1;
    block[93] = block[193];
    block[51] = -block[46] + -5.196277006172815e-01*G0_1_1;
    block[117] = block[257];
    block[83] = block[423];
    block[129] = -block[150] + 4.004422949735431e-01*G0_1_0 + -3.401606591710752e-01*G0_1_1;
    block[157] = block[217] + 4.004422949735454e-01*G0_0_1 + -4.004422949735453e-01*G0_1_0;
    block[438] = block[398];
    block[354] = block[394];
    block[376] = block[416];
    block[314] = block[434];
    block[332] = block[372];
    block[274] = -block[85] + 5.783592372134021e-01*G0_0_0;
    block[248] = block[368];
    block[42] = -block[43] + -4.099840167548462e-02*G0_1_1;
  }

  // No contribution from the boundary
  void eval(real block[], const AffineMap& map, unsigned int boundary) const {}   

};

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class LinearForm : public dolfin::LinearForm
{
public:
  
  class TestElement : public dolfin::FiniteElement
  {
  public:
  
    TestElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
    {
      // Element is scalar, don't need to initialize tensordims
  
      // Element is simple, don't need to initialize subelements
    }
  
    ~TestElement()
    {
      if ( tensordims ) delete [] tensordims;
      if ( subelements )
      {
        for (unsigned int i = 0; i < elementdim(); i++)
          delete subelements[i];
        delete [] subelements;
      }
    }
  
    inline unsigned int spacedim() const
    {
      return 21;
    }
  
    inline unsigned int shapedim() const
    {
      return 2;
    }
  
    inline unsigned int tensordim(unsigned int i) const
    {
      dolfin_error("Element is scalar.");
      return 0;
    }
  
    inline unsigned int elementdim() const
    {
      return 1;
    }
  
    inline unsigned int rank() const
    {
      return 0;
    }
  
    void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
    {
      static unsigned int edge_reordering_0[2][4] = {{0, 1, 2, 3}, {3, 2, 1, 0}};
      nodes[0] = cell.vertexID(0);
      nodes[1] = cell.vertexID(1);
      nodes[2] = cell.vertexID(2);
      int alignment = cell.edgeAlignment(0);
      int offset = mesh.numVertices();
      nodes[3] = offset + 4*cell.edgeID(0) + edge_reordering_0[alignment][0];
      nodes[4] = offset + 4*cell.edgeID(0) + edge_reordering_0[alignment][1];
      nodes[5] = offset + 4*cell.edgeID(0) + edge_reordering_0[alignment][2];
      nodes[6] = offset + 4*cell.edgeID(0) + edge_reordering_0[alignment][3];
      alignment = cell.edgeAlignment(1);
      nodes[7] = offset + 4*cell.edgeID(1) + edge_reordering_0[alignment][0];
      nodes[8] = offset + 4*cell.edgeID(1) + edge_reordering_0[alignment][1];
      nodes[9] = offset + 4*cell.edgeID(1) + edge_reordering_0[alignment][2];
      nodes[10] = offset + 4*cell.edgeID(1) + edge_reordering_0[alignment][3];
      alignment = cell.edgeAlignment(2);
      nodes[11] = offset + 4*cell.edgeID(2) + edge_reordering_0[alignment][0];
      nodes[12] = offset + 4*cell.edgeID(2) + edge_reordering_0[alignment][1];
      nodes[13] = offset + 4*cell.edgeID(2) + edge_reordering_0[alignment][2];
      nodes[14] = offset + 4*cell.edgeID(2) + edge_reordering_0[alignment][3];
      offset = offset + 4*mesh.numEdges();
      nodes[15] = offset + 6*cell.id() + 0;
      nodes[16] = offset + 6*cell.id() + 1;
      nodes[17] = offset + 6*cell.id() + 2;
      nodes[18] = offset + 6*cell.id() + 3;
      nodes[19] = offset + 6*cell.id() + 4;
      nodes[20] = offset + 6*cell.id() + 5;
    }
  
    void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
    {
      points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
      points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
      points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
      points[3] = map(8.000000000000000e-01, 2.000000000000000e-01);
      points[4] = map(6.000000000000000e-01, 4.000000000000000e-01);
      points[5] = map(4.000000000000000e-01, 6.000000000000000e-01);
      points[6] = map(2.000000000000000e-01, 8.000000000000000e-01);
      points[7] = map(0.000000000000000e+00, 8.000000000000000e-01);
      points[8] = map(0.000000000000000e+00, 6.000000000000000e-01);
      points[9] = map(0.000000000000000e+00, 4.000000000000000e-01);
      points[10] = map(0.000000000000000e+00, 2.000000000000000e-01);
      points[11] = map(2.000000000000000e-01, 0.000000000000000e+00);
      points[12] = map(4.000000000000000e-01, 0.000000000000000e+00);
      points[13] = map(6.000000000000000e-01, 0.000000000000000e+00);
      points[14] = map(8.000000000000000e-01, 0.000000000000000e+00);
      points[15] = map(2.000000000000000e-01, 2.000000000000000e-01);
      points[16] = map(4.000000000000000e-01, 2.000000000000000e-01);
      points[17] = map(6.000000000000000e-01, 2.000000000000000e-01);
      points[18] = map(2.000000000000000e-01, 4.000000000000000e-01);
      points[19] = map(4.000000000000000e-01, 4.000000000000000e-01);
      points[20] = map(2.000000000000000e-01, 6.000000000000000e-01);
      components[0] = 0;
      components[1] = 0;
      components[2] = 0;
      components[3] = 0;
      components[4] = 0;
      components[5] = 0;
      components[6] = 0;
      components[7] = 0;
      components[8] = 0;
      components[9] = 0;
      components[10] = 0;
      components[11] = 0;
      components[12] = 0;
      components[13] = 0;
      components[14] = 0;
      components[15] = 0;
      components[16] = 0;
      components[17] = 0;
      components[18] = 0;
      components[19] = 0;
      components[20] = 0;
    }
  
    void vertexeval(real values[], unsigned int vertex, const real x[], const Mesh& mesh) const
    {
      // FIXME: Temporary fix for Lagrange elements
      values[0] = x[vertex];
    }
  
    const FiniteElement& operator[] (unsigned int i) const
    {
      return *this;
    }
  
    FiniteElement& operator[] (unsigned int i)
    {
      return *this;
    }
  
    FiniteElementSpec spec() const
    {
      FiniteElementSpec s("Lagrange", "triangle", 5);
      return s;
    }
    
  private:
  
    unsigned int* tensordims;
    FiniteElement** subelements;
  
  };
    
  class FunctionElement_0 : public dolfin::FiniteElement
  {
  public:
  
    FunctionElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
    {
      // Element is scalar, don't need to initialize tensordims
  
      // Element is simple, don't need to initialize subelements
    }
  
    ~FunctionElement_0()
    {
      if ( tensordims ) delete [] tensordims;
      if ( subelements )
      {
        for (unsigned int i = 0; i < elementdim(); i++)
          delete subelements[i];
        delete [] subelements;
      }
    }
  
    inline unsigned int spacedim() const
    {
      return 21;
    }
  
    inline unsigned int shapedim() const
    {
      return 2;
    }
  
    inline unsigned int tensordim(unsigned int i) const
    {
      dolfin_error("Element is scalar.");
      return 0;
    }
  
    inline unsigned int elementdim() const
    {
      return 1;
    }
  
    inline unsigned int rank() const
    {
      return 0;
    }
  
    void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
    {
      static unsigned int edge_reordering_0[2][4] = {{0, 1, 2, 3}, {3, 2, 1, 0}};
      nodes[0] = cell.vertexID(0);
      nodes[1] = cell.vertexID(1);
      nodes[2] = cell.vertexID(2);
      int alignment = cell.edgeAlignment(0);
      int offset = mesh.numVertices();
      nodes[3] = offset + 4*cell.edgeID(0) + edge_reordering_0[alignment][0];
      nodes[4] = offset + 4*cell.edgeID(0) + edge_reordering_0[alignment][1];
      nodes[5] = offset + 4*cell.edgeID(0) + edge_reordering_0[alignment][2];
      nodes[6] = offset + 4*cell.edgeID(0) + edge_reordering_0[alignment][3];
      alignment = cell.edgeAlignment(1);
      nodes[7] = offset + 4*cell.edgeID(1) + edge_reordering_0[alignment][0];
      nodes[8] = offset + 4*cell.edgeID(1) + edge_reordering_0[alignment][1];
      nodes[9] = offset + 4*cell.edgeID(1) + edge_reordering_0[alignment][2];
      nodes[10] = offset + 4*cell.edgeID(1) + edge_reordering_0[alignment][3];
      alignment = cell.edgeAlignment(2);
      nodes[11] = offset + 4*cell.edgeID(2) + edge_reordering_0[alignment][0];
      nodes[12] = offset + 4*cell.edgeID(2) + edge_reordering_0[alignment][1];
      nodes[13] = offset + 4*cell.edgeID(2) + edge_reordering_0[alignment][2];
      nodes[14] = offset + 4*cell.edgeID(2) + edge_reordering_0[alignment][3];
      offset = offset + 4*mesh.numEdges();
      nodes[15] = offset + 6*cell.id() + 0;
      nodes[16] = offset + 6*cell.id() + 1;
      nodes[17] = offset + 6*cell.id() + 2;
      nodes[18] = offset + 6*cell.id() + 3;
      nodes[19] = offset + 6*cell.id() + 4;
      nodes[20] = offset + 6*cell.id() + 5;
    }
  
    void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
    {
      points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
      points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
      points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
      points[3] = map(8.000000000000000e-01, 2.000000000000000e-01);
      points[4] = map(6.000000000000000e-01, 4.000000000000000e-01);
      points[5] = map(4.000000000000000e-01, 6.000000000000000e-01);
      points[6] = map(2.000000000000000e-01, 8.000000000000000e-01);
      points[7] = map(0.000000000000000e+00, 8.000000000000000e-01);
      points[8] = map(0.000000000000000e+00, 6.000000000000000e-01);
      points[9] = map(0.000000000000000e+00, 4.000000000000000e-01);
      points[10] = map(0.000000000000000e+00, 2.000000000000000e-01);
      points[11] = map(2.000000000000000e-01, 0.000000000000000e+00);
      points[12] = map(4.000000000000000e-01, 0.000000000000000e+00);
      points[13] = map(6.000000000000000e-01, 0.000000000000000e+00);
      points[14] = map(8.000000000000000e-01, 0.000000000000000e+00);
      points[15] = map(2.000000000000000e-01, 2.000000000000000e-01);
      points[16] = map(4.000000000000000e-01, 2.000000000000000e-01);
      points[17] = map(6.000000000000000e-01, 2.000000000000000e-01);
      points[18] = map(2.000000000000000e-01, 4.000000000000000e-01);
      points[19] = map(4.000000000000000e-01, 4.000000000000000e-01);
      points[20] = map(2.000000000000000e-01, 6.000000000000000e-01);
      components[0] = 0;
      components[1] = 0;
      components[2] = 0;
      components[3] = 0;
      components[4] = 0;
      components[5] = 0;
      components[6] = 0;
      components[7] = 0;
      components[8] = 0;
      components[9] = 0;
      components[10] = 0;
      components[11] = 0;
      components[12] = 0;
      components[13] = 0;
      components[14] = 0;
      components[15] = 0;
      components[16] = 0;
      components[17] = 0;
      components[18] = 0;
      components[19] = 0;
      components[20] = 0;
    }
  
    void vertexeval(real values[], unsigned int vertex, const real x[], const Mesh& mesh) const
    {
      // FIXME: Temporary fix for Lagrange elements
      values[0] = x[vertex];
    }
  
    const FiniteElement& operator[] (unsigned int i) const
    {
      return *this;
    }
  
    FiniteElement& operator[] (unsigned int i)
    {
      return *this;
    }
  
    FiniteElementSpec spec() const
    {
      FiniteElementSpec s("Lagrange", "triangle", 5);
      return s;
    }
    
  private:
  
    unsigned int* tensordims;
    FiniteElement** subelements;
  
  };
  
  LinearForm(Function& w0) : dolfin::LinearForm(1)
  {
    // Create finite element for test space
    _test = new TestElement();

    // Add functions
    add(w0, new FunctionElement_0());
  }

  void eval(real block[], const AffineMap& map) const
  {
    // Compute coefficients
    const real c0_0 = c[0][0];
    const real c0_1 = c[0][1];
    const real c0_2 = c[0][2];
    const real c0_3 = c[0][3];
    const real c0_4 = c[0][4];
    const real c0_5 = c[0][5];
    const real c0_6 = c[0][6];
    const real c0_7 = c[0][7];
    const real c0_8 = c[0][8];
    const real c0_9 = c[0][9];
    const real c0_10 = c[0][10];
    const real c0_11 = c[0][11];
    const real c0_12 = c[0][12];
    const real c0_13 = c[0][13];
    const real c0_14 = c[0][14];
    const real c0_15 = c[0][15];
    const real c0_16 = c[0][16];
    const real c0_17 = c[0][17];
    const real c0_18 = c[0][18];
    const real c0_19 = c[0][19];
    const real c0_20 = c[0][20];

    // Compute geometry tensors
    const real G0_0 = map.det*c0_0;
    const real G0_1 = map.det*c0_1;
    const real G0_2 = map.det*c0_2;
    const real G0_3 = map.det*c0_3;
    const real G0_4 = map.det*c0_4;
    const real G0_5 = map.det*c0_5;
    const real G0_6 = map.det*c0_6;
    const real G0_7 = map.det*c0_7;
    const real G0_8 = map.det*c0_8;
    const real G0_9 = map.det*c0_9;
    const real G0_10 = map.det*c0_10;
    const real G0_11 = map.det*c0_11;
    const real G0_12 = map.det*c0_12;
    const real G0_13 = map.det*c0_13;
    const real G0_14 = map.det*c0_14;
    const real G0_15 = map.det*c0_15;
    const real G0_16 = map.det*c0_16;
    const real G0_17 = map.det*c0_17;
    const real G0_18 = map.det*c0_18;
    const real G0_19 = map.det*c0_19;
    const real G0_20 = map.det*c0_20;

    // Compute element tensor
    block[0] = 1.389452561327610e-03*G0_0 + 1.238774567767668e-04*G0_1 + 1.238774567767667e-04*G0_2 + 3.636470107824408e-04*G0_3 + 2.072018131045980e-04*G0_4 + 2.072018131045981e-04*G0_5 + 3.636470107824402e-04*G0_6 - 2.296443268665418e-05*G0_7 + 4.626811267436419e-04*G0_8 - 9.582431457431764e-04*G0_9 + 1.181363486051025e-03*G0_10 + 1.181363486051026e-03*G0_11 - 9.582431457431753e-04*G0_12 + 4.626811267436403e-04*G0_13 - 2.296443268665393e-05*G0_14 + 8.924813612313928e-04*G0_15 - 9.746835918711270e-04*G0_16 + 8.794333881139756e-04*G0_17 - 9.746835918711216e-04*G0_18 + 6.497890612474146e-04*G0_19 + 8.794333881139750e-04*G0_20;
    block[1] = 1.238774567767668e-04*G0_0 + 1.389452561327609e-03*G0_1 + 1.238774567767667e-04*G0_2 + 1.181363486051024e-03*G0_3 - 9.582431457431776e-04*G0_4 + 4.626811267436429e-04*G0_5 - 2.296443268665459e-05*G0_6 + 3.636470107824402e-04*G0_7 + 2.072018131045978e-04*G0_8 + 2.072018131045983e-04*G0_9 + 3.636470107824393e-04*G0_10 - 2.296443268665607e-05*G0_11 + 4.626811267436455e-04*G0_12 - 9.582431457431830e-04*G0_13 + 1.181363486051031e-03*G0_14 + 8.794333881139741e-04*G0_15 - 9.746835918711273e-04*G0_16 + 8.924813612313914e-04*G0_17 + 6.497890612474154e-04*G0_18 - 9.746835918711247e-04*G0_19 + 8.794333881139761e-04*G0_20;
    block[2] = 1.238774567767667e-04*G0_0 + 1.238774567767667e-04*G0_1 + 1.389452561327609e-03*G0_2 - 2.296443268665584e-05*G0_3 + 4.626811267436431e-04*G0_4 - 9.582431457431791e-04*G0_5 + 1.181363486051026e-03*G0_6 + 1.181363486051027e-03*G0_7 - 9.582431457431778e-04*G0_8 + 4.626811267436423e-04*G0_9 - 2.296443268665586e-05*G0_10 + 3.636470107824400e-04*G0_11 + 2.072018131045993e-04*G0_12 + 2.072018131045973e-04*G0_13 + 3.636470107824403e-04*G0_14 + 8.794333881139750e-04*G0_15 + 6.497890612474159e-04*G0_16 + 8.794333881139755e-04*G0_17 - 9.746835918711258e-04*G0_18 - 9.746835918711271e-04*G0_19 + 8.924813612313933e-04*G0_20;
    block[3] = 3.636470107824409e-04*G0_0 + 1.181363486051024e-03*G0_1 - 2.296443268665585e-05*G0_2 + 1.470506570333010e-02*G0_3 - 9.583736254743534e-03*G0_4 + 7.704828125835339e-03*G0_5 - 3.969845820974430e-03*G0_6 - 2.482376885588774e-03*G0_7 - 4.566790591096299e-05*G0_8 - 1.448325016033395e-03*G0_9 - 4.110111531986683e-04*G0_10 - 2.482376885588783e-03*G0_11 + 5.760680131340071e-03*G0_12 - 7.352532851665070e-03*G0_13 + 7.352532851665064e-03*G0_14 + 7.828783870450836e-04*G0_15 - 3.816532136844788e-03*G0_16 + 1.024265889717318e-02*G0_17 - 1.370037177328892e-03*G0_18 + 9.785979838062482e-05*G0_19 - 2.805314220244869e-03*G0_20;
    block[4] = 2.072018131045980e-04*G0_0 - 9.582431457431776e-04*G0_1 + 4.626811267436430e-04*G0_2 - 9.583736254743534e-03*G0_3 + 2.207717051467131e-02*G0_4 - 1.347855623029282e-02*G0_5 + 7.704828125835337e-03*G0_6 + 5.760680131340046e-03*G0_7 - 1.356989204211472e-03*G0_8 + 2.818362193362282e-03*G0_9 - 1.448325016033395e-03*G0_10 - 4.566790591095822e-05*G0_11 - 1.356989204211486e-03*G0_12 + 2.948841924536488e-03*G0_13 - 7.352532851665066e-03*G0_14 + 3.131513548180326e-03*G0_15 - 5.480148709315564e-03*G0_16 - 1.435277042915992e-03*G0_17 - 5.871587902838018e-04*G0_18 + 5.284429112554298e-03*G0_19 + 5.088709515793023e-03*G0_20;
    block[5] = 2.072018131045981e-04*G0_0 + 4.626811267436427e-04*G0_1 - 9.582431457431793e-04*G0_2 + 7.704828125835339e-03*G0_3 - 1.347855623029282e-02*G0_4 + 2.207717051467128e-02*G0_5 - 9.583736254743524e-03*G0_6 - 7.352532851665042e-03*G0_7 + 2.948841924536464e-03*G0_8 - 1.356989204211467e-03*G0_9 - 4.566790591096717e-05*G0_10 - 1.448325016033402e-03*G0_11 + 2.818362193362301e-03*G0_12 - 1.356989204211487e-03*G0_13 + 5.760680131340062e-03*G0_14 + 3.131513548180316e-03*G0_15 - 5.871587902838147e-04*G0_16 + 5.088709515793032e-03*G0_17 - 5.480148709315563e-03*G0_18 + 5.284429112554289e-03*G0_19 - 1.435277042915978e-03*G0_20;
    block[6] = 3.636470107824402e-04*G0_0 - 2.296443268665459e-05*G0_1 + 1.181363486051026e-03*G0_2 - 3.969845820974430e-03*G0_3 + 7.704828125835337e-03*G0_4 - 9.583736254743524e-03*G0_5 + 1.470506570333009e-02*G0_6 + 7.352532851665042e-03*G0_7 - 7.352532851665042e-03*G0_8 + 5.760680131340042e-03*G0_9 - 2.482376885588773e-03*G0_10 - 4.110111531986648e-04*G0_11 - 1.448325016033405e-03*G0_12 - 4.566790591095738e-05*G0_13 - 2.482376885588782e-03*G0_14 + 7.828783870450785e-04*G0_15 - 1.370037177328890e-03*G0_16 - 2.805314220244877e-03*G0_17 - 3.816532136844771e-03*G0_18 + 9.785979838063183e-05*G0_19 + 1.024265889717314e-02*G0_20;
    block[7] = -2.296443268665413e-05*G0_0 + 3.636470107824402e-04*G0_1 + 1.181363486051027e-03*G0_2 - 2.482376885588774e-03*G0_3 + 5.760680131340046e-03*G0_4 - 7.352532851665041e-03*G0_5 + 7.352532851665042e-03*G0_6 + 1.470506570333008e-02*G0_7 - 9.583736254743522e-03*G0_8 + 7.704828125835329e-03*G0_9 - 3.969845820974426e-03*G0_10 - 2.482376885588775e-03*G0_11 - 4.566790591096554e-05*G0_12 - 1.448325016033396e-03*G0_13 - 4.110111531986693e-04*G0_14 - 2.805314220244870e-03*G0_15 - 1.370037177328895e-03*G0_16 + 7.828783870450839e-04*G0_17 + 9.785979838063382e-05*G0_18 - 3.816532136844771e-03*G0_19 + 1.024265889717314e-02*G0_20;
    block[8] = 4.626811267436419e-04*G0_0 + 2.072018131045978e-04*G0_1 - 9.582431457431778e-04*G0_2 - 4.566790591096321e-05*G0_3 - 1.356989204211472e-03*G0_4 + 2.948841924536464e-03*G0_5 - 7.352532851665042e-03*G0_6 - 9.583736254743522e-03*G0_7 + 2.207717051467126e-02*G0_8 - 1.347855623029279e-02*G0_9 + 7.704828125835324e-03*G0_10 + 5.760680131340045e-03*G0_11 - 1.356989204211467e-03*G0_12 + 2.818362193362282e-03*G0_13 - 1.448325016033396e-03*G0_14 + 5.088709515793024e-03*G0_15 - 5.871587902838036e-04*G0_16 + 3.131513548180311e-03*G0_17 + 5.284429112554289e-03*G0_18 - 5.480148709315556e-03*G0_19 - 1.435277042915990e-03*G0_20;
    block[9] = -9.582431457431764e-04*G0_0 + 2.072018131045983e-04*G0_1 + 4.626811267436423e-04*G0_2 - 1.448325016033395e-03*G0_3 + 2.818362193362283e-03*G0_4 - 1.356989204211466e-03*G0_5 + 5.760680131340042e-03*G0_6 + 7.704828125835329e-03*G0_7 - 1.347855623029279e-02*G0_8 + 2.207717051467125e-02*G0_9 - 9.583736254743510e-03*G0_10 - 7.352532851665039e-03*G0_11 + 2.948841924536462e-03*G0_12 - 1.356989204211468e-03*G0_13 - 4.566790591096662e-05*G0_14 - 1.435277042915978e-03*G0_15 - 5.480148709315566e-03*G0_16 + 3.131513548180326e-03*G0_17 + 5.284429112554299e-03*G0_18 - 5.871587902838159e-04*G0_19 + 5.088709515793022e-03*G0_20;
    block[10] = 1.181363486051024e-03*G0_0 + 3.636470107824393e-04*G0_1 - 2.296443268665592e-05*G0_2 - 4.110111531986683e-04*G0_3 - 1.448325016033395e-03*G0_4 - 4.566790591096717e-05*G0_5 - 2.482376885588773e-03*G0_6 - 3.969845820974425e-03*G0_7 + 7.704828125835324e-03*G0_8 - 9.583736254743510e-03*G0_9 + 1.470506570333007e-02*G0_10 + 7.352532851665036e-03*G0_11 - 7.352532851665039e-03*G0_12 + 5.760680131340043e-03*G0_13 - 2.482376885588773e-03*G0_14 + 1.024265889717313e-02*G0_15 - 3.816532136844756e-03*G0_16 + 7.828783870450636e-04*G0_17 + 9.785979838062839e-05*G0_18 - 1.370037177328877e-03*G0_19 - 2.805314220244882e-03*G0_20;
    block[11] = 1.181363486051026e-03*G0_0 - 2.296443268665596e-05*G0_1 + 3.636470107824400e-04*G0_2 - 2.482376885588782e-03*G0_3 - 4.566790591095822e-05*G0_4 - 1.448325016033402e-03*G0_5 - 4.110111531986649e-04*G0_6 - 2.482376885588776e-03*G0_7 + 5.760680131340045e-03*G0_8 - 7.352532851665039e-03*G0_9 + 7.352532851665037e-03*G0_10 + 1.470506570333010e-02*G0_11 - 9.583736254743527e-03*G0_12 + 7.704828125835340e-03*G0_13 - 3.969845820974436e-03*G0_14 + 1.024265889717314e-02*G0_15 + 9.785979838065262e-05*G0_16 - 2.805314220244898e-03*G0_17 - 3.816532136844785e-03*G0_18 - 1.370037177328872e-03*G0_19 + 7.828783870450762e-04*G0_20;
    block[12] = -9.582431457431751e-04*G0_0 + 4.626811267436455e-04*G0_1 + 2.072018131045994e-04*G0_2 + 5.760680131340071e-03*G0_3 - 1.356989204211485e-03*G0_4 + 2.818362193362301e-03*G0_5 - 1.448325016033405e-03*G0_6 - 4.566790591096535e-05*G0_7 - 1.356989204211467e-03*G0_8 + 2.948841924536461e-03*G0_9 - 7.352532851665038e-03*G0_10 - 9.583736254743527e-03*G0_11 + 2.207717051467130e-02*G0_12 - 1.347855623029283e-02*G0_13 + 7.704828125835362e-03*G0_14 - 1.435277042915960e-03*G0_15 + 5.284429112554275e-03*G0_16 + 5.088709515793083e-03*G0_17 - 5.480148709315570e-03*G0_18 - 5.871587902838321e-04*G0_19 + 3.131513548180337e-03*G0_20;
    block[13] = 4.626811267436403e-04*G0_0 - 9.582431457431830e-04*G0_1 + 2.072018131045973e-04*G0_2 - 7.352532851665069e-03*G0_3 + 2.948841924536488e-03*G0_4 - 1.356989204211487e-03*G0_5 - 4.566790591095749e-05*G0_6 - 1.448325016033396e-03*G0_7 + 2.818362193362282e-03*G0_8 - 1.356989204211467e-03*G0_9 + 5.760680131340043e-03*G0_10 + 7.704828125835339e-03*G0_11 - 1.347855623029283e-02*G0_12 + 2.207717051467131e-02*G0_13 - 9.583736254743559e-03*G0_14 + 5.088709515793011e-03*G0_15 + 5.284429112554316e-03*G0_16 - 1.435277042916035e-03*G0_17 - 5.871587902838127e-04*G0_18 - 5.480148709315541e-03*G0_19 + 3.131513548180310e-03*G0_20;
    block[14] = -2.296443268665389e-05*G0_0 + 1.181363486051031e-03*G0_1 + 3.636470107824403e-04*G0_2 + 7.352532851665065e-03*G0_3 - 7.352532851665066e-03*G0_4 + 5.760680131340062e-03*G0_5 - 2.482376885588782e-03*G0_6 - 4.110111531986694e-04*G0_7 - 1.448325016033396e-03*G0_8 - 4.566790591096684e-05*G0_9 - 2.482376885588774e-03*G0_10 - 3.969845820974436e-03*G0_11 + 7.704828125835362e-03*G0_12 - 9.583736254743562e-03*G0_13 + 1.470506570333013e-02*G0_14 - 2.805314220244869e-03*G0_15 + 9.785979838061711e-05*G0_16 + 1.024265889717317e-02*G0_17 - 1.370037177328895e-03*G0_18 - 3.816532136844786e-03*G0_19 + 7.828783870450795e-04*G0_20;
    block[15] = 8.924813612313929e-04*G0_0 + 8.794333881139741e-04*G0_1 + 8.794333881139750e-04*G0_2 + 7.828783870450831e-04*G0_3 + 3.131513548180327e-03*G0_4 + 3.131513548180317e-03*G0_5 + 7.828783870450783e-04*G0_6 - 2.805314220244869e-03*G0_7 + 5.088709515793024e-03*G0_8 - 1.435277042915977e-03*G0_9 + 1.024265889717313e-02*G0_10 + 1.024265889717314e-02*G0_11 - 1.435277042915961e-03*G0_12 + 5.088709515793013e-03*G0_13 - 2.805314220244869e-03*G0_14 + 7.045905483405723e-02*G0_15 - 1.565756774090156e-02*G0_16 + 1.174317580567622e-02*G0_17 - 1.565756774090160e-02*G0_18 + 3.914391935225384e-03*G0_19 + 1.174317580567621e-02*G0_20;
    block[16] = -9.746835918711270e-04*G0_0 - 9.746835918711270e-04*G0_1 + 6.497890612474159e-04*G0_2 - 3.816532136844788e-03*G0_3 - 5.480148709315564e-03*G0_4 - 5.871587902838146e-04*G0_5 - 1.370037177328890e-03*G0_6 - 1.370037177328895e-03*G0_7 - 5.871587902838041e-04*G0_8 - 5.480148709315566e-03*G0_9 - 3.816532136844756e-03*G0_10 + 9.785979838065175e-05*G0_11 + 5.284429112554275e-03*G0_12 + 5.284429112554316e-03*G0_13 + 9.785979838061733e-05*G0_14 - 1.565756774090156e-02*G0_15 + 7.633064273689534e-02*G0_16 - 1.565756774090166e-02*G0_17 - 1.174317580567623e-02*G0_18 - 1.174317580567617e-02*G0_19 + 3.914391935225406e-03*G0_20;
    block[17] = 8.794333881139756e-04*G0_0 + 8.924813612313915e-04*G0_1 + 8.794333881139755e-04*G0_2 + 1.024265889717318e-02*G0_3 - 1.435277042915992e-03*G0_4 + 5.088709515793032e-03*G0_5 - 2.805314220244878e-03*G0_6 + 7.828783870450840e-04*G0_7 + 3.131513548180311e-03*G0_8 + 3.131513548180326e-03*G0_9 + 7.828783870450636e-04*G0_10 - 2.805314220244898e-03*G0_11 + 5.088709515793083e-03*G0_12 - 1.435277042916035e-03*G0_13 + 1.024265889717317e-02*G0_14 + 1.174317580567622e-02*G0_15 - 1.565756774090166e-02*G0_16 + 7.045905483405734e-02*G0_17 + 3.914391935225400e-03*G0_18 - 1.565756774090162e-02*G0_19 + 1.174317580567622e-02*G0_20;
    block[18] = -9.746835918711216e-04*G0_0 + 6.497890612474154e-04*G0_1 - 9.746835918711258e-04*G0_2 - 1.370037177328892e-03*G0_3 - 5.871587902838013e-04*G0_4 - 5.480148709315563e-03*G0_5 - 3.816532136844770e-03*G0_6 + 9.785979838063387e-05*G0_7 + 5.284429112554287e-03*G0_8 + 5.284429112554298e-03*G0_9 + 9.785979838062824e-05*G0_10 - 3.816532136844784e-03*G0_11 - 5.480148709315569e-03*G0_12 - 5.871587902838126e-04*G0_13 - 1.370037177328896e-03*G0_14 - 1.565756774090160e-02*G0_15 - 1.174317580567622e-02*G0_16 + 3.914391935225399e-03*G0_17 + 7.633064273689542e-02*G0_18 - 1.174317580567618e-02*G0_19 - 1.565756774090164e-02*G0_20;
    block[19] = 6.497890612474146e-04*G0_0 - 9.746835918711244e-04*G0_1 - 9.746835918711271e-04*G0_2 + 9.785979838062568e-05*G0_3 + 5.284429112554298e-03*G0_4 + 5.284429112554289e-03*G0_5 + 9.785979838063280e-05*G0_6 - 3.816532136844771e-03*G0_7 - 5.480148709315556e-03*G0_8 - 5.871587902838159e-04*G0_9 - 1.370037177328877e-03*G0_10 - 1.370037177328873e-03*G0_11 - 5.871587902838340e-04*G0_12 - 5.480148709315541e-03*G0_13 - 3.816532136844786e-03*G0_14 + 3.914391935225383e-03*G0_15 - 1.174317580567617e-02*G0_16 - 1.565756774090162e-02*G0_17 - 1.174317580567618e-02*G0_18 + 7.633064273689533e-02*G0_19 - 1.565756774090163e-02*G0_20;
    block[20] = 8.794333881139750e-04*G0_0 + 8.794333881139761e-04*G0_1 + 8.924813612313931e-04*G0_2 - 2.805314220244869e-03*G0_3 + 5.088709515793027e-03*G0_4 - 1.435277042915978e-03*G0_5 + 1.024265889717314e-02*G0_6 + 1.024265889717314e-02*G0_7 - 1.435277042915991e-03*G0_8 + 5.088709515793024e-03*G0_9 - 2.805314220244882e-03*G0_10 + 7.828783870450761e-04*G0_11 + 3.131513548180337e-03*G0_12 + 3.131513548180310e-03*G0_13 + 7.828783870450796e-04*G0_14 + 1.174317580567621e-02*G0_15 + 3.914391935225404e-03*G0_16 + 1.174317580567622e-02*G0_17 - 1.565756774090163e-02*G0_18 - 1.565756774090163e-02*G0_19 + 7.045905483405727e-02*G0_20;
  }

  // No contribution from the boundary
  void eval(real block[], const AffineMap& map, unsigned int boundary) const {}   

};

} }

#endif
