// Automatically generated by FFC, the FEniCS Form Compiler, version 0.1.9.
// For further information, go to http://www/fenics.org/ffc/.
// Licensed under the GNU GPL Version 2.

#ifndef __POISSON2D_4_H
#define __POISSON2D_4_H

#include <dolfin/Mesh.h>
#include <dolfin/Cell.h>
#include <dolfin/Point.h>
#include <dolfin/Vector.h>
#include <dolfin/AffineMap.h>
#include <dolfin/FiniteElement.h>
#include <dolfin/LinearForm.h>
#include <dolfin/BilinearForm.h>

namespace dolfin { namespace Poisson2D_4 {

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class BilinearForm : public dolfin::BilinearForm
{
public:
    
  class TestElement : public dolfin::FiniteElement
  {
  public:

    TestElement() : dolfin::FiniteElement(), tensordims(0)
    {
      // Do nothing
    }

    ~TestElement()
    {
      if ( tensordims ) delete [] tensordims;
    }

    inline unsigned int spacedim() const
    {
      return 15;
    }

    inline unsigned int shapedim() const
    {
      return 2;
    }

    inline unsigned int tensordim(unsigned int i) const
    {
      dolfin_error("Element is scalar.");
      return 0;
    }

    inline unsigned int rank() const
    {
      return 0;
    }

    void dofmap(int dofs[], const Cell& cell, const Mesh& mesh) const
    {
      static unsigned int edge_reordering[2][3] = {{0, 1, 2}, {2, 1, 0}};
      dofs[0] = cell.nodeID(0);
      dofs[1] = cell.nodeID(1);
      dofs[2] = cell.nodeID(2);
      int alignment = cell.edgeAlignment(0);
      int offset = mesh.noNodes();
      dofs[3] = offset + 3*cell.edgeID(0) + edge_reordering[alignment][0];
      dofs[4] = offset + 3*cell.edgeID(0) + edge_reordering[alignment][1];
      dofs[5] = offset + 3*cell.edgeID(0) + edge_reordering[alignment][2];
      alignment = cell.edgeAlignment(1);
      dofs[6] = offset + 3*cell.edgeID(1) + edge_reordering[alignment][0];
      dofs[7] = offset + 3*cell.edgeID(1) + edge_reordering[alignment][1];
      dofs[8] = offset + 3*cell.edgeID(1) + edge_reordering[alignment][2];
      alignment = cell.edgeAlignment(2);
      dofs[9] = offset + 3*cell.edgeID(2) + edge_reordering[alignment][0];
      dofs[10] = offset + 3*cell.edgeID(2) + edge_reordering[alignment][1];
      dofs[11] = offset + 3*cell.edgeID(2) + edge_reordering[alignment][2];
      offset = offset + 3*mesh.noEdges();
      dofs[12] = offset + 3*cell.id() + 0;
      dofs[13] = offset + 3*cell.id() + 1;
      dofs[14] = offset + 3*cell.id() + 2;
    }

    void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
    {
      points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
      points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
      points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
      points[3] = map(7.500000000000000e-01, 2.500000000000000e-01);
      points[4] = map(5.000000000000000e-01, 5.000000000000000e-01);
      points[5] = map(2.500000000000000e-01, 7.500000000000000e-01);
      points[6] = map(0.000000000000000e+00, 7.500000000000000e-01);
      points[7] = map(0.000000000000000e+00, 5.000000000000000e-01);
      points[8] = map(0.000000000000000e+00, 2.500000000000000e-01);
      points[9] = map(2.500000000000000e-01, 0.000000000000000e+00);
      points[10] = map(5.000000000000000e-01, 0.000000000000000e+00);
      points[11] = map(7.500000000000000e-01, 0.000000000000000e+00);
      points[12] = map(2.500000000000000e-01, 2.500000000000000e-01);
      points[13] = map(5.000000000000000e-01, 2.500000000000000e-01);
      points[14] = map(2.500000000000000e-01, 5.000000000000000e-01);
      components[0] = 0;
      components[1] = 0;
      components[2] = 0;
      components[3] = 0;
      components[4] = 0;
      components[5] = 0;
      components[6] = 0;
      components[7] = 0;
      components[8] = 0;
      components[9] = 0;
      components[10] = 0;
      components[11] = 0;
      components[12] = 0;
      components[13] = 0;
      components[14] = 0;
    }

    void vertexeval(real values[], unsigned int vertex, const Vector& x, const Mesh& mesh) const
    {
      // FIXME: Temporary fix for Lagrange elements
      values[0] = x(vertex);
    }

  private:

    unsigned int* tensordims;

  };
    
  class TrialElement : public dolfin::FiniteElement
  {
  public:

    TrialElement() : dolfin::FiniteElement(), tensordims(0)
    {
      // Do nothing
    }

    ~TrialElement()
    {
      if ( tensordims ) delete [] tensordims;
    }

    inline unsigned int spacedim() const
    {
      return 15;
    }

    inline unsigned int shapedim() const
    {
      return 2;
    }

    inline unsigned int tensordim(unsigned int i) const
    {
      dolfin_error("Element is scalar.");
      return 0;
    }

    inline unsigned int rank() const
    {
      return 0;
    }

    void dofmap(int dofs[], const Cell& cell, const Mesh& mesh) const
    {
      static unsigned int edge_reordering[2][3] = {{0, 1, 2}, {2, 1, 0}};
      dofs[0] = cell.nodeID(0);
      dofs[1] = cell.nodeID(1);
      dofs[2] = cell.nodeID(2);
      int alignment = cell.edgeAlignment(0);
      int offset = mesh.noNodes();
      dofs[3] = offset + 3*cell.edgeID(0) + edge_reordering[alignment][0];
      dofs[4] = offset + 3*cell.edgeID(0) + edge_reordering[alignment][1];
      dofs[5] = offset + 3*cell.edgeID(0) + edge_reordering[alignment][2];
      alignment = cell.edgeAlignment(1);
      dofs[6] = offset + 3*cell.edgeID(1) + edge_reordering[alignment][0];
      dofs[7] = offset + 3*cell.edgeID(1) + edge_reordering[alignment][1];
      dofs[8] = offset + 3*cell.edgeID(1) + edge_reordering[alignment][2];
      alignment = cell.edgeAlignment(2);
      dofs[9] = offset + 3*cell.edgeID(2) + edge_reordering[alignment][0];
      dofs[10] = offset + 3*cell.edgeID(2) + edge_reordering[alignment][1];
      dofs[11] = offset + 3*cell.edgeID(2) + edge_reordering[alignment][2];
      offset = offset + 3*mesh.noEdges();
      dofs[12] = offset + 3*cell.id() + 0;
      dofs[13] = offset + 3*cell.id() + 1;
      dofs[14] = offset + 3*cell.id() + 2;
    }

    void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
    {
      points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
      points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
      points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
      points[3] = map(7.500000000000000e-01, 2.500000000000000e-01);
      points[4] = map(5.000000000000000e-01, 5.000000000000000e-01);
      points[5] = map(2.500000000000000e-01, 7.500000000000000e-01);
      points[6] = map(0.000000000000000e+00, 7.500000000000000e-01);
      points[7] = map(0.000000000000000e+00, 5.000000000000000e-01);
      points[8] = map(0.000000000000000e+00, 2.500000000000000e-01);
      points[9] = map(2.500000000000000e-01, 0.000000000000000e+00);
      points[10] = map(5.000000000000000e-01, 0.000000000000000e+00);
      points[11] = map(7.500000000000000e-01, 0.000000000000000e+00);
      points[12] = map(2.500000000000000e-01, 2.500000000000000e-01);
      points[13] = map(5.000000000000000e-01, 2.500000000000000e-01);
      points[14] = map(2.500000000000000e-01, 5.000000000000000e-01);
      components[0] = 0;
      components[1] = 0;
      components[2] = 0;
      components[3] = 0;
      components[4] = 0;
      components[5] = 0;
      components[6] = 0;
      components[7] = 0;
      components[8] = 0;
      components[9] = 0;
      components[10] = 0;
      components[11] = 0;
      components[12] = 0;
      components[13] = 0;
      components[14] = 0;
    }

    void vertexeval(real values[], unsigned int vertex, const Vector& x, const Mesh& mesh) const
    {
      // FIXME: Temporary fix for Lagrange elements
      values[0] = x(vertex);
    }

  private:

    unsigned int* tensordims;

  };

  BilinearForm() : dolfin::BilinearForm(0)
  {
    // Create finite element for test space
    _test = new TestElement();

    // Create finite element for trial space
    _trial = new TrialElement();
  }

  void eval(real block[], const AffineMap& map) const
  {
    // Compute geometry tensors
    real G0_0_0 = map.det*(map.g00*map.g00 + map.g01*map.g01);
    real G0_0_1 = map.det*(map.g00*map.g10 + map.g01*map.g11);
    real G0_1_0 = map.det*(map.g10*map.g00 + map.g11*map.g01);
    real G0_1_1 = map.det*(map.g10*map.g10 + map.g11*map.g11);

    // Compute element tensor
    block[0] = 3.730158730158728e-01*G0_0_0 + 3.730158730158727e-01*G0_0_1 + 3.730158730158727e-01*G0_1_0 + 3.730158730158726e-01*G0_1_1;
    block[1] = 5.661375661375645e-02*G0_0_0 + 5.661375661375648e-02*G0_1_0;
    block[2] = 5.661375661375664e-02*G0_0_1 + 5.661375661375669e-02*G0_1_1;
    block[3] = 4.232804232804224e-02*G0_0_0 + 4.232804232804225e-02*G0_0_1 + 4.232804232804234e-02*G0_1_0 + 4.232804232804239e-02*G0_1_1;
    block[4] = 4.232804232804172e-02*G0_0_0 + 4.232804232804190e-02*G0_0_1 + 4.232804232804178e-02*G0_1_0 + 4.232804232804191e-02*G0_1_1;
    block[5] = 4.232804232804212e-02*G0_0_0 + 4.232804232804215e-02*G0_0_1 + 4.232804232804237e-02*G0_1_0 + 4.232804232804235e-02*G0_1_1;
    block[6] = -4.232804232804210e-02*G0_0_0 - 2.455026455026455e-01*G0_0_1 - 4.232804232804234e-02*G0_1_0 - 2.455026455026456e-01*G0_1_1;
    block[7] = 4.232804232804210e-02*G0_0_0 + 4.677248677248676e-01*G0_0_1 + 4.232804232804230e-02*G0_1_0 + 4.677248677248676e-01*G0_1_1;
    block[8] = 1.269841269841266e-01*G0_0_0 - 6.518518518518515e-01*G0_0_1 + 1.269841269841264e-01*G0_1_0 - 6.518518518518515e-01*G0_1_1;
    block[9] = -6.518518518518513e-01*G0_0_0 + 1.269841269841276e-01*G0_0_1 - 6.518518518518512e-01*G0_1_0 + 1.269841269841274e-01*G0_1_1;
    block[10] = 4.677248677248674e-01*G0_0_0 + 4.232804232804224e-02*G0_0_1 + 4.677248677248674e-01*G0_1_0 + 4.232804232804235e-02*G0_1_1;
    block[11] = -2.455026455026453e-01*G0_0_0 - 4.232804232804217e-02*G0_0_1 - 2.455026455026453e-01*G0_1_0 - 4.232804232804230e-02*G0_1_1;
    block[12] = -8.465608465608405e-02*G0_0_0 - 8.465608465608537e-02*G0_0_1 - 8.465608465608382e-02*G0_1_0 - 8.465608465608496e-02*G0_1_1;
    block[13] = -8.465608465608471e-02*G0_0_0 - 8.465608465608436e-02*G0_0_1 - 8.465608465608490e-02*G0_1_0 - 8.465608465608447e-02*G0_1_1;
    block[14] = -8.465608465608385e-02*G0_0_0 - 8.465608465608411e-02*G0_0_1 - 8.465608465608411e-02*G0_1_0 - 8.465608465608451e-02*G0_1_1;
    block[15] = 5.661375661375644e-02*G0_0_0 + 5.661375661375648e-02*G0_0_1;
    block[16] = 3.730158730158724e-01*G0_0_0;
    block[17] = -5.661375661375662e-02*G0_0_1;
    block[18] = 1.269841269841266e-01*G0_0_0 + 7.788359788359773e-01*G0_0_1;
    block[19] = 4.232804232804285e-02*G0_0_0 - 4.253968253968247e-01*G0_0_1;
    block[20] = -4.232804232804237e-02*G0_0_0 + 2.031746031746032e-01*G0_0_1;
    block[21] = 4.232804232804239e-02*G0_0_0;
    block[22] = 4.232804232804234e-02*G0_0_0;
    block[23] = 4.232804232804224e-02*G0_0_0;
    block[24] = -2.455026455026448e-01*G0_0_0 - 2.031746031746026e-01*G0_0_1;
    block[25] = 4.677248677248668e-01*G0_0_0 + 4.253968253968243e-01*G0_0_1;
    block[26] = -6.518518518518507e-01*G0_0_0 - 7.788359788359771e-01*G0_0_1;
    block[27] = -8.465608465608479e-02*G0_0_0;
    block[28] = -8.465608465608396e-02*G0_0_0;
    block[29] = -8.465608465608526e-02*G0_0_0;
    block[30] = 5.661375661375663e-02*G0_1_0 + 5.661375661375669e-02*G0_1_1;
    block[31] = -5.661375661375662e-02*G0_1_0;
    block[32] = 3.730158730158727e-01*G0_1_1;
    block[33] = 2.031746031746021e-01*G0_1_0 - 4.232804232804293e-02*G0_1_1;
    block[34] = -4.253968253968243e-01*G0_1_0 + 4.232804232804251e-02*G0_1_1;
    block[35] = 7.788359788359783e-01*G0_1_0 + 1.269841269841272e-01*G0_1_1;
    block[36] = -7.788359788359782e-01*G0_1_0 - 6.518518518518513e-01*G0_1_1;
    block[37] = 4.253968253968243e-01*G0_1_0 + 4.677248677248671e-01*G0_1_1;
    block[38] = -2.031746031746026e-01*G0_1_0 - 2.455026455026453e-01*G0_1_1;
    block[39] = 4.232804232804284e-02*G0_1_1;
    block[40] = 4.232804232804282e-02*G0_1_1;
    block[41] = 4.232804232804289e-02*G0_1_1;
    block[42] = -8.465608465608630e-02*G0_1_1;
    block[43] = -8.465608465608540e-02*G0_1_1;
    block[44] = -8.465608465608346e-02*G0_1_1;
    block[45] = 4.232804232804224e-02*G0_0_0 + 4.232804232804235e-02*G0_0_1 + 4.232804232804226e-02*G0_1_0 + 4.232804232804239e-02*G0_1_1;
    block[46] = 1.269841269841266e-01*G0_0_0 + 7.788359788359773e-01*G0_1_0;
    block[47] = 2.031746031746022e-01*G0_0_1 - 4.232804232804293e-02*G0_1_1;
    block[48] = 1.828571428571425e+00*G0_0_0 + 1.049735449735448e+00*G0_0_1 + 1.049735449735448e+00*G0_1_0 + 2.099470899470896e+00*G0_1_1;
    block[49] = -6.603174603174587e-01*G0_0_0 + 8.211640211640189e-01*G0_0_1 - 2.962962962962943e-01*G0_1_0 - 7.619047619047611e-01*G0_1_1;
    block[50] = 3.386243386243367e-01*G0_0_0 - 4.402116402116401e-01*G0_0_1 + 1.015873015873000e-01*G0_1_0 + 3.386243386243382e-01*G0_1_1;
    block[51] = -3.386243386243362e-01*G0_0_0 - 1.015873015873000e-01*G0_0_1 - 1.015873015872999e-01*G0_1_0;
    block[52] = -1.523809523809547e-01*G0_0_0 - 4.232804232804357e-02*G0_0_1 - 4.232804232804308e-02*G0_1_0;
    block[53] = -2.031746031746009e-01*G0_0_0 - 1.015873015873012e-01*G0_0_1 - 1.015873015873004e-01*G0_1_0;
    block[54] = -1.354497354497342e-01*G0_0_0 - 2.370370370370343e-01*G0_0_1 - 2.370370370370356e-01*G0_1_0 - 3.386243386243361e-01*G0_1_1;
    block[55] = 1.015873015872998e-01*G0_0_0 + 4.656084656084640e-01*G0_0_1 + 4.656084656084629e-01*G0_1_0 + 7.619047619047585e-01*G0_1_1;
    block[56] = -1.354497354497347e-01*G0_0_0 - 1.049735449735448e+00*G0_0_1 - 1.049735449735447e+00*G0_1_0 - 2.099470899470895e+00*G0_1_1;
    block[57] = 8.126984126984091e-01*G0_0_0 + 3.386243386243338e-01*G0_0_1 + 3.386243386243363e-01*G0_1_0;
    block[58] = -2.438095238095232e+00*G0_0_0 - 1.286772486772483e+00*G0_0_1 - 1.286772486772483e+00*G0_1_0;
    block[59] = 8.126984126984130e-01*G0_0_0 + 3.386243386243414e-01*G0_0_1 + 3.386243386243373e-01*G0_1_0;
    block[60] = 4.232804232804172e-02*G0_0_0 + 4.232804232804177e-02*G0_0_1 + 4.232804232804191e-02*G0_1_0 + 4.232804232804192e-02*G0_1_1;
    block[61] = 4.232804232804285e-02*G0_0_0 - 4.253968253968247e-01*G0_1_0;
    block[62] = -4.253968253968243e-01*G0_0_1 + 4.232804232804251e-02*G0_1_1;
    block[63] = -6.603174603174587e-01*G0_0_0 - 2.962962962962943e-01*G0_0_1 + 8.211640211640189e-01*G0_1_0 - 7.619047619047613e-01*G0_1_1;
    block[64] = 2.450793650793645e+00*G0_0_0 + 9.714285714285679e-01*G0_0_1 + 9.714285714285679e-01*G0_1_0 + 2.450793650793644e+00*G0_1_1;
    block[65] = -7.619047619047590e-01*G0_0_0 + 8.211640211640218e-01*G0_0_1 - 2.962962962962949e-01*G0_1_0 - 6.603174603174591e-01*G0_1_1;
    block[66] = 7.619047619047588e-01*G0_0_0 + 2.962962962962961e-01*G0_0_1 + 2.962962962962951e-01*G0_1_0 - 6.772486772486677e-02*G0_1_1;
    block[67] = 3.936507936507941e-01*G0_0_0 + 1.968253968253957e-01*G0_0_1 + 1.968253968253952e-01*G0_1_0 + 5.079365079364934e-02*G0_1_1;
    block[68] = -1.523809523809521e-01*G0_0_0 - 1.100529100529084e-01*G0_0_1 - 1.100529100529087e-01*G0_1_0 - 6.772486772486605e-02*G0_1_1;
    block[69] = -6.772486772486723e-02*G0_0_0 - 1.100529100529114e-01*G0_0_1 - 1.100529100529092e-01*G0_1_0 - 1.523809523809517e-01*G0_1_1;
    block[70] = 5.079365079365026e-02*G0_0_0 + 1.968253968253962e-01*G0_0_1 + 1.968253968253959e-01*G0_1_0 + 3.936507936507935e-01*G0_1_1;
    block[71] = -6.772486772486754e-02*G0_0_0 + 2.962962962962940e-01*G0_0_1 + 2.962962962962959e-01*G0_1_0 + 7.619047619047604e-01*G0_1_1;
    block[72] = 4.063492063492060e-01*G0_0_0 + 4.571428571428601e-01*G0_0_1 + 4.571428571428555e-01*G0_1_0 + 4.063492063492056e-01*G0_1_1;
    block[73] = 4.063492063492049e-01*G0_0_0 - 1.168253968253963e+00*G0_0_1 - 1.168253968253965e+00*G0_1_0 - 2.844444444444437e+00*G0_1_1;
    block[74] = -2.844444444444439e+00*G0_0_0 - 1.168253968253972e+00*G0_0_1 - 1.168253968253963e+00*G0_1_0 + 4.063492063492045e-01*G0_1_1;
    block[75] = 4.232804232804212e-02*G0_0_0 + 4.232804232804237e-02*G0_0_1 + 4.232804232804216e-02*G0_1_0 + 4.232804232804238e-02*G0_1_1;
    block[76] = -4.232804232804237e-02*G0_0_0 + 2.031746031746032e-01*G0_1_0;
    block[77] = 7.788359788359783e-01*G0_0_1 + 1.269841269841271e-01*G0_1_1;
    block[78] = 3.386243386243367e-01*G0_0_0 + 1.015873015873001e-01*G0_0_1 - 4.402116402116402e-01*G0_1_0 + 3.386243386243382e-01*G0_1_1;
    block[79] = -7.619047619047590e-01*G0_0_0 - 2.962962962962949e-01*G0_0_1 + 8.211640211640218e-01*G0_1_0 - 6.603174603174591e-01*G0_1_1;
    block[80] = 2.099470899470900e+00*G0_0_0 + 1.049735449735450e+00*G0_0_1 + 1.049735449735450e+00*G0_1_0 + 1.828571428571429e+00*G0_1_1;
    block[81] = -2.099470899470899e+00*G0_0_0 - 1.049735449735449e+00*G0_0_1 - 1.049735449735450e+00*G0_1_0 - 1.354497354497358e-01*G0_1_1;
    block[82] = 7.619047619047605e-01*G0_0_0 + 4.656084656084646e-01*G0_0_1 + 4.656084656084657e-01*G0_1_0 + 1.015873015873013e-01*G0_1_1;
    block[83] = -3.386243386243379e-01*G0_0_0 - 2.370370370370367e-01*G0_0_1 - 2.370370370370368e-01*G0_1_0 - 1.354497354497355e-01*G0_1_1;
    block[84] = -1.015873015873015e-01*G0_0_1 - 1.015873015873011e-01*G0_1_0 - 2.031746031746038e-01*G0_1_1;
    block[85] = -4.232804232804160e-02*G0_0_1 - 4.232804232804213e-02*G0_1_0 - 1.523809523809523e-01*G0_1_1;
    block[86] = -1.015873015873002e-01*G0_0_1 - 1.015873015873018e-01*G0_1_0 - 3.386243386243383e-01*G0_1_1;
    block[87] = 3.386243386243359e-01*G0_0_1 + 3.386243386243371e-01*G0_1_0 + 8.126984126984125e-01*G0_1_1;
    block[88] = 3.386243386243364e-01*G0_0_1 + 3.386243386243397e-01*G0_1_0 + 8.126984126984115e-01*G0_1_1;
    block[89] = -1.286772486772484e+00*G0_0_1 - 1.286772486772488e+00*G0_1_0 - 2.438095238095237e+00*G0_1_1;
    block[90] = -4.232804232804211e-02*G0_0_0 - 4.232804232804234e-02*G0_0_1 - 2.455026455026456e-01*G0_1_0 - 2.455026455026457e-01*G0_1_1;
    block[91] = 4.232804232804237e-02*G0_0_0;
    block[92] = -7.788359788359782e-01*G0_0_1 - 6.518518518518515e-01*G0_1_1;
    block[93] = -3.386243386243362e-01*G0_0_0 - 1.015873015872999e-01*G0_0_1 - 1.015873015873000e-01*G0_1_0;
    block[94] = 7.619047619047588e-01*G0_0_0 + 2.962962962962951e-01*G0_0_1 + 2.962962962962961e-01*G0_1_0 - 6.772486772486673e-02*G0_1_1;
    block[95] = -2.099470899470899e+00*G0_0_0 - 1.049735449735450e+00*G0_0_1 - 1.049735449735449e+00*G0_1_0 - 1.354497354497358e-01*G0_1_1;
    block[96] = 2.099470899470898e+00*G0_0_0 + 1.049735449735449e+00*G0_0_1 + 1.049735449735449e+00*G0_1_0 + 1.828571428571428e+00*G0_1_1;
    block[97] = -7.619047619047603e-01*G0_0_0 - 4.656084656084645e-01*G0_0_1 - 1.583068783068780e+00*G0_1_0 - 1.947089947089945e+00*G0_1_1;
    block[98] = 3.386243386243378e-01*G0_0_0 + 2.370370370370367e-01*G0_0_1 + 7.788359788359778e-01*G0_1_0 + 1.015873015873016e+00*G0_1_1;
    block[99] = 1.015873015873014e-01*G0_0_1 + 1.015873015873014e-01*G0_1_0 - 1.354497354497365e-01*G0_1_1;
    block[100] = 4.232804232804164e-02*G0_0_1 + 4.232804232804191e-02*G0_1_0 - 6.772486772486842e-02*G0_1_1;
    block[101] = 1.015873015873000e-01*G0_0_1 + 1.015873015873021e-01*G0_1_0;
    block[102] = -3.386243386243358e-01*G0_0_1 - 3.386243386243369e-01*G0_1_0 + 1.354497354497388e-01*G0_1_1;
    block[103] = -3.386243386243366e-01*G0_0_1 - 3.386243386243408e-01*G0_1_0 + 1.354497354497351e-01*G0_1_1;
    block[104] = 1.286772486772484e+00*G0_0_1 + 1.286772486772485e+00*G0_1_0 + 1.354497354497333e-01*G0_1_1;
    block[105] = 4.232804232804210e-02*G0_0_0 + 4.232804232804231e-02*G0_0_1 + 4.677248677248676e-01*G0_1_0 + 4.677248677248676e-01*G0_1_1;
    block[106] = 4.232804232804235e-02*G0_0_0;
    block[107] = 4.253968253968243e-01*G0_0_1 + 4.677248677248671e-01*G0_1_1;
    block[108] = -1.523809523809546e-01*G0_0_0 - 4.232804232804310e-02*G0_0_1 - 4.232804232804357e-02*G0_1_0;
    block[109] = 3.936507936507941e-01*G0_0_0 + 1.968253968253952e-01*G0_0_1 + 1.968253968253956e-01*G0_1_0 + 5.079365079364934e-02*G0_1_1;
    block[110] = 7.619047619047605e-01*G0_0_0 + 4.656084656084656e-01*G0_0_1 + 4.656084656084647e-01*G0_1_0 + 1.015873015873013e-01*G0_1_1;
    block[111] = -7.619047619047602e-01*G0_0_0 - 1.583068783068780e+00*G0_0_1 - 4.656084656084645e-01*G0_1_0 - 1.947089947089946e+00*G0_1_1;
    block[112] = 2.450793650793645e+00*G0_0_0 + 1.479365079365077e+00*G0_0_1 + 1.479365079365077e+00*G0_1_0 + 2.958730158730156e+00*G0_1_1;
    block[113] = -6.603174603174587e-01*G0_0_0 - 3.640211640211633e-01*G0_0_1 - 1.481481481481480e+00*G0_1_0 - 1.947089947089946e+00*G0_1_1;
    block[114] = -6.772486772486705e-02*G0_0_0 - 3.640211640211637e-01*G0_0_1 - 3.640211640211642e-01*G0_1_0 + 1.015873015873026e-01*G0_1_1;
    block[115] = 5.079365079365113e-02*G0_0_0 - 1.460317460317447e-01*G0_0_1 - 1.460317460317449e-01*G0_1_0 + 5.079365079365151e-02*G0_1_1;
    block[116] = -6.772486772486852e-02*G0_0_0 + 4.232804232804284e-02*G0_0_1 + 4.232804232804161e-02*G0_1_0;
    block[117] = 4.063492063492041e-01*G0_0_0 + 1.574603174603171e+00*G0_0_1 + 1.574603174603174e+00*G0_1_0 - 1.015873015873034e-01*G0_1_1;
    block[118] = 4.063492063492092e-01*G0_0_0 - 5.079365079364996e-02*G0_0_1 - 5.079365079364991e-02*G0_1_0 - 1.015873015873010e-01*G0_1_1;
    block[119] = -2.844444444444441e+00*G0_0_0 - 1.676190476190473e+00*G0_0_1 - 1.676190476190473e+00*G0_1_0 - 1.015873015873002e-01*G0_1_1;
    block[120] = 1.269841269841266e-01*G0_0_0 + 1.269841269841264e-01*G0_0_1 - 6.518518518518515e-01*G0_1_0 - 6.518518518518515e-01*G0_1_1;
    block[121] = 4.232804232804224e-02*G0_0_0;
    block[122] = -2.031746031746026e-01*G0_0_1 - 2.455026455026453e-01*G0_1_1;
    block[123] = -2.031746031746009e-01*G0_0_0 - 1.015873015873004e-01*G0_0_1 - 1.015873015873012e-01*G0_1_0;
    block[124] = -1.523809523809521e-01*G0_0_0 - 1.100529100529088e-01*G0_0_1 - 1.100529100529084e-01*G0_1_0 - 6.772486772486608e-02*G0_1_1;
    block[125] = -3.386243386243379e-01*G0_0_0 - 2.370370370370368e-01*G0_0_1 - 2.370370370370367e-01*G0_1_0 - 1.354497354497354e-01*G0_1_1;
    block[126] = 3.386243386243378e-01*G0_0_0 + 7.788359788359780e-01*G0_0_1 + 2.370370370370366e-01*G0_1_0 + 1.015873015873016e+00*G0_1_1;
    block[127] = -6.603174603174587e-01*G0_0_0 - 1.481481481481480e+00*G0_0_1 - 3.640211640211632e-01*G0_1_0 - 1.947089947089946e+00*G0_1_1;
    block[128] = 1.828571428571426e+00*G0_0_0 + 7.788359788359787e-01*G0_0_1 + 7.788359788359788e-01*G0_1_0 + 1.828571428571427e+00*G0_1_1;
    block[129] = -1.354497354497350e-01*G0_0_0 + 9.142857142857131e-01*G0_0_1 + 9.142857142857141e-01*G0_1_0 - 1.354497354497363e-01*G0_1_1;
    block[130] = 1.015873015873011e-01*G0_0_0 - 3.640211640211634e-01*G0_0_1 - 3.640211640211643e-01*G0_1_0 - 6.772486772486788e-02*G0_1_1;
    block[131] = -1.354497354497350e-01*G0_0_0 + 1.015873015873006e-01*G0_0_1 + 1.015873015873020e-01*G0_1_0;
    block[132] = -2.438095238095235e+00*G0_0_0 - 1.151322751322749e+00*G0_0_1 - 1.151322751322752e+00*G0_1_0 + 1.354497354497366e-01*G0_1_1;
    block[133] = 8.126984126984095e-01*G0_0_0 + 4.740740740740718e-01*G0_0_1 + 4.740740740740740e-01*G0_1_0 + 1.354497354497344e-01*G0_1_1;
    block[134] = 8.126984126984109e-01*G0_0_0 + 4.740740740740729e-01*G0_0_1 + 4.740740740740718e-01*G0_1_0 + 1.354497354497348e-01*G0_1_1;
    block[135] = -6.518518518518512e-01*G0_0_0 - 6.518518518518512e-01*G0_0_1 + 1.269841269841276e-01*G0_1_0 + 1.269841269841274e-01*G0_1_1;
    block[136] = -2.455026455026448e-01*G0_0_0 - 2.031746031746026e-01*G0_1_0;
    block[137] = 4.232804232804285e-02*G0_1_1;
    block[138] = -1.354497354497342e-01*G0_0_0 - 2.370370370370356e-01*G0_0_1 - 2.370370370370343e-01*G0_1_0 - 3.386243386243361e-01*G0_1_1;
    block[139] = -6.772486772486723e-02*G0_0_0 - 1.100529100529092e-01*G0_0_1 - 1.100529100529114e-01*G0_1_0 - 1.523809523809517e-01*G0_1_1;
    block[140] = -1.015873015873011e-01*G0_0_1 - 1.015873015873015e-01*G0_1_0 - 2.031746031746039e-01*G0_1_1;
    block[141] = 1.015873015873014e-01*G0_0_1 + 1.015873015873014e-01*G0_1_0 - 1.354497354497365e-01*G0_1_1;
    block[142] = -6.772486772486702e-02*G0_0_0 - 3.640211640211643e-01*G0_0_1 - 3.640211640211637e-01*G0_1_0 + 1.015873015873027e-01*G0_1_1;
    block[143] = -1.354497354497349e-01*G0_0_0 + 9.142857142857141e-01*G0_0_1 + 9.142857142857131e-01*G0_1_0 - 1.354497354497364e-01*G0_1_1;
    block[144] = 1.828571428571427e+00*G0_0_0 + 7.788359788359771e-01*G0_0_1 + 7.788359788359770e-01*G0_1_0 + 1.828571428571428e+00*G0_1_1;
    block[145] = -1.947089947089946e+00*G0_0_0 - 3.640211640211631e-01*G0_0_1 - 1.481481481481480e+00*G0_1_0 - 6.603174603174584e-01*G0_1_1;
    block[146] = 1.015873015873014e+00*G0_0_0 + 2.370370370370357e-01*G0_0_1 + 7.788359788359773e-01*G0_1_0 + 3.386243386243366e-01*G0_1_1;
    block[147] = 1.354497354497350e-01*G0_0_0 - 1.151322751322750e+00*G0_0_1 - 1.151322751322750e+00*G0_1_0 - 2.438095238095237e+00*G0_1_1;
    block[148] = 1.354497354497343e-01*G0_0_0 + 4.740740740740725e-01*G0_0_1 + 4.740740740740706e-01*G0_1_0 + 8.126984126984096e-01*G0_1_1;
    block[149] = 1.354497354497342e-01*G0_0_0 + 4.740740740740725e-01*G0_0_1 + 4.740740740740751e-01*G0_1_0 + 8.126984126984135e-01*G0_1_1;
    block[150] = 4.677248677248674e-01*G0_0_0 + 4.677248677248674e-01*G0_0_1 + 4.232804232804224e-02*G0_1_0 + 4.232804232804235e-02*G0_1_1;
    block[151] = 4.677248677248668e-01*G0_0_0 + 4.253968253968243e-01*G0_1_0;
    block[152] = 4.232804232804280e-02*G0_1_1;
    block[153] = 1.015873015872999e-01*G0_0_0 + 4.656084656084628e-01*G0_0_1 + 4.656084656084640e-01*G0_1_0 + 7.619047619047586e-01*G0_1_1;
    block[154] = 5.079365079365025e-02*G0_0_0 + 1.968253968253959e-01*G0_0_1 + 1.968253968253962e-01*G0_1_0 + 3.936507936507934e-01*G0_1_1;
    block[155] = -4.232804232804210e-02*G0_0_1 - 4.232804232804160e-02*G0_1_0 - 1.523809523809523e-01*G0_1_1;
    block[156] = 4.232804232804192e-02*G0_0_1 + 4.232804232804162e-02*G0_1_0 - 6.772486772486840e-02*G0_1_1;
    block[157] = 5.079365079365117e-02*G0_0_0 - 1.460317460317449e-01*G0_0_1 - 1.460317460317447e-01*G0_1_0 + 5.079365079365151e-02*G0_1_1;
    block[158] = 1.015873015873011e-01*G0_0_0 - 3.640211640211644e-01*G0_0_1 - 3.640211640211634e-01*G0_1_0 - 6.772486772486787e-02*G0_1_1;
    block[159] = -1.947089947089946e+00*G0_0_0 - 1.481481481481480e+00*G0_0_1 - 3.640211640211630e-01*G0_1_0 - 6.603174603174584e-01*G0_1_1;
    block[160] = 2.958730158730156e+00*G0_0_0 + 1.479365079365076e+00*G0_0_1 + 1.479365079365076e+00*G0_1_0 + 2.450793650793646e+00*G0_1_1;
    block[161] = -1.947089947089944e+00*G0_0_0 - 4.656084656084631e-01*G0_0_1 - 1.583068783068780e+00*G0_1_0 - 7.619047619047590e-01*G0_1_1;
    block[162] = -1.015873015873016e-01*G0_0_0 + 1.574603174603174e+00*G0_0_1 + 1.574603174603172e+00*G0_1_0 + 4.063492063492058e-01*G0_1_1;
    block[163] = -1.015873015872986e-01*G0_0_0 - 1.676190476190471e+00*G0_0_1 - 1.676190476190472e+00*G0_1_0 - 2.844444444444438e+00*G0_1_1;
    block[164] = -1.015873015873014e-01*G0_0_0 - 5.079365079365131e-02*G0_0_1 - 5.079365079365140e-02*G0_1_0 + 4.063492063492042e-01*G0_1_1;
    block[165] = -2.455026455026453e-01*G0_0_0 - 2.455026455026453e-01*G0_0_1 - 4.232804232804218e-02*G0_1_0 - 4.232804232804231e-02*G0_1_1;
    block[166] = -6.518518518518507e-01*G0_0_0 - 7.788359788359772e-01*G0_1_0;
    block[167] = 4.232804232804289e-02*G0_1_1;
    block[168] = -1.354497354497347e-01*G0_0_0 - 1.049735449735447e+00*G0_0_1 - 1.049735449735448e+00*G0_1_0 - 2.099470899470895e+00*G0_1_1;
    block[169] = -6.772486772486754e-02*G0_0_0 + 2.962962962962958e-01*G0_0_1 + 2.962962962962940e-01*G0_1_0 + 7.619047619047603e-01*G0_1_1;
    block[170] = -1.015873015873018e-01*G0_0_1 - 1.015873015873002e-01*G0_1_0 - 3.386243386243384e-01*G0_1_1;
    block[171] = 1.015873015873021e-01*G0_0_1 + 1.015873015873000e-01*G0_1_0;
    block[172] = -6.772486772486858e-02*G0_0_0 + 4.232804232804161e-02*G0_0_1 + 4.232804232804283e-02*G0_1_0;
    block[173] = -1.354497354497350e-01*G0_0_0 + 1.015873015873021e-01*G0_0_1 + 1.015873015873006e-01*G0_1_0;
    block[174] = 1.015873015873014e+00*G0_0_0 + 7.788359788359772e-01*G0_0_1 + 2.370370370370357e-01*G0_1_0 + 3.386243386243367e-01*G0_1_1;
    block[175] = -1.947089947089944e+00*G0_0_0 - 1.583068783068780e+00*G0_0_1 - 4.656084656084633e-01*G0_1_0 - 7.619047619047590e-01*G0_1_1;
    block[176] = 1.828571428571426e+00*G0_0_0 + 1.049735449735447e+00*G0_0_1 + 1.049735449735447e+00*G0_1_0 + 2.099470899470895e+00*G0_1_1;
    block[177] = 1.354497354497358e-01*G0_0_0 - 3.386243386243384e-01*G0_0_1 - 3.386243386243369e-01*G0_1_0;
    block[178] = 1.354497354497338e-01*G0_0_0 + 1.286772486772483e+00*G0_0_1 + 1.286772486772483e+00*G0_1_0;
    block[179] = 1.354497354497362e-01*G0_0_0 - 3.386243386243373e-01*G0_0_1 - 3.386243386243367e-01*G0_1_0;
    block[180] = -8.465608465608404e-02*G0_0_0 - 8.465608465608379e-02*G0_0_1 - 8.465608465608532e-02*G0_1_0 - 8.465608465608490e-02*G0_1_1;
    block[181] = -8.465608465608479e-02*G0_0_0;
    block[182] = -8.465608465608629e-02*G0_1_1;
    block[183] = 8.126984126984090e-01*G0_0_0 + 3.386243386243363e-01*G0_0_1 + 3.386243386243339e-01*G0_1_0;
    block[184] = 4.063492063492061e-01*G0_0_0 + 4.571428571428555e-01*G0_0_1 + 4.571428571428601e-01*G0_1_0 + 4.063492063492057e-01*G0_1_1;
    block[185] = 3.386243386243371e-01*G0_0_1 + 3.386243386243359e-01*G0_1_0 + 8.126984126984125e-01*G0_1_1;
    block[186] = -3.386243386243368e-01*G0_0_1 - 3.386243386243357e-01*G0_1_0 + 1.354497354497388e-01*G0_1_1;
    block[187] = 4.063492063492040e-01*G0_0_0 + 1.574603174603174e+00*G0_0_1 + 1.574603174603171e+00*G0_1_0 - 1.015873015873036e-01*G0_1_1;
    block[188] = -2.438095238095235e+00*G0_0_0 - 1.151322751322752e+00*G0_0_1 - 1.151322751322749e+00*G0_1_0 + 1.354497354497366e-01*G0_1_1;
    block[189] = 1.354497354497350e-01*G0_0_0 - 1.151322751322750e+00*G0_0_1 - 1.151322751322749e+00*G0_1_0 - 2.438095238095238e+00*G0_1_1;
    block[190] = -1.015873015873019e-01*G0_0_0 + 1.574603174603172e+00*G0_0_1 + 1.574603174603174e+00*G0_1_0 + 4.063492063492058e-01*G0_1_1;
    block[191] = 1.354497354497359e-01*G0_0_0 - 3.386243386243369e-01*G0_0_1 - 3.386243386243384e-01*G0_1_0;
    block[192] = 5.688888888888885e+00*G0_0_0 + 2.844444444444441e+00*G0_0_1 + 2.844444444444441e+00*G0_1_0 + 5.688888888888885e+00*G0_1_1;
    block[193] = -4.063492063492056e+00*G0_0_0 - 2.031746031746026e+00*G0_0_1 - 2.031746031746025e+00*G0_1_0 - 8.126984126984103e-01*G0_1_1;
    block[194] = -8.126984126984093e-01*G0_0_0 - 2.031746031746029e+00*G0_0_1 - 2.031746031746031e+00*G0_1_0 - 4.063492063492060e+00*G0_1_1;
    block[195] = -8.465608465608469e-02*G0_0_0 - 8.465608465608489e-02*G0_0_1 - 8.465608465608436e-02*G0_1_0 - 8.465608465608448e-02*G0_1_1;
    block[196] = -8.465608465608396e-02*G0_0_0;
    block[197] = -8.465608465608543e-02*G0_1_1;
    block[198] = -2.438095238095232e+00*G0_0_0 - 1.286772486772483e+00*G0_0_1 - 1.286772486772483e+00*G0_1_0;
    block[199] = 4.063492063492049e-01*G0_0_0 - 1.168253968253965e+00*G0_0_1 - 1.168253968253963e+00*G0_1_0 - 2.844444444444437e+00*G0_1_1;
    block[200] = 3.386243386243395e-01*G0_0_1 + 3.386243386243363e-01*G0_1_0 + 8.126984126984116e-01*G0_1_1;
    block[201] = -3.386243386243408e-01*G0_0_1 - 3.386243386243366e-01*G0_1_0 + 1.354497354497352e-01*G0_1_1;
    block[202] = 4.063492063492093e-01*G0_0_0 - 5.079365079364982e-02*G0_0_1 - 5.079365079364996e-02*G0_1_0 - 1.015873015873010e-01*G0_1_1;
    block[203] = 8.126984126984094e-01*G0_0_0 + 4.740740740740740e-01*G0_0_1 + 4.740740740740718e-01*G0_1_0 + 1.354497354497344e-01*G0_1_1;
    block[204] = 1.354497354497342e-01*G0_0_0 + 4.740740740740705e-01*G0_0_1 + 4.740740740740725e-01*G0_1_0 + 8.126984126984096e-01*G0_1_1;
    block[205] = -1.015873015872986e-01*G0_0_0 - 1.676190476190472e+00*G0_0_1 - 1.676190476190471e+00*G0_1_0 - 2.844444444444438e+00*G0_1_1;
    block[206] = 1.354497354497339e-01*G0_0_0 + 1.286772486772483e+00*G0_0_1 + 1.286772486772483e+00*G0_1_0;
    block[207] = -4.063492063492056e+00*G0_0_0 - 2.031746031746025e+00*G0_0_1 - 2.031746031746026e+00*G0_1_0 - 8.126984126984103e-01*G0_1_1;
    block[208] = 5.688888888888877e+00*G0_0_0 + 2.844444444444436e+00*G0_0_1 + 2.844444444444436e+00*G0_1_0 + 5.688888888888873e+00*G0_1_1;
    block[209] = -8.126984126984145e-01*G0_0_0 + 1.219047619047614e+00*G0_0_1 + 1.219047619047613e+00*G0_1_0 - 8.126984126984098e-01*G0_1_1;
    block[210] = -8.465608465608382e-02*G0_0_0 - 8.465608465608414e-02*G0_0_1 - 8.465608465608410e-02*G0_1_0 - 8.465608465608451e-02*G0_1_1;
    block[211] = -8.465608465608526e-02*G0_0_0;
    block[212] = -8.465608465608344e-02*G0_1_1;
    block[213] = 8.126984126984129e-01*G0_0_0 + 3.386243386243373e-01*G0_0_1 + 3.386243386243415e-01*G0_1_0;
    block[214] = -2.844444444444439e+00*G0_0_0 - 1.168253968253963e+00*G0_0_1 - 1.168253968253972e+00*G0_1_0 + 4.063492063492045e-01*G0_1_1;
    block[215] = -1.286772486772488e+00*G0_0_1 - 1.286772486772484e+00*G0_1_0 - 2.438095238095237e+00*G0_1_1;
    block[216] = 1.286772486772485e+00*G0_0_1 + 1.286772486772484e+00*G0_1_0 + 1.354497354497331e-01*G0_1_1;
    block[217] = -2.844444444444441e+00*G0_0_0 - 1.676190476190473e+00*G0_0_1 - 1.676190476190473e+00*G0_1_0 - 1.015873015872999e-01*G0_1_1;
    block[218] = 8.126984126984109e-01*G0_0_0 + 4.740740740740718e-01*G0_0_1 + 4.740740740740729e-01*G0_1_0 + 1.354497354497347e-01*G0_1_1;
    block[219] = 1.354497354497342e-01*G0_0_0 + 4.740740740740750e-01*G0_0_1 + 4.740740740740724e-01*G0_1_0 + 8.126984126984135e-01*G0_1_1;
    block[220] = -1.015873015873014e-01*G0_0_0 - 5.079365079365141e-02*G0_0_1 - 5.079365079365120e-02*G0_1_0 + 4.063492063492044e-01*G0_1_1;
    block[221] = 1.354497354497362e-01*G0_0_0 - 3.386243386243367e-01*G0_0_1 - 3.386243386243373e-01*G0_1_0;
    block[222] = -8.126984126984094e-01*G0_0_0 - 2.031746031746031e+00*G0_0_1 - 2.031746031746029e+00*G0_1_0 - 4.063492063492060e+00*G0_1_1;
    block[223] = -8.126984126984144e-01*G0_0_0 + 1.219047619047613e+00*G0_0_1 + 1.219047619047614e+00*G0_1_0 - 8.126984126984098e-01*G0_1_1;
    block[224] = 5.688888888888879e+00*G0_0_0 + 2.844444444444445e+00*G0_0_1 + 2.844444444444445e+00*G0_1_0 + 5.688888888888883e+00*G0_1_1;
  }

};

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class LinearForm : public dolfin::LinearForm
{
public:
    
  class TestElement : public dolfin::FiniteElement
  {
  public:

    TestElement() : dolfin::FiniteElement(), tensordims(0)
    {
      // Do nothing
    }

    ~TestElement()
    {
      if ( tensordims ) delete [] tensordims;
    }

    inline unsigned int spacedim() const
    {
      return 15;
    }

    inline unsigned int shapedim() const
    {
      return 2;
    }

    inline unsigned int tensordim(unsigned int i) const
    {
      dolfin_error("Element is scalar.");
      return 0;
    }

    inline unsigned int rank() const
    {
      return 0;
    }

    void dofmap(int dofs[], const Cell& cell, const Mesh& mesh) const
    {
      static unsigned int edge_reordering[2][3] = {{0, 1, 2}, {2, 1, 0}};
      dofs[0] = cell.nodeID(0);
      dofs[1] = cell.nodeID(1);
      dofs[2] = cell.nodeID(2);
      int alignment = cell.edgeAlignment(0);
      int offset = mesh.noNodes();
      dofs[3] = offset + 3*cell.edgeID(0) + edge_reordering[alignment][0];
      dofs[4] = offset + 3*cell.edgeID(0) + edge_reordering[alignment][1];
      dofs[5] = offset + 3*cell.edgeID(0) + edge_reordering[alignment][2];
      alignment = cell.edgeAlignment(1);
      dofs[6] = offset + 3*cell.edgeID(1) + edge_reordering[alignment][0];
      dofs[7] = offset + 3*cell.edgeID(1) + edge_reordering[alignment][1];
      dofs[8] = offset + 3*cell.edgeID(1) + edge_reordering[alignment][2];
      alignment = cell.edgeAlignment(2);
      dofs[9] = offset + 3*cell.edgeID(2) + edge_reordering[alignment][0];
      dofs[10] = offset + 3*cell.edgeID(2) + edge_reordering[alignment][1];
      dofs[11] = offset + 3*cell.edgeID(2) + edge_reordering[alignment][2];
      offset = offset + 3*mesh.noEdges();
      dofs[12] = offset + 3*cell.id() + 0;
      dofs[13] = offset + 3*cell.id() + 1;
      dofs[14] = offset + 3*cell.id() + 2;
    }

    void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
    {
      points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
      points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
      points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
      points[3] = map(7.500000000000000e-01, 2.500000000000000e-01);
      points[4] = map(5.000000000000000e-01, 5.000000000000000e-01);
      points[5] = map(2.500000000000000e-01, 7.500000000000000e-01);
      points[6] = map(0.000000000000000e+00, 7.500000000000000e-01);
      points[7] = map(0.000000000000000e+00, 5.000000000000000e-01);
      points[8] = map(0.000000000000000e+00, 2.500000000000000e-01);
      points[9] = map(2.500000000000000e-01, 0.000000000000000e+00);
      points[10] = map(5.000000000000000e-01, 0.000000000000000e+00);
      points[11] = map(7.500000000000000e-01, 0.000000000000000e+00);
      points[12] = map(2.500000000000000e-01, 2.500000000000000e-01);
      points[13] = map(5.000000000000000e-01, 2.500000000000000e-01);
      points[14] = map(2.500000000000000e-01, 5.000000000000000e-01);
      components[0] = 0;
      components[1] = 0;
      components[2] = 0;
      components[3] = 0;
      components[4] = 0;
      components[5] = 0;
      components[6] = 0;
      components[7] = 0;
      components[8] = 0;
      components[9] = 0;
      components[10] = 0;
      components[11] = 0;
      components[12] = 0;
      components[13] = 0;
      components[14] = 0;
    }

    void vertexeval(real values[], unsigned int vertex, const Vector& x, const Mesh& mesh) const
    {
      // FIXME: Temporary fix for Lagrange elements
      values[0] = x(vertex);
    }

  private:

    unsigned int* tensordims;

  };
    
  class FunctionElement_0 : public dolfin::FiniteElement
  {
  public:

    FunctionElement_0() : dolfin::FiniteElement(), tensordims(0)
    {
      // Do nothing
    }

    ~FunctionElement_0()
    {
      if ( tensordims ) delete [] tensordims;
    }

    inline unsigned int spacedim() const
    {
      return 15;
    }

    inline unsigned int shapedim() const
    {
      return 2;
    }

    inline unsigned int tensordim(unsigned int i) const
    {
      dolfin_error("Element is scalar.");
      return 0;
    }

    inline unsigned int rank() const
    {
      return 0;
    }

    void dofmap(int dofs[], const Cell& cell, const Mesh& mesh) const
    {
      static unsigned int edge_reordering[2][3] = {{0, 1, 2}, {2, 1, 0}};
      dofs[0] = cell.nodeID(0);
      dofs[1] = cell.nodeID(1);
      dofs[2] = cell.nodeID(2);
      int alignment = cell.edgeAlignment(0);
      int offset = mesh.noNodes();
      dofs[3] = offset + 3*cell.edgeID(0) + edge_reordering[alignment][0];
      dofs[4] = offset + 3*cell.edgeID(0) + edge_reordering[alignment][1];
      dofs[5] = offset + 3*cell.edgeID(0) + edge_reordering[alignment][2];
      alignment = cell.edgeAlignment(1);
      dofs[6] = offset + 3*cell.edgeID(1) + edge_reordering[alignment][0];
      dofs[7] = offset + 3*cell.edgeID(1) + edge_reordering[alignment][1];
      dofs[8] = offset + 3*cell.edgeID(1) + edge_reordering[alignment][2];
      alignment = cell.edgeAlignment(2);
      dofs[9] = offset + 3*cell.edgeID(2) + edge_reordering[alignment][0];
      dofs[10] = offset + 3*cell.edgeID(2) + edge_reordering[alignment][1];
      dofs[11] = offset + 3*cell.edgeID(2) + edge_reordering[alignment][2];
      offset = offset + 3*mesh.noEdges();
      dofs[12] = offset + 3*cell.id() + 0;
      dofs[13] = offset + 3*cell.id() + 1;
      dofs[14] = offset + 3*cell.id() + 2;
    }

    void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
    {
      points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
      points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
      points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
      points[3] = map(7.500000000000000e-01, 2.500000000000000e-01);
      points[4] = map(5.000000000000000e-01, 5.000000000000000e-01);
      points[5] = map(2.500000000000000e-01, 7.500000000000000e-01);
      points[6] = map(0.000000000000000e+00, 7.500000000000000e-01);
      points[7] = map(0.000000000000000e+00, 5.000000000000000e-01);
      points[8] = map(0.000000000000000e+00, 2.500000000000000e-01);
      points[9] = map(2.500000000000000e-01, 0.000000000000000e+00);
      points[10] = map(5.000000000000000e-01, 0.000000000000000e+00);
      points[11] = map(7.500000000000000e-01, 0.000000000000000e+00);
      points[12] = map(2.500000000000000e-01, 2.500000000000000e-01);
      points[13] = map(5.000000000000000e-01, 2.500000000000000e-01);
      points[14] = map(2.500000000000000e-01, 5.000000000000000e-01);
      components[0] = 0;
      components[1] = 0;
      components[2] = 0;
      components[3] = 0;
      components[4] = 0;
      components[5] = 0;
      components[6] = 0;
      components[7] = 0;
      components[8] = 0;
      components[9] = 0;
      components[10] = 0;
      components[11] = 0;
      components[12] = 0;
      components[13] = 0;
      components[14] = 0;
    }

    void vertexeval(real values[], unsigned int vertex, const Vector& x, const Mesh& mesh) const
    {
      // FIXME: Temporary fix for Lagrange elements
      values[0] = x(vertex);
    }

  private:

    unsigned int* tensordims;

  };

  LinearForm(Function& w0) : dolfin::LinearForm(1)
  {
    // Create finite element for test space
    _test = new TestElement();
        
    // Add functions
    add(w0, new FunctionElement_0());
  }

  void eval(real block[], const AffineMap& map) const
  {
    // Compute geometry tensors
    real G0_0 = map.det*c[0][0];
    real G0_1 = map.det*c[0][1];
    real G0_2 = map.det*c[0][2];
    real G0_3 = map.det*c[0][3];
    real G0_4 = map.det*c[0][4];
    real G0_5 = map.det*c[0][5];
    real G0_6 = map.det*c[0][6];
    real G0_7 = map.det*c[0][7];
    real G0_8 = map.det*c[0][8];
    real G0_9 = map.det*c[0][9];
    real G0_10 = map.det*c[0][10];
    real G0_11 = map.det*c[0][11];
    real G0_12 = map.det*c[0][12];
    real G0_13 = map.det*c[0][13];
    real G0_14 = map.det*c[0][14];

    // Compute element tensor
    block[0] = 2.557319223985879e-03*G0_0 - 2.380952380952369e-04*G0_1 - 2.380952380952368e-04*G0_2 - 9.876543209876504e-04*G0_3 - 1.058201058201065e-04*G0_4 - 9.876543209876494e-04*G0_5 - 7.054673721340338e-04*G0_7 + 1.410934744268069e-03*G0_8 + 1.410934744268071e-03*G0_9 - 7.054673721340344e-04*G0_10 + 1.410934744268076e-03*G0_12 - 1.410934744268072e-03*G0_13 - 1.410934744268071e-03*G0_14;
    block[1] = -2.380952380952369e-04*G0_0 + 2.557319223985875e-03*G0_1 - 2.380952380952366e-04*G0_2 + 1.410934744268060e-03*G0_3 - 7.054673721340282e-04*G0_4 - 9.876543209876509e-04*G0_6 - 1.058201058201078e-04*G0_7 - 9.876543209876524e-04*G0_8 - 7.054673721340316e-04*G0_10 + 1.410934744268064e-03*G0_11 - 1.410934744268073e-03*G0_12 + 1.410934744268065e-03*G0_13 - 1.410934744268072e-03*G0_14;
    block[2] = -2.380952380952368e-04*G0_0 - 2.380952380952366e-04*G0_1 + 2.557319223985878e-03*G0_2 - 7.054673721340346e-04*G0_4 + 1.410934744268069e-03*G0_5 + 1.410934744268069e-03*G0_6 - 7.054673721340343e-04*G0_7 - 9.876543209876489e-04*G0_9 - 1.058201058201052e-04*G0_10 - 9.876543209876496e-04*G0_11 - 1.410934744268071e-03*G0_12 - 1.410934744268074e-03*G0_13 + 1.410934744268069e-03*G0_14;
    block[3] = -9.876543209876504e-04*G0_0 + 1.410934744268061e-03*G0_1 + 2.257495590828913e-02*G0_3 - 1.128747795414457e-02*G0_4 + 6.772486772486740e-03*G0_5 + 4.514991181657822e-03*G0_6 + 5.643738977072318e-04*G0_7 + 2.257495590828911e-03*G0_8 + 4.514991181657823e-03*G0_9 - 8.465608465608428e-03*G0_10 + 1.128747795414456e-02*G0_11 - 2.257495590828918e-03*G0_12 + 1.128747795414457e-02*G0_13 + 2.257495590828913e-03*G0_14;
    block[4] = -1.058201058201065e-04*G0_0 - 7.054673721340282e-04*G0_1 - 7.054673721340345e-04*G0_2 - 1.128747795414457e-02*G0_3 + 2.793650793650778e-02*G0_4 - 1.128747795414456e-02*G0_5 - 8.465608465608414e-03*G0_6 + 4.232804232804114e-04*G0_7 + 5.643738977072396e-04*G0_8 + 5.643738977072407e-04*G0_9 + 4.232804232804159e-04*G0_10 - 8.465608465608412e-03*G0_11 - 6.772486772486737e-03*G0_12 + 3.386243386243380e-03*G0_13 + 3.386243386243376e-03*G0_14;
    block[5] = -9.876543209876494e-04*G0_0 + 1.410934744268069e-03*G0_2 + 6.772486772486740e-03*G0_3 - 1.128747795414456e-02*G0_4 + 2.257495590828913e-02*G0_5 + 1.128747795414456e-02*G0_6 - 8.465608465608418e-03*G0_7 + 4.514991181657818e-03*G0_8 + 2.257495590828901e-03*G0_9 + 5.643738977072281e-04*G0_10 + 4.514991181657819e-03*G0_11 - 2.257495590828932e-03*G0_12 + 2.257495590828919e-03*G0_13 + 1.128747795414456e-02*G0_14;
    block[6] = -9.876543209876509e-04*G0_1 + 1.410934744268068e-03*G0_2 + 4.514991181657822e-03*G0_3 - 8.465608465608412e-03*G0_4 + 1.128747795414456e-02*G0_5 + 2.257495590828913e-02*G0_6 - 1.128747795414456e-02*G0_7 + 6.772486772486736e-03*G0_8 + 4.514991181657816e-03*G0_9 + 5.643738977072267e-04*G0_10 + 2.257495590828904e-03*G0_11 + 2.257495590828903e-03*G0_12 - 2.257495590828914e-03*G0_13 + 1.128747795414457e-02*G0_14;
    block[7] = -7.054673721340335e-04*G0_0 - 1.058201058201077e-04*G0_1 - 7.054673721340342e-04*G0_2 + 5.643738977072319e-04*G0_3 + 4.232804232804110e-04*G0_4 - 8.465608465608418e-03*G0_5 - 1.128747795414456e-02*G0_6 + 2.793650793650780e-02*G0_7 - 1.128747795414456e-02*G0_8 - 8.465608465608416e-03*G0_9 + 4.232804232804242e-04*G0_10 + 5.643738977072328e-04*G0_11 + 3.386243386243394e-03*G0_12 - 6.772486772486733e-03*G0_13 + 3.386243386243359e-03*G0_14;
    block[8] = 1.410934744268069e-03*G0_0 - 9.876543209876524e-04*G0_1 + 2.257495590828911e-03*G0_3 + 5.643738977072392e-04*G0_4 + 4.514991181657818e-03*G0_5 + 6.772486772486736e-03*G0_6 - 1.128747795414456e-02*G0_7 + 2.257495590828915e-02*G0_8 + 1.128747795414456e-02*G0_9 - 8.465608465608435e-03*G0_10 + 4.514991181657825e-03*G0_11 + 1.128747795414457e-02*G0_12 - 2.257495590828928e-03*G0_13 + 2.257495590828921e-03*G0_14;
    block[9] = 1.410934744268071e-03*G0_0 - 9.876543209876491e-04*G0_2 + 4.514991181657823e-03*G0_3 + 5.643738977072405e-04*G0_4 + 2.257495590828901e-03*G0_5 + 4.514991181657816e-03*G0_6 - 8.465608465608416e-03*G0_7 + 1.128747795414456e-02*G0_8 + 2.257495590828913e-02*G0_9 - 1.128747795414457e-02*G0_10 + 6.772486772486730e-03*G0_11 + 1.128747795414455e-02*G0_12 + 2.257495590828904e-03*G0_13 - 2.257495590828907e-03*G0_14;
    block[10] = -7.054673721340344e-04*G0_0 - 7.054673721340318e-04*G0_1 - 1.058201058201050e-04*G0_2 - 8.465608465608428e-03*G0_3 + 4.232804232804160e-04*G0_4 + 5.643738977072278e-04*G0_5 + 5.643738977072262e-04*G0_6 + 4.232804232804243e-04*G0_7 - 8.465608465608433e-03*G0_8 - 1.128747795414457e-02*G0_9 + 2.793650793650780e-02*G0_10 - 1.128747795414457e-02*G0_11 + 3.386243386243359e-03*G0_12 + 3.386243386243362e-03*G0_13 - 6.772486772486746e-03*G0_14;
    block[11] = 1.410934744268064e-03*G0_1 - 9.876543209876496e-04*G0_2 + 1.128747795414456e-02*G0_3 - 8.465608465608412e-03*G0_4 + 4.514991181657819e-03*G0_5 + 2.257495590828904e-03*G0_6 + 5.643738977072322e-04*G0_7 + 4.514991181657825e-03*G0_8 + 6.772486772486729e-03*G0_9 - 1.128747795414457e-02*G0_10 + 2.257495590828913e-02*G0_11 + 2.257495590828903e-03*G0_12 + 1.128747795414456e-02*G0_13 - 2.257495590828913e-03*G0_14;
    block[12] = 1.410934744268076e-03*G0_0 - 1.410934744268072e-03*G0_1 - 1.410934744268071e-03*G0_2 - 2.257495590828919e-03*G0_3 - 6.772486772486737e-03*G0_4 - 2.257495590828932e-03*G0_5 + 2.257495590828904e-03*G0_6 + 3.386243386243394e-03*G0_7 + 1.128747795414457e-02*G0_8 + 1.128747795414455e-02*G0_9 + 3.386243386243360e-03*G0_10 + 2.257495590828902e-03*G0_11 + 9.481481481481448e-02*G0_12 - 1.354497354497348e-02*G0_13 - 1.354497354497348e-02*G0_14;
    block[13] = -1.410934744268072e-03*G0_0 + 1.410934744268065e-03*G0_1 - 1.410934744268074e-03*G0_2 + 1.128747795414456e-02*G0_3 + 3.386243386243381e-03*G0_4 + 2.257495590828919e-03*G0_5 - 2.257495590828914e-03*G0_6 - 6.772486772486733e-03*G0_7 - 2.257495590828928e-03*G0_8 + 2.257495590828903e-03*G0_9 + 3.386243386243362e-03*G0_10 + 1.128747795414456e-02*G0_11 - 1.354497354497348e-02*G0_12 + 9.481481481481445e-02*G0_13 - 1.354497354497348e-02*G0_14;
    block[14] = -1.410934744268071e-03*G0_0 - 1.410934744268072e-03*G0_1 + 1.410934744268069e-03*G0_2 + 2.257495590828913e-03*G0_3 + 3.386243386243378e-03*G0_4 + 1.128747795414457e-02*G0_5 + 1.128747795414457e-02*G0_6 + 3.386243386243361e-03*G0_7 + 2.257495590828921e-03*G0_8 - 2.257495590828906e-03*G0_9 - 6.772486772486746e-03*G0_10 - 2.257495590828914e-03*G0_11 - 1.354497354497348e-02*G0_12 - 1.354497354497348e-02*G0_13 + 9.481481481481437e-02*G0_14;
  }

};

} }

#endif
