// Automatically generated by FFC, the FEniCS Form Compiler, version 0.2.1.
// For further information, go to http://www/fenics.org/ffc/.
// Licensed under the GNU GPL Version 2.

#ifndef __POISSON2D_2_H
#define __POISSON2D_2_H

#include <dolfin/Mesh.h>
#include <dolfin/Cell.h>
#include <dolfin/Point.h>
#include <dolfin/Vector.h>
#include <dolfin/AffineMap.h>
#include <dolfin/FiniteElement.h>
#include <dolfin/LinearForm.h>
#include <dolfin/BilinearForm.h>

namespace dolfin { namespace Poisson2D_2 {

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class BilinearForm : public dolfin::BilinearForm
{
public:
  
  class TestElement : public dolfin::FiniteElement
  {
  public:
  
    TestElement() : dolfin::FiniteElement(), tensordims(0)
    {
      // Do nothing
    }
  
    ~TestElement()
    {
      if ( tensordims ) delete [] tensordims;
    }
  
    inline unsigned int spacedim() const
    {
      return 6;
    }
  
    inline unsigned int shapedim() const
    {
      return 2;
    }
  
    inline unsigned int tensordim(unsigned int i) const
    {
      dolfin_error("Element is scalar.");
      return 0;
    }
  
    inline unsigned int rank() const
    {
      return 0;
    }
  
    void dofmap(int dofs[], const Cell& cell, const Mesh& mesh) const
    {
      dofs[0] = cell.nodeID(0);
      dofs[1] = cell.nodeID(1);
      dofs[2] = cell.nodeID(2);
      int offset = mesh.noNodes();
      dofs[3] = offset + cell.edgeID(0);
      dofs[4] = offset + cell.edgeID(1);
      dofs[5] = offset + cell.edgeID(2);
    }
  
    void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
    {
      points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
      points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
      points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
      points[3] = map(5.000000000000000e-01, 5.000000000000000e-01);
      points[4] = map(0.000000000000000e+00, 5.000000000000000e-01);
      points[5] = map(5.000000000000000e-01, 0.000000000000000e+00);
      components[0] = 0;
      components[1] = 0;
      components[2] = 0;
      components[3] = 0;
      components[4] = 0;
      components[5] = 0;
    }
  
    void vertexeval(real values[], unsigned int vertex, const Vector& x, const Mesh& mesh) const
    {
      // FIXME: Temporary fix for Lagrange elements
      values[0] = x(vertex);
    }
  
  private:
  
    unsigned int* tensordims;
  
  };
    
  class TrialElement : public dolfin::FiniteElement
  {
  public:
  
    TrialElement() : dolfin::FiniteElement(), tensordims(0)
    {
      // Do nothing
    }
  
    ~TrialElement()
    {
      if ( tensordims ) delete [] tensordims;
    }
  
    inline unsigned int spacedim() const
    {
      return 6;
    }
  
    inline unsigned int shapedim() const
    {
      return 2;
    }
  
    inline unsigned int tensordim(unsigned int i) const
    {
      dolfin_error("Element is scalar.");
      return 0;
    }
  
    inline unsigned int rank() const
    {
      return 0;
    }
  
    void dofmap(int dofs[], const Cell& cell, const Mesh& mesh) const
    {
      dofs[0] = cell.nodeID(0);
      dofs[1] = cell.nodeID(1);
      dofs[2] = cell.nodeID(2);
      int offset = mesh.noNodes();
      dofs[3] = offset + cell.edgeID(0);
      dofs[4] = offset + cell.edgeID(1);
      dofs[5] = offset + cell.edgeID(2);
    }
  
    void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
    {
      points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
      points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
      points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
      points[3] = map(5.000000000000000e-01, 5.000000000000000e-01);
      points[4] = map(0.000000000000000e+00, 5.000000000000000e-01);
      points[5] = map(5.000000000000000e-01, 0.000000000000000e+00);
      components[0] = 0;
      components[1] = 0;
      components[2] = 0;
      components[3] = 0;
      components[4] = 0;
      components[5] = 0;
    }
  
    void vertexeval(real values[], unsigned int vertex, const Vector& x, const Mesh& mesh) const
    {
      // FIXME: Temporary fix for Lagrange elements
      values[0] = x(vertex);
    }
  
  private:
  
    unsigned int* tensordims;
  
  };
  
  BilinearForm() : dolfin::BilinearForm(0)
  {
    // Create finite element for test space
    _test = new TestElement();

    // Create finite element for trial space
    _trial = new TrialElement();
  }

  void eval(real block[], const AffineMap& map) const
  {
    // Compute geometry tensors
    real G0_0_0 = map.det*(map.g00*map.g00 + map.g01*map.g01);
    real G0_0_1 = map.det*(map.g00*map.g10 + map.g01*map.g11);
    real G0_1_0 = map.det*(map.g10*map.g00 + map.g11*map.g01);
    real G0_1_1 = map.det*(map.g10*map.g10 + map.g11*map.g11);

    // Compute element tensor
    block[0] = 4.999999999999992e-01*G0_0_0 + 4.999999999999991e-01*G0_0_1 + 4.999999999999991e-01*G0_1_0 + 4.999999999999991e-01*G0_1_1;
    block[1] = 1.666666666666663e-01*G0_0_0 + 1.666666666666664e-01*G0_1_0;
    block[2] = 1.666666666666665e-01*G0_0_1 + 1.666666666666665e-01*G0_1_1;
    block[3] = 0.000000000000000e+00;
    block[4] = -6.666666666666657e-01*G0_0_1 - 6.666666666666656e-01*G0_1_1;
    block[5] = -6.666666666666655e-01*G0_0_0 - 6.666666666666655e-01*G0_1_0;
    block[6] = 1.666666666666663e-01*G0_0_0 + 1.666666666666664e-01*G0_0_1;
    block[7] = 4.999999999999992e-01*G0_0_0;
    block[8] = -1.666666666666664e-01*G0_0_1;
    block[9] = 6.666666666666654e-01*G0_0_1;
    block[10] = 0.000000000000000e+00;
    block[11] = -6.666666666666654e-01*G0_0_0 - 6.666666666666656e-01*G0_0_1;
    block[12] = 1.666666666666665e-01*G0_1_0 + 1.666666666666665e-01*G0_1_1;
    block[13] = -1.666666666666664e-01*G0_1_0;
    block[14] = 4.999999999999991e-01*G0_1_1;
    block[15] = 6.666666666666653e-01*G0_1_0;
    block[16] = -6.666666666666654e-01*G0_1_0 - 6.666666666666656e-01*G0_1_1;
    block[17] = 0.000000000000000e+00;
    block[18] = 0.000000000000000e+00;
    block[19] = 6.666666666666654e-01*G0_1_0;
    block[20] = 6.666666666666653e-01*G0_0_1;
    block[21] = 1.333333333333330e+00*G0_0_0 + 6.666666666666652e-01*G0_0_1 + 6.666666666666652e-01*G0_1_0 + 1.333333333333330e+00*G0_1_1;
    block[22] = -1.333333333333331e+00*G0_0_0 - 6.666666666666656e-01*G0_0_1 - 6.666666666666653e-01*G0_1_0;
    block[23] = -6.666666666666652e-01*G0_0_1 - 6.666666666666653e-01*G0_1_0 - 1.333333333333331e+00*G0_1_1;
    block[24] = -6.666666666666656e-01*G0_1_0 - 6.666666666666656e-01*G0_1_1;
    block[25] = 0.000000000000000e+00;
    block[26] = -6.666666666666654e-01*G0_0_1 - 6.666666666666659e-01*G0_1_1;
    block[27] = -1.333333333333331e+00*G0_0_0 - 6.666666666666653e-01*G0_0_1 - 6.666666666666656e-01*G0_1_0;
    block[28] = 1.333333333333331e+00*G0_0_0 + 6.666666666666656e-01*G0_0_1 + 6.666666666666657e-01*G0_1_0 + 1.333333333333331e+00*G0_1_1;
    block[29] = 6.666666666666654e-01*G0_0_1 + 6.666666666666655e-01*G0_1_0;
    block[30] = -6.666666666666655e-01*G0_0_0 - 6.666666666666656e-01*G0_0_1;
    block[31] = -6.666666666666654e-01*G0_0_0 - 6.666666666666656e-01*G0_1_0;
    block[32] = 0.000000000000000e+00;
    block[33] = -6.666666666666652e-01*G0_0_1 - 6.666666666666653e-01*G0_1_0 - 1.333333333333331e+00*G0_1_1;
    block[34] = 6.666666666666657e-01*G0_0_1 + 6.666666666666654e-01*G0_1_0;
    block[35] = 1.333333333333331e+00*G0_0_0 + 6.666666666666656e-01*G0_0_1 + 6.666666666666656e-01*G0_1_0 + 1.333333333333331e+00*G0_1_1;
  }

};

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class LinearForm : public dolfin::LinearForm
{
public:
  
  class TestElement : public dolfin::FiniteElement
  {
  public:
  
    TestElement() : dolfin::FiniteElement(), tensordims(0)
    {
      // Do nothing
    }
  
    ~TestElement()
    {
      if ( tensordims ) delete [] tensordims;
    }
  
    inline unsigned int spacedim() const
    {
      return 6;
    }
  
    inline unsigned int shapedim() const
    {
      return 2;
    }
  
    inline unsigned int tensordim(unsigned int i) const
    {
      dolfin_error("Element is scalar.");
      return 0;
    }
  
    inline unsigned int rank() const
    {
      return 0;
    }
  
    void dofmap(int dofs[], const Cell& cell, const Mesh& mesh) const
    {
      dofs[0] = cell.nodeID(0);
      dofs[1] = cell.nodeID(1);
      dofs[2] = cell.nodeID(2);
      int offset = mesh.noNodes();
      dofs[3] = offset + cell.edgeID(0);
      dofs[4] = offset + cell.edgeID(1);
      dofs[5] = offset + cell.edgeID(2);
    }
  
    void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
    {
      points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
      points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
      points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
      points[3] = map(5.000000000000000e-01, 5.000000000000000e-01);
      points[4] = map(0.000000000000000e+00, 5.000000000000000e-01);
      points[5] = map(5.000000000000000e-01, 0.000000000000000e+00);
      components[0] = 0;
      components[1] = 0;
      components[2] = 0;
      components[3] = 0;
      components[4] = 0;
      components[5] = 0;
    }
  
    void vertexeval(real values[], unsigned int vertex, const Vector& x, const Mesh& mesh) const
    {
      // FIXME: Temporary fix for Lagrange elements
      values[0] = x(vertex);
    }
  
  private:
  
    unsigned int* tensordims;
  
  };
    
  class FunctionElement_0 : public dolfin::FiniteElement
  {
  public:
  
    FunctionElement_0() : dolfin::FiniteElement(), tensordims(0)
    {
      // Do nothing
    }
  
    ~FunctionElement_0()
    {
      if ( tensordims ) delete [] tensordims;
    }
  
    inline unsigned int spacedim() const
    {
      return 6;
    }
  
    inline unsigned int shapedim() const
    {
      return 2;
    }
  
    inline unsigned int tensordim(unsigned int i) const
    {
      dolfin_error("Element is scalar.");
      return 0;
    }
  
    inline unsigned int rank() const
    {
      return 0;
    }
  
    void dofmap(int dofs[], const Cell& cell, const Mesh& mesh) const
    {
      dofs[0] = cell.nodeID(0);
      dofs[1] = cell.nodeID(1);
      dofs[2] = cell.nodeID(2);
      int offset = mesh.noNodes();
      dofs[3] = offset + cell.edgeID(0);
      dofs[4] = offset + cell.edgeID(1);
      dofs[5] = offset + cell.edgeID(2);
    }
  
    void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
    {
      points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
      points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
      points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
      points[3] = map(5.000000000000000e-01, 5.000000000000000e-01);
      points[4] = map(0.000000000000000e+00, 5.000000000000000e-01);
      points[5] = map(5.000000000000000e-01, 0.000000000000000e+00);
      components[0] = 0;
      components[1] = 0;
      components[2] = 0;
      components[3] = 0;
      components[4] = 0;
      components[5] = 0;
    }
  
    void vertexeval(real values[], unsigned int vertex, const Vector& x, const Mesh& mesh) const
    {
      // FIXME: Temporary fix for Lagrange elements
      values[0] = x(vertex);
    }
  
  private:
  
    unsigned int* tensordims;
  
  };
  
  LinearForm(Function& w0) : dolfin::LinearForm(1)
  {
    // Create finite element for test space
    _test = new TestElement();

    // Add functions
    add(w0, new FunctionElement_0());
  }

  void eval(real block[], const AffineMap& map) const
  {
    // Compute geometry tensors
    real G0_0 = map.det*c[0][0];
    real G0_1 = map.det*c[0][1];
    real G0_2 = map.det*c[0][2];
    real G0_3 = map.det*c[0][3];
    real G0_4 = map.det*c[0][4];
    real G0_5 = map.det*c[0][5];

    // Compute element tensor
    block[0] = 1.666666666666665e-02*G0_0 - 2.777777777777774e-03*G0_1 - 2.777777777777775e-03*G0_2 - 1.111111111111110e-02*G0_3;
    block[1] = -2.777777777777774e-03*G0_0 + 1.666666666666665e-02*G0_1 - 2.777777777777776e-03*G0_2 - 1.111111111111111e-02*G0_4;
    block[2] = -2.777777777777775e-03*G0_0 - 2.777777777777776e-03*G0_1 + 1.666666666666666e-02*G0_2 - 1.111111111111111e-02*G0_5;
    block[3] = -1.111111111111110e-02*G0_0 + 8.888888888888882e-02*G0_3 + 4.444444444444443e-02*G0_4 + 4.444444444444443e-02*G0_5;
    block[4] = -1.111111111111111e-02*G0_1 + 4.444444444444443e-02*G0_3 + 8.888888888888884e-02*G0_4 + 4.444444444444442e-02*G0_5;
    block[5] = -1.111111111111111e-02*G0_2 + 4.444444444444443e-02*G0_3 + 4.444444444444443e-02*G0_4 + 8.888888888888882e-02*G0_5;
  }

};

} }

#endif
