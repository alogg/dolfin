// Auto generated SWIG file for Python interface of DOLFIN
//
// Copyright (C) 2012 Kristian B. Oelgaard
//
// This file is part of DOLFIN.
//
// DOLFIN is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// DOLFIN is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with DOLFIN. If not, see <http://www.gnu.org/licenses/>.
//
// First added:  2012-01-18
// Last changed: 2012-03-09

// Autogenerated docstrings file, extracted from the DOLFIN source C++ files.

// Documentation extracted from: (module=mesh, header=CellType.h)
%feature("docstring")  dolfin::CellType "
This class provides a common interface for different cell types.
Each cell type implements mesh functionality that is specific to
a certain type of cell.
";

%feature("docstring")  dolfin::CellType::CellType "
Constructor
";

%feature("docstring")  dolfin::CellType::create "
**Overloaded versions**

* create\ (type)

  Create cell type from type (factory function)

* create\ (type)

  Create cell type from string (factory function)
";

%feature("docstring")  dolfin::CellType::string2type "
Convert from string to cell type
";

%feature("docstring")  dolfin::CellType::type2string "
Convert from cell type to string
";

%feature("docstring")  dolfin::CellType::cell_type "
Return type of cell
";

%feature("docstring")  dolfin::CellType::facet_type "
Return type of cell for facets
";

%feature("docstring")  dolfin::CellType::dim "
Return topological dimension of cell
";

%feature("docstring")  dolfin::CellType::num_entities "
Return number of entitites of given topological dimension
";

%feature("docstring")  dolfin::CellType::num_vertices "
Return number of vertices for entity of given topological dimension
";

%feature("docstring")  dolfin::CellType::orientation "
Return orientation of the cell
";

%feature("docstring")  dolfin::CellType::create_entities "
Create entities e of given topological dimension from vertices v
";

%feature("docstring")  dolfin::CellType::refine_cell "
Refine cell uniformly
";

%feature("docstring")  dolfin::CellType::volume "
Compute (generalized) volume of mesh entity
";

%feature("docstring")  dolfin::CellType::diameter "
Compute diameter of mesh entity
";

%feature("docstring")  dolfin::CellType::normal "
**Overloaded versions**

* normal\ (cell, facet, i)

  Compute component i of normal of given facet with respect to the cell

* normal\ (cell, facet)

  Compute of given facet with respect to the cell
";

%feature("docstring")  dolfin::CellType::facet_area "
Compute the area/length of given facet with respect to the cell
";

%feature("docstring")  dolfin::CellType::order "
Order entities locally
";

%feature("docstring")  dolfin::CellType::ordered "
Check if entities are ordered
";

%feature("docstring")  dolfin::CellType::description "
Return description of cell type
";

// Documentation extracted from: (module=mesh, header=MeshTopology.h)
%feature("docstring")  dolfin::MeshTopology "
MeshTopology stores the topology of a mesh, consisting of mesh entities
and connectivity (incidence relations for the mesh entities). Note that
the mesh entities don't need to be stored, only the number of entities
and the connectivity. Any numbering scheme for the mesh entities is
stored separately in a MeshFunction over the entities.

A mesh entity e may be identified globally as a pair e = (dim, i), where
dim is the topological dimension and i is the index of the entity within
that topological dimension.
";

%feature("docstring")  dolfin::MeshTopology::MeshTopology "
**Overloaded versions**

* MeshTopology\ ()

  Create empty mesh topology

* MeshTopology\ (topology)

  Copy constructor
";

%feature("docstring")  dolfin::MeshTopology::operator= "
Assignment
";

%feature("docstring")  dolfin::MeshTopology::dim "
Return topological dimension
";

%feature("docstring")  dolfin::MeshTopology::size "
Return number of entities for given dimension
";

%feature("docstring")  dolfin::MeshTopology::clear "
**Overloaded versions**

* clear\ ()

  Clear all data

* clear\ (d0, d1)

  Clear data for given pair of topological dimensions
";

%feature("docstring")  dolfin::MeshTopology::init "
**Overloaded versions**

* init\ (dim)

  Initialize topology of given maximum dimension

* init\ (dim, size)

  Set number of entities (size) for given topological dimension
";

%feature("docstring")  dolfin::MeshTopology::operator "
**Overloaded versions**

* operator\ (d0, d1)

  Return connectivity for given pair of topological dimensions

* operator\ (d0, d1)

  Return connectivity for given pair of topological dimensions
";

%feature("docstring")  dolfin::MeshTopology::str "
Return informal string representation (pretty-print)
";

// Documentation extracted from: (module=mesh, header=MeshGeometry.h)
%feature("docstring")  dolfin::MeshGeometry::MeshGeometry "
**Overloaded versions**

* MeshGeometry\ ()

  Create empty set of coordinates

* MeshGeometry\ (geometry)

  Copy constructor
";

%feature("docstring")  dolfin::MeshGeometry::operator= "
Assignment
";

%feature("docstring")  dolfin::MeshGeometry::dim "
Return Euclidean dimension of coordinate system
";

%feature("docstring")  dolfin::MeshGeometry::size "
Return number of coordinates
";

%feature("docstring")  dolfin::MeshGeometry::x "
**Overloaded versions**

* x\ (n, i)

  Return value of coordinate n in direction i

* x\ (n, i)

  Return value of coordinate n in direction i

* x\ (n)

  Return array of values for coordinate n

* x\ (n)

  Return array of values for coordinate n

* x\ ()

  Return array of values for all coordinates

* x\ ()

  Return array of values for all coordinates
";

%feature("docstring")  dolfin::MeshGeometry::higher_order_x "
**Overloaded versions**

* higher_order_x\ (n)

  Return array of values for higher order coordinate n

* higher_order_x\ (n)

  Return array of values for higher order coordinate n

* higher_order_x\ ()

  Return array of values for all higher order coordinates

* higher_order_x\ ()

  Return array of values for all higher order coordinates
";

%feature("docstring")  dolfin::MeshGeometry::num_higher_order_vertices_per_cell "
Return number of vertices used (per cell) to represent the higher order geometry
";

%feature("docstring")  dolfin::MeshGeometry::higher_order_cell "
**Overloaded versions**

* higher_order_cell\ (c)

  Return array of higher order vertex indices for a specific higher order cell

* higher_order_cell\ (c)

  Return array of higher order vertex indices for a specific higher order cell
";

%feature("docstring")  dolfin::MeshGeometry::higher_order_cells "
**Overloaded versions**

* higher_order_cells\ ()

  Return array of values for all higher order cell data

* higher_order_cells\ ()

  Return array of values for all higher order cell data
";

%feature("docstring")  dolfin::MeshGeometry::point "
Return coordinate n as a 3D point value
";

%feature("docstring")  dolfin::MeshGeometry::affine_cell_bool "
Return pointer to boolean affine indicator array
";

%feature("docstring")  dolfin::MeshGeometry::clear "
Clear all data
";

%feature("docstring")  dolfin::MeshGeometry::init "
Initialize coordinate list to given dimension and size
";

%feature("docstring")  dolfin::MeshGeometry::init_higher_order_vertices "
Initialize higher order coordinate list to given dimension and size
";

%feature("docstring")  dolfin::MeshGeometry::init_higher_order_cells "
Initialize higher order cell data list to given number of cells and dofs
";

%feature("docstring")  dolfin::MeshGeometry::init_affine_indicator "
Initialize the affine indicator array
";

%feature("docstring")  dolfin::MeshGeometry::set_affine_indicator "
set affine indicator at index i
";

%feature("docstring")  dolfin::MeshGeometry::set "
Set value of coordinate n in direction i
";

%feature("docstring")  dolfin::MeshGeometry::set_higher_order_coordinates "
Set value of higher order coordinate N in direction i
";

%feature("docstring")  dolfin::MeshGeometry::set_higher_order_cell_data "
Set higher order cell data for cell # N in direction i
";

%feature("docstring")  dolfin::MeshGeometry::str "
Return informal string representation (pretty-print)
";

// Documentation extracted from: (module=mesh, header=MeshDomains.h)
%feature("docstring")  dolfin::MeshDomains "
The class :py:class:`MeshDomains` stores the division of a :py:class:`Mesh` into
subdomains. For each topological dimension 0 <= d <= D, where D
is the topological dimension of the :py:class:`Mesh`, a set of integer
markers are stored for a subset of the entities of dimension d,
indicating for each entity in the subset the number of the
subdomain. It should be noted that the subset does not need to
contain all entities of any given dimension; entities not
contained in the subset are \"unmarked\".
";

%feature("docstring")  dolfin::MeshDomains::MeshDomains "
Create empty mesh domains
";

%feature("docstring")  dolfin::MeshDomains::dim "
Return maximal topological dimension of stored markers
";

%feature("docstring")  dolfin::MeshDomains::num_marked "
Return number of marked entities of given dimension
";

%feature("docstring")  dolfin::MeshDomains::is_empty "
Check whether domain data is empty
";

%feature("docstring")  dolfin::MeshDomains::markers "
**Overloaded versions**

* markers\ (dim)

  Get subdomain markers for given dimension

* markers\ (dim)

  Get subdomain markers for given dimension (const version)
";

%feature("docstring")  dolfin::MeshDomains::markers_shared_ptr "
**Overloaded versions**

* markers_shared_ptr\ (dim)

  Get subdomain markers for given dimension (shared pointer version)

* markers_shared_ptr\ (dim)

  Get subdomain markers for given dimension (const shared pointer version)
";

%feature("docstring")  dolfin::MeshDomains::cell_domains "
Get cell domains. This function computes the mesh function
corresponding to markers of dimension D. The mesh function is
cached for later access and will be computed on the first call
to this function.
";

%feature("docstring")  dolfin::MeshDomains::facet_domains "
Get facet domains. This function computes the mesh function
corresponding to markers of dimension D-1. The mesh function
is cached for later access and will be computed on the first
call to this function.
";

%feature("docstring")  dolfin::MeshDomains::init "
Initialize mesh domains for given topological dimension
";

%feature("docstring")  dolfin::MeshDomains::clear "
Clear all data
";

// Documentation extracted from: (module=mesh, header=MeshData.h)
%feature("docstring")  dolfin::MeshData "
The class MeshData is a container for auxiliary mesh data,
represented either as :py:class:`MeshFunction` over topological mesh
entities, arrays or maps. Each dataset is identified by a unique
user-specified string. Only uint-valued data are currently
supported.

Auxiliary mesh data may be attached to a mesh by users as a
convenient way to store data associated with a mesh. It is also
used internally by DOLFIN to communicate data associated with
meshes. The following named mesh data are recognized by DOLFIN:

Facet orientation (used for assembly over interior facets)

  * \"facet_orientation\"     - :py:class:`MeshFunction` <uint> of dimension D - 1

Sub meshes (used by the class SubMesh)

  * \"parent_vertex_indices\" - :py:class:`MeshFunction` <uint> of dimension 0

Note to developers: use underscore in names in place of spaces.
";

%feature("docstring")  dolfin::MeshData::MeshData "
Constructor
";

%feature("docstring")  dolfin::MeshData::operator= "
Assignment operator

*Arguments*
    data (:py:class:`MeshData`)
        Another MeshData object.
";

%feature("docstring")  dolfin::MeshData::clear "
Clear all data
";

%feature("docstring")  dolfin::MeshData::create_mesh_function "
**Overloaded versions**

* create_mesh_function\ (name)

  Create MeshFunction with given name (uninitialized)
  
  *Arguments*
      name (str)
          The name of the mesh function.
  
  *Returns*
      :py:class:`MeshFunction`
          The mesh function.

* create_mesh_function\ (name, dim)

  Create MeshFunction with given name and dimension
  
  *Arguments*
      name (str)
          The name of the mesh function.
      dim (int)
          The dimension of the mesh function.
  
  *Returns*
      :py:class:`MeshFunction`
          The mesh function.
";

%feature("docstring")  dolfin::MeshData::create_array "
**Overloaded versions**

* create_array\ (name)

  Create empty array (vector) with given name
  
  *Arguments*
      name (str)
          The name of the array.
  
  *Returns*
      numpy.array(int)
          The array.

* create_array\ (name, size)

  Create array (vector) with given name and size
  
  *Arguments*
      name (str)
          The name of the array.
      size (unit)
          The size (length) of the array.
  
  *Returns*
      numpy.array(int)
          The array.
";

%feature("docstring")  dolfin::MeshData::mesh_function "
Return MeshFunction with given name (returning zero if data is
not available)

*Arguments*
    name (str)
        The name of the MeshFunction.

*Returns*
    :py:class:`MeshFunction`
        The mesh function with given name
";

%feature("docstring")  dolfin::MeshData::array "
Return array with given name (returning zero if data is not
available)

*Arguments*
    name (str)
        The name of the array.

*Returns*
    numpy.array(int)
        The array.
";

%feature("docstring")  dolfin::MeshData::erase_mesh_function "
Erase MeshFunction with given name

*Arguments*
    name (str)
        The name of the mesh function
";

%feature("docstring")  dolfin::MeshData::erase_array "
Erase array with given name

*Arguments*
    name (str)
        The name of the array.
";

%feature("docstring")  dolfin::MeshData::str "
Return informal string representation (pretty-print)

*Arguments*
    verbose (bool)
        Flag to turn on additional output.

*Returns*
    str
        An informal representation.
";

// Documentation extracted from: (module=mesh, header=ParallelData.h)
%feature("docstring")  dolfin::ParallelData "
This class stores auxiliary mesh data for parallel computing.
";

%feature("docstring")  dolfin::ParallelData::ParallelData "
**Overloaded versions**

* ParallelData\ (mesh)

  Constructor

* ParallelData\ (data)

  Copy constructor
";

%feature("docstring")  dolfin::ParallelData::have_global_entity_indices "
Return true if global indices have been computed for entity of
dimension d
";

%feature("docstring")  dolfin::ParallelData::global_entity_indices "
**Overloaded versions**

* global_entity_indices\ (d)

  Return global indices (local-to-global) for entity of dimension d

* global_entity_indices\ (d)

  Return global indices (local-to-global) for entity of dimension d (const version)
";

%feature("docstring")  dolfin::ParallelData::global_entity_indices_as_vector "
Return global indices (local-to-global) for entity of dimension d in a vector
";

%feature("docstring")  dolfin::ParallelData::global_to_local_entity_indices "
**Overloaded versions**

* global_to_local_entity_indices\ (d)

  Return global-to-local indices for entity of dimension d

* global_to_local_entity_indices\ (d)

  Return global-to-local indices for entity of dimension d (const version)
";

%feature("docstring")  dolfin::ParallelData::shared_vertices "
**Overloaded versions**

* shared_vertices\ ()

  FIXME: Add description and use better name

* shared_vertices\ ()

  FIXME: Add description and use better name
";

%feature("docstring")  dolfin::ParallelData::exterior_facet "
**Overloaded versions**

* exterior_facet\ ()

  Return MeshFunction that is true for globally exterior facets,
  false otherwise

* exterior_facet\ ()

  Return MeshFunction that is true for globally exterior facets,
  false otherwise (const version)
";

// Documentation extracted from: (module=mesh, header=Mesh.h)
%feature("docstring")  dolfin::Mesh "
A :py:class:`Mesh` consists of a set of connected and numbered mesh entities.

Both the representation and the interface are
dimension-independent, but a concrete interface is also provided
for standard named mesh entities:

.. tabularcolumns:: |c|c|c|

+--------+-----------+-------------+
| Entity | Dimension | Codimension |
+========+===========+=============+
| Vertex |  0        |             |
+--------+-----------+-------------+
| Edge   |  1        |             |
+--------+-----------+-------------+
| Face   |  2        |             |
+--------+-----------+-------------+
| Facet  |           |      1      |
+--------+-----------+-------------+
| Cell   |           |      0      |
+--------+-----------+-------------+

When working with mesh iterators, all entities and connectivity
are precomputed automatically the first time an iterator is
created over any given topological dimension or connectivity.

Note that for efficiency, only entities of dimension zero
(vertices) and entities of the maximal dimension (cells) exist
when creating a :py:class:`Mesh`. Other entities must be explicitly created
by calling init(). For example, all edges in a mesh may be
created by a call to mesh.init(1). Similarly, connectivities
such as all edges connected to a given vertex must also be
explicitly created (in this case by a call to mesh.init(0, 1)).
";

%feature("docstring")  dolfin::Mesh::Mesh "
**Overloaded versions**

* Mesh\ ()

  Create empty mesh

* Mesh\ (mesh)

  Copy constructor.
  
  *Arguments*
      mesh (:py:class:`Mesh`)
          Object to be copied.

* Mesh\ (filename)

  Create mesh from data file.
  
  *Arguments*
      filename (str)
          Name of file to load.

* Mesh\ (local_mesh_data)

  Create a distributed mesh from local (per process) data.
  
  *Arguments*
      local_mesh_data (LocalMeshData)
          Data from which to build the mesh.
";

%feature("docstring")  dolfin::Mesh::operator= "
Assignment operator

*Arguments*
    mesh (:py:class:`Mesh`)
        Another :py:class:`Mesh` object.
";

%feature("docstring")  dolfin::Mesh::num_vertices "
Get number of vertices in mesh.

*Returns*
    int
        Number of vertices.

*Example*
    .. code-block:: python
    
        >>> mesh = dolfin.UnitSquare(2,2)
        >>> mesh.num_vertices()
        9
";

%feature("docstring")  dolfin::Mesh::num_edges "
Get number of edges in mesh.

*Returns*
    int
        Number of edges.

*Example*
    .. code-block:: python
    
        >>> mesh = dolfin.UnitSquare(2,2)
        >>> mesh.num_edges()
        0
        >>> mesh.init(1)
        16
        >>> mesh.num_edges()
        16
";

%feature("docstring")  dolfin::Mesh::num_faces "
Get number of faces in mesh.

*Returns*
    int
        Number of faces.

*Example*
    .. code-block:: python
    
        >>> mesh = dolfin.UnitSquare(2,2)
        >>> mesh.num_faces()
        8
";

%feature("docstring")  dolfin::Mesh::num_facets "
Get number of facets in mesh.

*Returns*
    int
        Number of facets.

*Example*
    .. code-block:: python
    
        >>> mesh = dolfin.UnitSquare(2,2)
        >>> mesh.num_facets()
        0
        >>> mesh.init(0,1)
        >>> mesh.num_facets()
        16
";

%feature("docstring")  dolfin::Mesh::num_cells "
Get number of cells in mesh.

*Returns*
    int
        Number of cells.

*Example*
    .. code-block:: python
    
        >>> mesh = dolfin.UnitSquare(2,2)
        >>> mesh.num_cells()
        8
";

%feature("docstring")  dolfin::Mesh::num_entities "
Get number of entities of given topological dimension.

*Arguments*
    d (int)
        Topological dimension.

*Returns*
    int
        Number of entities of topological dimension d.

*Example*
    .. code-block:: python
    
        >>> mesh = dolfin.UnitSquare(2,2)
        >>> mesh.init(0,1)
        >>> mesh.num_entities(0)
        9
        >>> mesh.num_entities(1)
        16
        >>> mesh.num_entities(2)
        8
";

%feature("docstring")  dolfin::Mesh::coordinates "
**Overloaded versions**

* coordinates\ ()

  Get vertex coordinates.
  
  *Returns*
      numpy.array(float)
          Coordinates of all vertices.
  
  *Example*
      .. code-block:: python
      
          >>> mesh = dolfin.UnitSquare(1,1)
          >>> mesh.coordinates()
          array([[ 0.,  0.],
                 [ 1.,  0.],
                 [ 0.,  1.],
                 [ 1.,  1.]])

* coordinates\ ()

  Return coordinates of all vertices (const version).
";

%feature("docstring")  dolfin::Mesh::cells "
Get cell connectivity.

*Returns*
    numpy.array(int)
        Connectivity for all cells.

*Example*
    .. code-block:: python
    
        >>> mesh = dolfin.UnitSquare(1,1)
        >>> mesh.cells()
        array([[0, 1, 3],
              [0, 2, 3]])
";

%feature("docstring")  dolfin::Mesh::size "
Get number of entities of given topological dimension.

*Arguments*
    dim (int)
        Topological dimension.

*Returns*
    int
        Number of entities of topological dimension d.

*Example*
    .. code-block:: python
    
        >>> mesh = dolfin.UnitSquare(2,2)
        >>> mesh.init(0,1)
        >>> mesh.size(0)
        9
        >>> mesh.size(1)
        16
        >>> mesh.size(2)
        8
";

%feature("docstring")  dolfin::Mesh::topology "
**Overloaded versions**

* topology\ ()

  Get mesh topology.
  
  *Returns*
      :py:class:`MeshTopology`
          The topology object associated with the mesh.

* topology\ ()

  Get mesh topology (const version).
";

%feature("docstring")  dolfin::Mesh::geometry "
**Overloaded versions**

* geometry\ ()

  Get mesh geometry.
  
  *Returns*
      :py:class:`MeshGeometry`
          The geometry object associated with the mesh.

* geometry\ ()

  Get mesh geometry (const version).
";

%feature("docstring")  dolfin::Mesh::domains "
**Overloaded versions**

* domains\ ()

  Get mesh (sub)domains.
  
  *Returns*
      :py:class:`MeshDomains`
          The (sub)domains associated with the mesh.

* domains\ ()

  Get mesh (sub)domains.
";

%feature("docstring")  dolfin::Mesh::intersection_operator "
**Overloaded versions**

* intersection_operator\ ()

  Get intersection operator.
  
  *Returns*
      :py:class:`IntersectionOperator`
          The intersection operator object associated with the mesh.

* intersection_operator\ ()

  Return intersection operator (const version);
";

%feature("docstring")  dolfin::Mesh::data "
**Overloaded versions**

* data\ ()

  Get mesh data.
  
  *Returns*
      :py:class:`MeshData`
          The mesh data object associated with the mesh.

* data\ ()

  Get mesh data (const version).
";

%feature("docstring")  dolfin::Mesh::parallel_data "
**Overloaded versions**

* parallel_data\ ()

  Get parallel mesh data.
  
  *Returns*
      :py:class:`ParallelData`
          The parallel data object associated with the mesh.

* parallel_data\ ()

  Get parallel mesh data (const version).
";

%feature("docstring")  dolfin::Mesh::type "
**Overloaded versions**

* type\ ()

  Get mesh cell type.
  
  *Returns*
      :py:class:`CellType`
          The cell type object associated with the mesh.

* type\ ()

  Get mesh cell type (const version).
";

%feature("docstring")  dolfin::Mesh::init "
**Overloaded versions**

* init\ (dim)

  Compute entities of given topological dimension.
  
  *Arguments*
      dim (int)
          Topological dimension.
  
  *Returns*
      int
          Number of created entities.

* init\ (d0, d1)

  Compute connectivity between given pair of dimensions.
  
  *Arguments*
      d0 (int)
          Topological dimension.
  
      d1 (int)
          Topological dimension.

* init\ ()

  Compute all entities and connectivity.
";

%feature("docstring")  dolfin::Mesh::clear "
Clear all mesh data.
";

%feature("docstring")  dolfin::Mesh::clean "
Clean out all auxiliary topology data. This clears all
topological data, except the connectivity between cells and
vertices.
";

%feature("docstring")  dolfin::Mesh::order "
Order all mesh entities.

.. seealso::

    UFC documentation (put link here!)
";

%feature("docstring")  dolfin::Mesh::ordered "
Check if mesh is ordered according to the UFC numbering convention.

*Returns*
    bool
        The return values is true iff the mesh is ordered.
";

%feature("docstring")  dolfin::Mesh::rotate "
**Overloaded versions**

* rotate\ (angle, axis=2)

  Rotate mesh around a coordinate axis through center of mass
  of all mesh vertices
  
  *Arguments*
      angle (float)
          The number of degrees (0-360) of rotation
      axis (int)
          The coordinate axis around which to rotate the mesh

* rotate\ (angle, axis, p)

  Rotate mesh around a coordinate axis through a given point
  
  *Arguments*
      angle (float)
          The number of degrees (0-360) of rotation
      axis (int)
          The coordinate axis around which to rotate the mesh
      point (:py:class:`Point`)
          The point around which to rotate the mesh
";

%feature("docstring")  dolfin::Mesh::move "
**Overloaded versions**

* move\ (boundary)

  Move coordinates of mesh according to new boundary coordinates.
  
  *Arguments*
      boundary (:py:class:`BoundaryMesh`)
          A mesh containing just the boundary cells.

* move\ (mesh)

  Move coordinates of mesh according to adjacent mesh with common global
  vertices.
  
  *Arguments*
      mesh (:py:class:`Mesh`)
          A :py:class:`Mesh` object.

* move\ (displacement)

  Move coordinates of mesh according to displacement function.
  
  *Arguments*
      displacement (:py:class:`Function`)
          A :py:class:`Function` object.
";

%feature("docstring")  dolfin::Mesh::smooth "
Smooth internal vertices of mesh by local averaging.

*Arguments*
    num_iterations (int)
        Number of iterations to perform smoothing,
        default value is 1.
";

%feature("docstring")  dolfin::Mesh::smooth_boundary "
Smooth boundary vertices of mesh by local averaging.

*Arguments*
    num_iterations (int)
        Number of iterations to perform smoothing,
        default value is 1.

    harmonic_smoothing (bool)
        Flag to turn on harmonics smoothing, default
        value is true.
";

%feature("docstring")  dolfin::Mesh::snap_boundary "
Snap boundary vertices of mesh to match given sub domain.

*Arguments*
    sub_domain (:py:class:`SubDomain`)
        A :py:class:`SubDomain` object.

    harmonic_smoothing (bool)
        Flag to turn on harmonics smoothing, default
        value is true.
";

%feature("docstring")  dolfin::Mesh::color "
**Overloaded versions**

* color\ (coloring_type)

  Color the cells of the mesh such that no two neighboring cells
  share the same color. A colored mesh keeps a
  CellFunction<unsigned int> named \"cell colors\" as mesh data which
  holds the colors of the mesh.
  
  *Arguments*
      coloring_type (str)
          Coloring type, specifying what relation makes two
          cells neighbors, can be one of \"vertex\", \"edge\" or
          \"facet\".
  
  *Returns*
      MeshFunction<unsigned int>
          The colors as a mesh function over the cells of the mesh.

* color\ (coloring_type)

  Color the cells of the mesh such that no two neighboring cells
  share the same color. A colored mesh keeps a
  CellFunction<unsigned int> named \"cell colors\" as mesh data which
  holds the colors of the mesh.
  
  *Arguments*
      coloring_type (numpy.array(int))
          Coloring type given as list of topological dimensions,
          specifying what relation makes two mesh entinties neighbors.
  
  *Returns*
      MeshFunction<unsigned int>
          The colors as a mesh function over entities of the mesh.
";

%feature("docstring")  dolfin::Mesh::intersected_cells "
**Overloaded versions**

* intersected_cells\ (point, cells)

  Compute all cells which are intersected by the given point.
  
  *Arguments*
      point (:py:class:`Point`)
          A :py:class:`Point` object.
  
      cells (set of int)
          A set of indices of all intersected cells.

* intersected_cells\ (points, cells)

  Compute all cells which are intersected by any of a vector of points.
  
  *Arguments*
      points (list of :py:class:`Point`)
          A vector of :py:class:`Point` objects.
  
      cells (set of int)
          A set of indices of all intersected cells.

* intersected_cells\ (entity, cells)

  Compute all cells which are intersected by the given entity.
  
  *Arguments*
      entity (:py:class:`MeshEntity`)
          A :py:class:`MeshEntity` object.
  
      cells (numpy.array(int))
          A vector of indices of all intersected cells.

* intersected_cells\ (entities, cells)

  Compute all cells which are intersected by any of a vector of entities.
  
  *Arguments*
      entities (list of :py:class:`MeshEntity`)
          A vector of :py:class:`MeshEntity` objects.
  
      cells (set of int)
          A vector of indices of all intersected cells.

* intersected_cells\ (mesh, cells)

  Compute all cells which are intersected by the given mesh.
  
  *Arguments*
      mesh (:py:class:`Mesh`)
          A :py:class:`Mesh` object.
  
      cells (set of int)
          A set of indices of all intersected cells.
";

%feature("docstring")  dolfin::Mesh::intersected_cell "
Find the cell (if any) containing the given point. If the point
is contained in several cells, the first cell is returned.

*Arguments*
    point (:py:class:`Point`)
        A :py:class:`Point` object.

*Returns*
    int
        The index of the cell containing the point. If no cell
        is found, the return value is -1.
";

%feature("docstring")  dolfin::Mesh::closest_point "
Find the point in the mesh closest to the given point.

*Arguments*
    point (:py:class:`Point`)
        A :py:class:`Point` object.

*Returns*
    :py:class:`Point`
        The closest point.
";

%feature("docstring")  dolfin::Mesh::closest_cell "
Find the cell in the mesh closest to the given point.

*Arguments*
    point (:py:class:`Point`)
        A :py:class:`Point` object.

*Returns*
    int
        The index of the closest cell.

*Example*
    .. code-block:: python
    
        >>> mesh = dolfin.UnitSquare(1, 1)
        >>> point = dolfin.Point(0.0, 2.0)
        >>> mesh.closest_cell(point)
        1
";

%feature("docstring")  dolfin::Mesh::closest_point_and_cell "
Find the point and corresponding cell closest to the given point.

*Arguments*
    point (:py:class:`Point`)
        A :py:class:`Point` object.

*Returns*
    Swig Object< std::pair<:py:class:`Point`, int> >
        A pair consisting of the closest point and corresponding cell index.
";

%feature("docstring")  dolfin::Mesh::distance "
Computes the distance between a given point and the mesh

*Arguments*
    point (:py:class:`Point`)
        A :py:class:`Point` object.

*Returns*
    float
        The distance to the mesh.
";

%feature("docstring")  dolfin::Mesh::hmin "
Compute minimum cell diameter.

*Returns*
    float
        The minimum cell diameter, the diameter is computed as
        two times the circumradius
        (http://mathworld.wolfram.com).

*Example*
    .. code-block:: python
    
        >>> mesh = dolfin.UnitSquare(2,2)
        >>> mesh.hmin()
        0.70710678118654757
";

%feature("docstring")  dolfin::Mesh::hmax "
Compute maximum cell diameter.

*Returns*
    float
        The maximum cell diameter, the diameter is computed as
        two times the circumradius
        (http://mathworld.wolfram.com).

*Example*
    .. code-block:: python
    
        >>> mesh = dolfin.UnitSquare(2,2)
        >>> mesh.hmax()
        0.70710678118654757
";

%feature("docstring")  dolfin::Mesh::str "
Informal string representation.

*Arguments*
    verbose (bool)
        Flag to turn on additional output.

*Returns*
    str
        An informal representation of the mesh.

*Example*
    .. code-block:: python
    
        >>> mesh = dolfin.UnitSquare(2,2)
        >>> mesh.str(False)
        '<Mesh of topological dimension 2 (triangles) with 9 vertices and 8 cells, ordered>'
";

// Documentation extracted from: (module=mesh, header=MeshEntity.h)
%feature("docstring")  dolfin::MeshEntity "
A MeshEntity represents a mesh entity associated with
a specific topological dimension of some :py:class:`Mesh`.
";

%feature("docstring")  dolfin::MeshEntity::MeshEntity "
**Overloaded versions**

* MeshEntity\ ()

  Default Constructor

* MeshEntity\ (mesh, dim, index)

  Constructor
  
  *Arguments*
      mesh (:py:class:`Mesh`)
          The mesh.
      dim (int)
          The topological dimension.
      index (int)
          The index.
";

%feature("docstring")  dolfin::MeshEntity::init "
Initialize mesh entity with given data

*Arguments*
    mesh (:py:class:`Mesh`)
        The mesh.
    dim (int)
        The topological dimension.
    index (int)
        The index.
";

%feature("docstring")  dolfin::MeshEntity::operator== "
Comparision Operator

*Arguments*
    another (:py:class:`MeshEntity`)
        Another mesh entity

*Returns*
    bool
        True if the two mesh entities are equal.
";

%feature("docstring")  dolfin::MeshEntity::operator!= "
Comparision Operator

*Arguments*
    another (MeshEntity)
        Another mesh entity.

*Returns*
    bool
        True if the two mesh entities are NOT equal.
";

%feature("docstring")  dolfin::MeshEntity::mesh "
Return mesh associated with mesh entity

*Returns*
    :py:class:`Mesh`
        The mesh.
";

%feature("docstring")  dolfin::MeshEntity::dim "
Return topological dimension

*Returns*
    int
        The dimension.
";

%feature("docstring")  dolfin::MeshEntity::index "
**Overloaded versions**

* index\ ()

  Return index of mesh entity
  
  *Returns*
      int
          The index.

* index\ (entity)

  Compute local index of given incident entity (error if not
  found)
  
  *Arguments*
      entity (:py:class:`MeshEntity`)
          The mesh entity.
  
  *Returns*
      int
          The local index of given entity.
";

%feature("docstring")  dolfin::MeshEntity::num_entities "
Return number of incident mesh entities of given topological dimension

*Arguments*
    dim (int)
        The topological dimension.

*Returns*
    int
        The number of incident MeshEntity objects of given dimension.
";

%feature("docstring")  dolfin::MeshEntity::entities "
Return array of indices for incident mesh entitites of given
topological dimension

*Arguments*
    dim (int)
        The topological dimension.

*Returns*
    int
        The index for incident mesh entities of given dimension.
";

%feature("docstring")  dolfin::MeshEntity::mesh_id "
Return unique mesh ID

*Returns*
    int
        The unique mesh ID.
";

%feature("docstring")  dolfin::MeshEntity::incident "
Check if given entity is incident

*Arguments*
    entity (:py:class:`MeshEntity`)
        The entity.

*Returns*
    bool
        True if the given entity is incident
";

%feature("docstring")  dolfin::MeshEntity::intersects "
**Overloaded versions**

* intersects\ (point)

  Check if given point intersects (using inexact but fast
  numerics)
  
  *Arguments*
      point (:py:class:`Point`)
          The point.
  
  *Returns*
      bool
          True if the given point intersects.

* intersects\ (entity)

  Check if given entity intersects (using inexact but fast
  numerics)
  
  *Arguments*
      entity (:py:class:`MeshEntity`)
          The mesh entity.
  
  *Returns*
      bool
          True if the given entity intersects.
";

%feature("docstring")  dolfin::MeshEntity::intersects_exactly "
**Overloaded versions**

* intersects_exactly\ (point)

  Check if given point intersects (using exact numerics)
  
  *Arguments*
      point (:py:class:`Point`)
          The point.
  
  *Returns*
      bool
          True if the given point intersects.

* intersects_exactly\ (entity)

  Check if given entity intersects (using exact numerics)
  
  *Arguments*
      entity (:py:class:`MeshEntity`)
          The mesh entity.
  
  *Returns*
      bool
          True if the given entity intersects.
";

%feature("docstring")  dolfin::MeshEntity::midpoint "
Compute midpoint of cell

*Returns*
    :py:class:`Point`
        The midpoint of the cell.
";

%feature("docstring")  dolfin::MeshEntity::bbox "
Returns a 3D bounding box of the mesh entity. For lower
dimension it may be a degenerated box.
";

%feature("docstring")  dolfin::MeshEntity::str "
Return informal string representation (pretty-print)

*Arguments*
    verbose (bool)
        Flag to turn on additional output.

*Returns*
    str
        An informal representation of the function space.
";

// Documentation extracted from: (module=mesh, header=MeshEntityIterator.h)
%feature("docstring")  dolfin::MeshEntityIterator "
MeshEntityIterator provides a common iterator for mesh entities
over meshes, boundaries and incidence relations. The basic use
is illustrated below.

*Example*
    The following example shows how to iterate over all mesh entities
    of a mesh of topological dimension dim:
    
    .. code-block:: python
    
        >>> for e in dolfin.cpp.entities(mesh, 1):
        ...     print e.index()
    
    The following example shows how to iterate over mesh entities of
    topological dimension dim connected (incident) to some mesh entity f:
    
    .. code-block:: python
    
        >>> f = dolfin.cpp.MeshEntity(mesh, 0, 0)
        >>> for e in dolfin.cpp.entities(f, 1):
        ...     print e.index()
In addition to the general iterator, a set of specific named iterators
are provided for entities of type :py:class:`Vertex`, :py:class:`Edge`, :py:class:`Face`, :py:class:`Facet`
and :py:class:`Cell`. These iterators are defined along with their respective
classes.
";

%feature("docstring")  dolfin::MeshEntityIterator::MeshEntityIterator "
**Overloaded versions**

* MeshEntityIterator\ ()

  Default constructor

* MeshEntityIterator\ (mesh, dim)

  Create iterator for mesh entities over given topological dimension

* MeshEntityIterator\ (entity, dim)

  Create iterator for entities of given dimension connected to given entity

* MeshEntityIterator\ (it)

  Copy constructor
";

%feature("docstring")  dolfin::MeshEntityIterator::operator++ "
Step to next mesh entity (prefix increment)
";

%feature("docstring")  dolfin::MeshEntityIterator::operator-- "
Step to the previous mesh entity (prefix decrease)
";

%feature("docstring")  dolfin::MeshEntityIterator::pos "
Return current position
";

%feature("docstring")  dolfin::MeshEntityIterator::operator== "
Comparison operator.
";

%feature("docstring")  dolfin::MeshEntityIterator::operator!= "
Comparison operator
";

%feature("docstring")  dolfin::MeshEntityIterator::operator* "
Dereference operator
";

%feature("docstring")  dolfin::MeshEntityIterator::operator-> "
Member access operator
";

%feature("docstring")  dolfin::MeshEntityIterator::operator[] "
Random access operator.
";

%feature("docstring")  dolfin::MeshEntityIterator::end "
Check if iterator has reached the end
";

%feature("docstring")  dolfin::MeshEntityIterator::end_iterator "
Provide a safeguard iterator pointing beyond the end of an iteration
process, either iterating over the mesh /or incident entities. Added to
be bit more like STL iterators, since many algorithms rely on a kind of
beyond iterator.
";

%feature("docstring")  dolfin::MeshEntityIterator::set_end "
Set pos to end position. To create a kind of mesh.end() iterator.
";

// Documentation extracted from: (module=mesh, header=SubsetIterator.h)
%feature("docstring")  dolfin::SubsetIterator "
A :py:class:`SubsetIterator` is similar to a :py:class:`MeshEntityIterator` but
iterates over a specified subset of the range of entities as
specified by a :py:class:`MeshFunction` that labels the entites.
";

%feature("docstring")  dolfin::SubsetIterator::SubsetIterator "
**Overloaded versions**

* SubsetIterator\ (labels, label)

  Create iterator for given mesh function. The iterator visits
  all entities that match the given label.

* SubsetIterator\ (subset_iter)

  Copy Constructor
";

%feature("docstring")  dolfin::SubsetIterator::operator++ "
Step to next mesh entity (prefix increment)
";

%feature("docstring")  dolfin::SubsetIterator::operator== "
Comparison operator
";

%feature("docstring")  dolfin::SubsetIterator::operator!= "
Comparison operator
";

%feature("docstring")  dolfin::SubsetIterator::operator* "
Dereference operator
";

%feature("docstring")  dolfin::SubsetIterator::operator-> "
Member access operator
";

%feature("docstring")  dolfin::SubsetIterator::end "
Check if iterator has reached the end
";

%feature("docstring")  dolfin::SubsetIterator::set_end "
Set pos to end position. To create a kind of mesh.end() iterator.
";

// Documentation extracted from: (module=mesh, header=Point.h)
%feature("docstring")  dolfin::Point "
A Point represents a point in :math:`\mathbb{R}^3` with
coordinates :math:`x, y, z,` or alternatively, a vector in
:math:`\mathbb{R}^3`, supporting standard operations like the
norm, distances, scalar and vector products etc.
";

%feature("docstring")  dolfin::Point::Point "
**Overloaded versions**

* Point\ (x=0.0, y=0.0, z=0.0)

  Create a point at (x, y, z). Default value (0, 0, 0).
  
  *Arguments*
      x (float)
          The x-coordinate.
      y (float)
          The y-coordinate.
      z (float)
          The z-coordinate.

* Point\ (dim, x)

  Create point from array
  
  *Arguments*
      dim (int)
          Dimension of the array.
      x (float)
          The array to create a Point from.

* Point\ (p)

  Copy constructor
  
  *Arguments*
      p (:py:class:`Point`)
          The object to be copied.

* Point\ (point)

  Constructor taking a CGAL::Point_3. Allows conversion from
  CGAL Point_3 class to Point class.
";

%feature("docstring")  dolfin::Point::operator[] "
**Overloaded versions**

* operator[]\ (i)

  Return address of coordinate in direction i
  
  *Arguments*
      i (int)
          Direction.
  
  *Returns*
      float
          Adress of coordinate in the given direction.

* operator[]\ (i)

  Return coordinate in direction i
  
  *Arguments*
      i (int)
          Direction.
  
  *Returns*
      float
          The coordinate in the given direction.
";

%feature("docstring")  dolfin::Point::x "
Return x-coordinate

*Returns*
    float
        The x-coordinate.
";

%feature("docstring")  dolfin::Point::y "
Return y-coordinate

*Returns*
    float
        The y-coordinate.
";

%feature("docstring")  dolfin::Point::z "
Return z-coordinate

*Returns*
    float
        The z-coordinate.
";

%feature("docstring")  dolfin::Point::coordinates "
**Overloaded versions**

* coordinates\ ()

  Return coordinate array
  
  *Returns*
      list of doubles
          The coordinates.

* coordinates\ ()

  Return coordinate array (const. version)
  
  *Returns*
      list of doubles
          The coordinates.
";

%feature("docstring")  dolfin::Point::operator+ "
Compute sum of two points
";

%feature("docstring")  dolfin::Point::operator- "
Compute difference of two points
";

%feature("docstring")  dolfin::Point::operator+= "
Add given point
";

%feature("docstring")  dolfin::Point::operator-= "
Subtract given point
";

%feature("docstring")  dolfin::Point::operator* "
**Overloaded versions**

* operator*\ (a)

  Multiplication with scalar

* operator*\ (a, p)

  Multiplication with scalar
";

%feature("docstring")  dolfin::Point::operator*= "
Incremental multiplication with scalar
";

%feature("docstring")  dolfin::Point::operator/ "
Division by scalar
";

%feature("docstring")  dolfin::Point::operator/= "
Incremental division by scalar
";

%feature("docstring")  dolfin::Point::operator= "
Assignment operator
";

%feature("docstring")  dolfin::Point::operator CGAL::Point_3<Kernel> "
Conversion operator to appropriate CGAL Point_3 class.
";

%feature("docstring")  dolfin::Point::bbox "
Provides a CGAL bounding box, using conversion operator.
";

%feature("docstring")  dolfin::Point::distance "
Compute distance to given point

*Arguments*
    p (:py:class:`Point`)
        The point to compute distance to.

*Returns*
    float
        The distance.

*Example*
    .. note::
    
        No example code available for this function.
";

%feature("docstring")  dolfin::Point::norm "
Compute norm of point representing a vector from the origin

*Returns*
    float
        The (Euclidean) norm of the vector from the origin to
        the point.

*Example*
    .. note::
    
        No example code available for this function.
";

%feature("docstring")  dolfin::Point::cross "
Compute cross product with given vector

*Arguments*
    p (:py:class:`Point`)
        Another point.

*Returns*
    Point
        The cross product.
";

%feature("docstring")  dolfin::Point::dot "
Compute dot product with given vector

*Arguments*
    p (:py:class:`Point`)
        Another point.

*Returns*
    float
        The dot product.

*Example*
    .. note::
    
        No example code available for this function.
";

%feature("docstring")  dolfin::Point::str "
Return informal string representation (pretty-print)

*Arguments*
    verbose (bool)
        Flag to turn on additional output.

*Returns*
    str
        An informal representation of the function space.
";

// Documentation extracted from: (module=mesh, header=Vertex.h)
%feature("docstring")  dolfin::Vertex "
A Vertex is a MeshEntity of topological dimension 0.
";

%feature("docstring")  dolfin::Vertex::Vertex "
**Overloaded versions**

* Vertex\ (mesh, index)

  Create vertex on given mesh

* Vertex\ (entity)

  Create vertex from mesh entity
";

%feature("docstring")  dolfin::Vertex::x "
**Overloaded versions**

* x\ (i)

  Return value of vertex coordinate i

* x\ ()

  Return array of vertex coordinates (const version)
";

%feature("docstring")  dolfin::Vertex::point "
Return vertex coordinates as a 3D point value
";

%feature("docstring")  dolfin::VertexIterator "
A VertexIterator is a MeshEntityIterator of topological dimension 0.
";

%feature("docstring")  dolfin::VertexFunction "
A VertexFunction is a MeshFunction of topological dimension 0.
";

// Documentation extracted from: (module=mesh, header=Edge.h)
%feature("docstring")  dolfin::Edge "
An Edge is a :py:class:`MeshEntity` of topological dimension 1.
";

%feature("docstring")  dolfin::Edge::Edge "
**Overloaded versions**

* Edge\ (mesh, index)

  Create edge on given mesh
  
  *Arguments*
      mesh (:py:class:`Mesh`)
          The mesh.
      index (int)
          Index of the edge.

* Edge\ (entity)

  Create edge from mesh entity
  
  *Arguments*
      entity (:py:class:`MeshEntity`)
          The mesh entity to create an edge from.
";

%feature("docstring")  dolfin::Edge::length "
Compute Euclidean length of edge

*Returns*
    float
        Euclidean length of edge.

*Example*
    .. note::
    
        No example code available for this function.
";

%feature("docstring")  dolfin::Edge::dot "
Compute dot product between edge and other edge

*Arguments*
    edge (:py:class:`Edge`)
        Another edge.

*Returns*
    float
        The dot product.

*Example*
    .. note::
    
        No example code available for this function.
";

%feature("docstring")  dolfin::EdgeIterator "
An EdgeIterator is a :py:class:`MeshEntityIterator` of topological dimension 1.
";

%feature("docstring")  dolfin::EdgeFunction "
An EdgeFunction is a :py:class:`MeshFunction` of topological dimension 1.
";

// Documentation extracted from: (module=mesh, header=Face.h)
%feature("docstring")  dolfin::Face "
A Face is a MeshEntity of topological dimension 2.
";

%feature("docstring")  dolfin::Face::Face "
Constructor
";

%feature("docstring")  dolfin::Face::area "
Calculate the area of the face (triangle)
";

%feature("docstring")  dolfin::Face::normal "
**Overloaded versions**

* normal\ (i)

  Compute component i of the normal to the face

* normal\ ()

  Compute normal to the face
";

%feature("docstring")  dolfin::FaceIterator "
A FaceIterator is a MeshEntityIterator of topological dimension 2.
";

%feature("docstring")  dolfin::FaceFunction "
A FaceFunction is a MeshFunction of topological dimension 2.
";

// Documentation extracted from: (module=mesh, header=Facet.h)
%feature("docstring")  dolfin::Facet "
A Facet is a MeshEntity of topological codimension 1.
";

%feature("docstring")  dolfin::Facet::Facet "
Constructor
";

%feature("docstring")  dolfin::Facet::normal "
**Overloaded versions**

* normal\ (i)

  Compute component i of the normal to the facet

* normal\ ()

  Compute normal to the facet
";

%feature("docstring")  dolfin::Facet::exterior "
Return true if facet is an exterior facet (relative to global mesh,
so this function will return false for facets on partition boundaries)
Facet connectivity must be initialized before calling this function.
";

%feature("docstring")  dolfin::Facet::adjacent_cells "
Return adjacent cells. An optional argument that lists for
each facet the index of the first cell may be given to specify
the ordering of the two cells. If not specified, the ordering
will depend on the (arbitrary) ordering of the mesh
connectivity.
";

%feature("docstring")  dolfin::FacetIterator "
A FacetIterator is a MeshEntityIterator of topological codimension 1.
";

%feature("docstring")  dolfin::FacetFunction "
A FacetFunction is a MeshFunction of topological codimension 1.
";

// Documentation extracted from: (module=mesh, header=Cell.h)
%feature("docstring")  dolfin::Cell "
A Cell is a :py:class:`MeshEntity` of topological codimension 0.
";

%feature("docstring")  dolfin::Cell::Cell "
**Overloaded versions**

* Cell\ ()

  Create empty cell

* Cell\ (mesh, index)

  Create cell on given mesh with given index
  
  *Arguments*
      mesh (:py:class:`Mesh`)
          The mesh.
      index (int)
          The index.
";

%feature("docstring")  dolfin::Cell::type "
Return type of cell
";

%feature("docstring")  dolfin::Cell::orientation "
Compute orientation of cell

*Returns*
    float
        Orientation of the cell (0 is right, 1 is left).
";

%feature("docstring")  dolfin::Cell::volume "
Compute (generalized) volume of cell

*Returns*
    float
        The volume of the cell.

*Example*
    .. note::
    
        No example code available for this function.
";

%feature("docstring")  dolfin::Cell::diameter "
Compute diameter of cell

*Returns*
    float
        The diameter of the cell.

*Example*
    .. note::
    
        No example code available for this function.
";

%feature("docstring")  dolfin::Cell::normal "
**Overloaded versions**

* normal\ (facet, i)

  Compute component i of normal of given facet with respect to the cell
  
  *Arguments*
      facet (int)
          Index of facet.
      i (int)
          Component.
  
  *Returns*
      float
          Component i of the normal of the facet.

* normal\ (facet)

  Compute normal of given facet with respect to the cell
  
  *Arguments*
      facet (int)
          Index of facet.
  
  *Returns*
      :py:class:`Point`
          Normal of the facet.
";

%feature("docstring")  dolfin::Cell::facet_area "
Compute the area/length of given facet with respect to the cell

*Arguments*
    facet (int)
        Index of the facet.

*Returns*
    float
        Area/length of the facet.
";

%feature("docstring")  dolfin::Cell::order "
Order entities locally

*Arguments*
    global_vertex_indices (:py:class:`MeshFunction`)
        The global vertex indices.
";

%feature("docstring")  dolfin::Cell::ordered "
Check if entities are ordered

*Arguments*
    global_vertex_indices (:py:class:`MeshFunction`)
        The global vertex indices.

*Returns*
    bool
        True if ordered.
";

%feature("docstring")  dolfin::CellIterator "
A CellIterator is a MeshEntityIterator of topological codimension 0.
";

%feature("docstring")  dolfin::CellFunction "
A CellFunction is a MeshFunction of topological codimension 0.
";

// Documentation extracted from: (module=mesh, header=FacetCell.h)
%feature("docstring")  dolfin::FacetCell "
This class represents a cell in a mesh incident to a facet on
the boundary. It is useful in cases where one needs to iterate
over a boundary mesh and access the corresponding cells in the
original mesh.
";

%feature("docstring")  dolfin::FacetCell::FacetCell "
Create cell on mesh corresponding to given facet (cell) on boundary
";

%feature("docstring")  dolfin::FacetCell::facet_index "
Return local index of facet with respect to the cell
";

// Documentation extracted from: (module=mesh, header=MeshConnectivity.h)
%feature("docstring")  dolfin::MeshConnectivity "
Mesh connectivity stores a sparse data structure of connections
(incidence relations) between mesh entities for a fixed pair of
topological dimensions.

The connectivity can be specified either by first giving the
number of entities and the number of connections for each entity,
which may either be equal for all entities or different, or by
giving the entire (sparse) connectivity pattern.
";

%feature("docstring")  dolfin::MeshConnectivity::MeshConnectivity "
**Overloaded versions**

* MeshConnectivity\ (d0, d1)

  Create empty connectivity between given dimensions (d0 -- d1)

* MeshConnectivity\ (connectivity)

  Copy constructor
";

%feature("docstring")  dolfin::MeshConnectivity::operator= "
Assignment
";

%feature("docstring")  dolfin::MeshConnectivity::empty "
Return true if the total number of connections is equal to zero
";

%feature("docstring")  dolfin::MeshConnectivity::size "
**Overloaded versions**

* size\ ()

  Return total number of connections

* size\ (entity)

  Return number of connections for given entity
";

%feature("docstring")  dolfin::MeshConnectivity::operator "
**Overloaded versions**

* operator\ (entity)

  Return array of connections for given entity

* operator\ ()

  Return contiguous array of connections for all entities
";

%feature("docstring")  dolfin::MeshConnectivity::clear "
Clear all data
";

%feature("docstring")  dolfin::MeshConnectivity::init "
**Overloaded versions**

* init\ (num_entities, num_connections)

  Initialize number of entities and number of connections (equal for all)

* init\ (num_connections)

  Initialize number of entities and number of connections (individually)
";

%feature("docstring")  dolfin::MeshConnectivity::set "
**Overloaded versions**

* set\ (entity, connection, pos)

  Set given connection for given entity

* set\ (entity, connections)

  Set all connections for given entity

* set\ (entity, connections)

  Set all connections for given entity

* set\ (connections)

  Set all connections for all entities (T is a container, e.g.
  a std::vector<uint>, std::set<uint>, etc)
";

%feature("docstring")  dolfin::MeshConnectivity::str "
Return informal string representation (pretty-print)
";

// Documentation extracted from: (module=mesh, header=MeshEditor.h)
%feature("docstring")  dolfin::MeshEditor "
A simple mesh editor for creating simplicial meshes in 1D, 2D
and 3D.
";

%feature("docstring")  dolfin::MeshEditor::MeshEditor "
Constructor
";

%feature("docstring")  dolfin::MeshEditor::open "
**Overloaded versions**

* open\ (mesh, tdim, gdim)

  Open mesh of given topological and geometrical dimension
  
  *Arguments*
      mesh (:py:class:`Mesh`)
          The mesh to open.
      tdim (int)
          The topological dimension.
      gdim (int)
          The geometrical dimension.
  
  *Example*
      .. note::
      
          No example code available for this function.

* open\ (mesh, type, tdim, gdim)

  Open mesh of given cell type, topological and geometrical dimension
  
  *Arguments*
      mesh (:py:class:`Mesh`)
          The mesh to open.
      type (CellType::Type)
          Cell type.
      tdim (int)
          The topological dimension.
      gdim (int)
          The geometrical dimension.

* open\ (mesh, type, tdim, gdim)

  Open mesh of given cell type, topological and geometrical dimension
  
  *Arguments*
      mesh (:py:class:`Mesh`)
          The mesh to open.
      type (str)
          Cell type.
      tdim (int)
          The topological dimension.
      gdim (int)
          The geometrical dimension.
";

%feature("docstring")  dolfin::MeshEditor::init_vertices "
Specify number of vertices

*Arguments*
    num_vertices (int)
        The number of vertices.

*Example*
    .. note::
    
        No example code available for this function.
";

%feature("docstring")  dolfin::MeshEditor::init_higher_order_vertices "
Specify number of vertices

*Arguments*
    num_higher_order_vertices (int)
        The number of higher order vertices.
";

%feature("docstring")  dolfin::MeshEditor::init_cells "
Specify number of cells

*Arguments*
    num_cells (int)
        The number of cells.

*Example*
    .. note::
    
        No example code available for this function.
";

%feature("docstring")  dolfin::MeshEditor::init_higher_order_cells "
Specify number of cells

*Arguments*
    num_higher_order_cells (int)
        The number of higher order cells.
    num_higher_order_cell_dof (int)
        The number of cell dofs.
";

%feature("docstring")  dolfin::MeshEditor::set_affine_cell_indicator "
Set boolean indicator inside MeshGeometry
";

%feature("docstring")  dolfin::MeshEditor::add_vertex "
**Overloaded versions**

* add_vertex\ (v, p)

  Add vertex v at given point p
  
  *Arguments*
      v (int)
          The vertex (index).
      p (:py:class:`Point`)
          The point.

* add_vertex\ (v, x)

  Add vertex v at given coordinate x
  
  *Arguments*
      v (int)
          The vertex (index).
      x (float)
          The x-coordinate.

* add_vertex\ (v, x, y)

  Add vertex v at given coordinate (x, y)
  
  *Arguments*
      v (int)
          The vertex (index).
      x (float)
          The x-coordinate.
      y (float)
          The y-coordinate.
  
  *Example*
      .. note::
      
          No example code available for this function.

* add_vertex\ (v, x, y, z)

  Add vertex v at given coordinate (x, y, z)
  
  *Arguments*
      v (int)
          The vertex (index).
      x (float)
          The x-coordinate.
      y (float)
          The y-coordinate.
      z (float)
          The z-coordinate.
";

%feature("docstring")  dolfin::MeshEditor::add_higher_order_vertex "
**Overloaded versions**

* add_higher_order_vertex\ (v, p)

  Add vertex v at given point p
  
  *Arguments*
      v (int)
          The vertex (index).
      p (:py:class:`Point`)
          The point.

* add_higher_order_vertex\ (v, x)

  Add vertex v at given coordinate x
  
  *Arguments*
      v (int)
          The vertex (index).
      x (float)
          The x-coordinate.

* add_higher_order_vertex\ (v, x, y)

  Add vertex v at given coordinate (x, y)
  
  *Arguments*
      v (int)
          The vertex (index).
      x (float)
          The x-coordinate.
      y (float)
          The y-coordinate.

* add_higher_order_vertex\ (v, x, y, z)

  Add vertex v at given coordinate (x, y, z)
  
  *Arguments*
      v (int)
          The vertex (index).
      x (float)
          The x-coordinate.
      y (float)
          The y-coordinate.
      z (float)
          The z-coordinate.
";

%feature("docstring")  dolfin::MeshEditor::add_cell "
**Overloaded versions**

* add_cell\ (c, v)

  Add cell with given vertices
  
  *Arguments*
      c (int)
          The cell (index).
      v (numpy.array(int))
          The vertex indices

* add_cell\ (c, v0, v1)

  Add cell (interval) with given vertices
  
  *Arguments*
      c (int)
          The cell (index).
      v0 (int)
          Index of the first vertex.
      v1 (int)
          Index of the second vertex.

* add_cell\ (c, v0, v1, v2)

  Add cell (triangle) with given vertices
  
  *Arguments*
      c (int)
          The cell (index).
      v0 (int)
          Index of the first vertex.
      v1 (int)
          Index of the second vertex.
      v2 (int)
          Index of the third vertex.
  
  *Example*
      .. note::
      
          No example code available for this function.

* add_cell\ (c, v0, v1, v2, v3)

  Add cell (tetrahedron) with given vertices
  
  *Arguments*
      c (int)
          The cell (index).
      v0 (int)
          Index of the first vertex.
      v1 (int)
          Index of the second vertex.
      v2 (int)
          Index of the third vertex.
      v3 (int)
          Index of the fourth vertex.
";

%feature("docstring")  dolfin::MeshEditor::add_higher_order_cell_data "
Add higher order cell data (assume P2 triangle for now)

*Arguments*
    c (int)
        The cell (index).
    v0 (int)
        Index of the first vertex.
    v1 (int)
        Index of the second vertex.
    v2 (int)
        Index of the third vertex.
    v3 (int)
        Index of the fourth vertex.
    v4 (int)
        Index of the fifth vertex.
    v5 (int)
        Index of the sixth vertex.
";

%feature("docstring")  dolfin::MeshEditor::close "
Close mesh, finish editing, and order entities locally

*Arguments*
    order (bool)
        Order entities locally if true. Default values is true.

*Example*
    .. note::
    
        No example code available for this function.
";

// Documentation extracted from: (module=mesh, header=DynamicMeshEditor.h)
%feature("docstring")  dolfin::DynamicMeshEditor "
This class provides an interface for dynamic editing of meshes,
that is, when the number of vertices and cells are not known
a priori. If the number of vertices and cells are known a priori,
it is more efficient to use the default editor MeshEditor.
";

%feature("docstring")  dolfin::DynamicMeshEditor::DynamicMeshEditor "
Constructor
";

%feature("docstring")  dolfin::DynamicMeshEditor::open "
**Overloaded versions**

* open\ (mesh, type, tdim, gdim)

  Open mesh of given cell type, topological and geometrical dimension

* open\ (mesh, type, tdim, gdim)

  Open mesh of given cell type, topological and geometrical dimension
";

%feature("docstring")  dolfin::DynamicMeshEditor::add_vertex "
**Overloaded versions**

* add_vertex\ (v, p)

  Add vertex v at given point p

* add_vertex\ (v, x)

  Add vertex v at given coordinate x

* add_vertex\ (v, x, y)

  Add vertex v at given coordinate (x, y)

* add_vertex\ (v, x, y, z)

  Add vertex v at given coordinate (x, y, z)
";

%feature("docstring")  dolfin::DynamicMeshEditor::add_cell "
**Overloaded versions**

* add_cell\ (c, v)

  Add cell with given vertices

* add_cell\ (c, v0, v1)

  Add cell (interval) with given vertices

* add_cell\ (c, v0, v1, v2)

  Add cell (triangle) with given vertices

* add_cell\ (c, v0, v1, v2, v3)

  Add cell (tetrahedron) with given vertices
";

%feature("docstring")  dolfin::DynamicMeshEditor::close "
Close mesh, finish editing, and order entities locally
";

// Documentation extracted from: (module=mesh, header=LocalMeshValueCollection.h)
%feature("docstring")  dolfin::LocalMeshValueCollection "
This class stores mesh data on a local processor corresponding
to a portion of a MeshValueCollection.
";

%feature("docstring")  dolfin::LocalMeshValueCollection::LocalMeshValueCollection "
Create local mesh data for given LocalMeshValueCollection
";

%feature("docstring")  dolfin::LocalMeshValueCollection::dim "
Return dimension of cell entity
";

%feature("docstring")  dolfin::LocalMeshValueCollection::values "
Return data
";

// Documentation extracted from: (module=mesh, header=MeshFunction.h)
%feature("docstring")  dolfin::MeshFunction "
A MeshFunction is a function that can be evaluated at a set of
mesh entities. A MeshFunction is discrete and is only defined
at the set of mesh entities of a fixed topological dimension.
A MeshFunction may for example be used to store a global
numbering scheme for the entities of a (parallel) mesh, marking
sub domains or boolean markers for mesh refinement.
";

%feature("docstring")  dolfin::MeshFunction::MeshFunction "
**Overloaded versions**

* MeshFunction\ ()

  Create empty mesh function

* MeshFunction\ (mesh)

  Create empty mesh function on given mesh
  
  *Arguments*
      mesh (:py:class:`Mesh`)
          The mesh to create mesh function on.

* MeshFunction\ (mesh, dim)

  Create mesh function of given dimension on given mesh
  
  *Arguments*
      mesh (:py:class:`Mesh`)
          The mesh to create mesh function on.
      dim (int)
          The mesh entity dimension for the mesh function.

* MeshFunction\ (mesh, dim, value)

  Create mesh of given dimension on given mesh and initialize
  to a value
  
  *Arguments*
      mesh (:py:class:`Mesh`)
          The mesh to create mesh function on.
      dim (int)
          The mesh entity dimension.
      value (T)
          The value.

* MeshFunction\ (mesh, filename)

  Create function from data file
  
  *Arguments*
      mesh (:py:class:`Mesh`)
          The mesh to create mesh function on.
      filename (str)
          The filename to create mesh function from.

* MeshFunction\ (mesh, value_collection)

  Create function from a MeshValueCollecion
  
  *Arguments*
      mesh (:py:class:`Mesh`)
          The mesh to create mesh function on.
      value_collection (:py:class:`MeshValueCollection`)
          The mesh value collection for the mesh function data.

* MeshFunction\ (f)

  Copy constructor
  
  *Arguments*
      f (:py:class:`MeshFunction`)
          The object to be copied.
";

%feature("docstring")  dolfin::MeshFunction::operator= "
**Overloaded versions**

* operator=\ (f)

  Assign mesh function to other mesh function
  Assignment operator
  
  *Arguments*
      f (:py:class:`MeshFunction`)
          A :py:class:`MeshFunction` object to asssign to another MeshFunction.

* operator=\ (mesh)

  Assignment operator
  
  *Arguments*
      mesh (:py:class:`MeshValueCollection`)
          A :py:class:`MeshValueCollection` object used to construct a MeshFunction.

* operator=\ (value)

  Set all values to given value
";

%feature("docstring")  dolfin::MeshFunction::mesh "
Return mesh associated with mesh function

*Returns*
    :py:class:`Mesh`
        The mesh.
";

%feature("docstring")  dolfin::MeshFunction::dim "
Return topological dimension

*Returns*
    int
        The dimension.
";

%feature("docstring")  dolfin::MeshFunction::empty "
Return true if empty

*Returns*
    bool
        True if empty.
";

%feature("docstring")  dolfin::MeshFunction::size "
Return size (number of entities)

*Returns*
    int
        The size.
";

%feature("docstring")  dolfin::MeshFunction::values "
**Overloaded versions**

* values\ ()

  Return array of values (const. version)
  
  *Returns*
      T
          The values.

* values\ ()

  Return array of values
  
  *Returns*
      T
          The values.
";

%feature("docstring")  dolfin::MeshFunction::operator[] "
**Overloaded versions**

* operator[]\ (entity)

  Return value at given mesh entity
  
  *Arguments*
      entity (:py:class:`MeshEntity`)
          The mesh entity.
  
  *Returns*
      T
          The value at the given entity.

* operator[]\ (entity)

  Return value at given mesh entity (const version)
  
  *Arguments*
      entity (:py:class:`MeshEntity`)
          The mesh entity.
  
  *Returns*
      T
          The value at the given entity.

* operator[]\ (index)

  Return value at given index
  
  *Arguments*
      index (int)
          The index.
  
  *Returns*
      T
          The value at the given index.

* operator[]\ (index)

  Return value at given index  (const version)
  
  *Arguments*
      index (int)
          The index.
  
  *Returns*
      T
          The value at the given index.
";

%feature("docstring")  dolfin::MeshFunction::init "
**Overloaded versions**

* init\ (dim)

  Initialize mesh function for given topological dimension
  
  *Arguments*
      dim (int)
          The dimension.

* init\ (dim, size)

  Initialize mesh function for given topological dimension of
  given size
  
  *Arguments*
      dim (int)
          The dimension.
      size (int)
          The size.

* init\ (mesh, dim)

  Initialize mesh function for given topological dimension
  
  *Arguments*
      mesh (:py:class:`Mesh`)
          The mesh.
      dim (int)
          The dimension.

* init\ (mesh, dim, size)

  Initialize mesh function for given topological dimension of
  given size
  
  *Arguments*
      mesh (:py:class:`Mesh`)
          The mesh.
      dim (int)
          The dimension.
      size (int)
          The size.
";

%feature("docstring")  dolfin::MeshFunction::set_value "
**Overloaded versions**

* set_value\ (index, value)

  Set value at given index
  
  *Arguments*
      index (int)
          The index.
      value (T)
          The value.

* set_value\ (index, value, mesh)

  Compatibility function for use in SubDomains
";

%feature("docstring")  dolfin::MeshFunction::set_values "
Set values

*Arguments*
    values (std::vector<T>)
        The values.
";

%feature("docstring")  dolfin::MeshFunction::set_all "
Set all values to given value

*Arguments*
    value (T)
        The value to set all values to.
";

%feature("docstring")  dolfin::MeshFunction::str "
Return informal string representation (pretty-print)

*Arguments*
    verbose (bool)
        Flag to turn on additional output.

*Returns*
    str
        An informal representation.
";

// Documentation extracted from: (module=mesh, header=MeshPartitioning.h)
%feature("docstring")  dolfin::MeshPartitioning "
This class partitions and distributes a mesh based on
partitioned local mesh data. Note that the local mesh data will
also be repartitioned and redistributed during the computation
of the mesh partitioning.

After partitioning, each process has a local mesh and set of
mesh data that couples the meshes together.

The following mesh data is created:

1. \"global entity indices 0\" (MeshFunction<uint>)

This maps each local vertex to its global index.

2. \"overlap\" (std::map<uint, std::vector<uint> >)

This maps each shared vertex to a list of the processes sharing
the vertex.

3. \"global entity indices %d\" (MeshFunction<uint>)

After partitioning, the function number_entities() may be called
to create global indices for all entities of a given topological
dimension. These are stored as mesh data (MeshFunction<uint>)
named

   \"global entity indices 1\"
   \"global entity indices 2\"
   etc

4. \"num global entities\" (std::vector<uint>)

The function number_entities also records the number of global
entities for the dimension of the numbered entities in the array
named \"num global entities\". This array has size D + 1, where D
is the topological dimension of the mesh. This array is
initially created by the mesh and then contains only the number
entities of dimension 0 (vertices) and dimension D (cells).
";

%feature("docstring")  dolfin::MeshPartitioning::build_distributed_mesh "
**Overloaded versions**

* build_distributed_mesh\ (mesh)

  Build a partitioned mesh based on local meshes

* build_distributed_mesh\ (mesh, data)

  Build a partitioned mesh based on local mesh data
";

%feature("docstring")  dolfin::MeshPartitioning::number_entities "
Create global entity indices for entities of dimension d
";

%feature("docstring")  dolfin::MeshPartitioning::partition "
Create a partitioned mesh based on local mesh data
";

%feature("docstring")  dolfin::MeshPartitioning::build_mesh_domains "
Create and attach distributed MeshDomains from local_data
";

%feature("docstring")  dolfin::MeshPartitioning::build_mesh_value_collection "
Create and attach distributed MeshDomains from local_data
[entry, (cell_index, local_index, value)]
";

// Documentation extracted from: (module=mesh, header=MeshValueCollection.h)
%feature("docstring")  dolfin::MeshValueCollection "
The MeshValueCollection class can be used to store data
associated with a subset of the entities of a mesh of a given
topological dimension. It differs from the MeshFunction class in
two ways. First, data does not need to be associated with all
entities (only a subset). Second, data is associated with
entities through the corresponding cell index and local entity
number (relative to the cell), not by global entity index, which
means that data may be stored robustly to file.
";

%feature("docstring")  dolfin::MeshValueCollection::MeshValueCollection "
**Overloaded versions**

* MeshValueCollection\ ()

  Create empty mesh value collection
  

* MeshValueCollection\ (dim)

  Create empty mesh value collection of given dimension
  
  *Arguments*
      dim (int)
          The mesh entity dimension for the mesh value collection.

* MeshValueCollection\ (mesh_function)

  Create a mesh value collection from a MeshFunction
  
  *Arguments*
      mesh_function (:py:class:`MeshFunction`)
          The mesh function for creating a MeshValueCollection.

* MeshValueCollection\ (mesh, filename, dim)

  Create a mesh value collection from a file.
  
  *Arguments*
      mesh (Mesh)
          A mesh associated with the collection. The mesh is used to
          map collection values to the appropriate process.
      filename (str)
          The XML file name.
      dim (int)
          The mesh entity dimension for the mesh value collection.
";

%feature("docstring")  dolfin::MeshValueCollection::operator= "
**Overloaded versions**

* operator=\ (mesh_function)

  Assignment operator
  
  *Arguments*
      mesh_function (:py:class:`MeshFunction`)
          A :py:class:`MeshFunction` object used to construct a MeshValueCollection.

* operator=\ (mesh_value_collection)

  Assignment operator
  
  *Arguments*
      mesh_value_collection (:py:class:`MeshValueCollection`)
          A :py:class:`MeshValueCollection` object used to construct a MeshValueCollection.
";

%feature("docstring")  dolfin::MeshValueCollection::set_dim "
Set the topological dimension

*Arguments*
    dim (int)
        The mesh entity dimension for the mesh value collection.
";

%feature("docstring")  dolfin::MeshValueCollection::dim "
Return topological dimension

*Returns*
    int
        The dimension.
";

%feature("docstring")  dolfin::MeshValueCollection::empty "
Return true if the subset is empty

*Returns*
    bool
        True if the subset is empty.
";

%feature("docstring")  dolfin::MeshValueCollection::size "
Return size (number of entities in subset)

*Returns*
    int
        The size.
";

%feature("docstring")  dolfin::MeshValueCollection::set_value "
**Overloaded versions**

* set_value\ (cell_index, local_entity, value)

  Set marker value for given entity defined by a cell index and
  a local entity index
  
  *Arguments*
      cell_index (int)
          The index of the cell.
      local_entity (int)
          The local index of the entity relative to the cell.
      marker_value (T)
          The value of the marker.
  
  *Returns*
      bool
          True is a new value is inserted, false if overwriting
          an existing value.

* set_value\ (entity_index, value, mesh)

  Set value for given entity index
  
  *Arguments*
      entity_index (int)
          Index of the entity.
      value (T)
          The value of the marker.
      mesh (:py:class:`Mesh`)
          The mesh.
  
  *Returns*
      bool
          True is a new value is inserted, false if overwriting
          an existing value.
";

%feature("docstring")  dolfin::MeshValueCollection::get_value "
Get marker value for given entity defined by a cell index and
a local entity index

*Arguments*
    cell_index (int)
        The index of the cell.
    local_entity (int)
        The local index of the entity relative to the cell.

*Returns*
    marker_value (T)
        The value of the marker.
";

%feature("docstring")  dolfin::MeshValueCollection::values "
**Overloaded versions**

* values\ ()

  Get all values
  
  *Returns*
      std::map<std::pair<uint, uint>, T>
          A map from positions to values.

* values\ ()

  Get all values (const version)
  
  *Returns*
      std::map<std::pair<uint, uint>, T>
          A map from positions to values.
";

%feature("docstring")  dolfin::MeshValueCollection::clear "
Clear all values
";

%feature("docstring")  dolfin::MeshValueCollection::str "
Return informal string representation (pretty-print)

*Arguments*
    verbose (bool)
        Flag to turn on additional output.

*Returns*
    str
        An informal representation.
";

// Documentation extracted from: (module=mesh, header=MeshColoring.h)
%feature("docstring")  dolfin::MeshColoring "
This class computes colorings for a local mesh. It supports
vertex, edge, and facet-based colorings.
";

%feature("docstring")  dolfin::MeshColoring::color_cells "
Color the cells of a mesh for given coloring type, which can
be one of \"vertex\", \"edge\" or \"facet\".
";

%feature("docstring")  dolfin::MeshColoring::color "
Color the cells of a mesh for given coloring type specified by
topological dimension, which can be one of 0, 1 or D - 1.
";

%feature("docstring")  dolfin::MeshColoring::compute_colors "
Compute cell colors for given coloring type specified by
topological dimension, which can be one of 0, 1 or D - 1.
";

%feature("docstring")  dolfin::MeshColoring::type_to_dim "
Convert coloring type to topological dimension
";

// Documentation extracted from: (module=mesh, header=MeshRenumbering.h)
%feature("docstring")  dolfin::MeshRenumbering "
This class implements renumbering algorithms for meshes.
";

// Documentation extracted from: (module=mesh, header=MeshTransformation.h)
%feature("docstring")  dolfin::MeshTransformation::rotate "
**Overloaded versions**

* rotate\ (mesh, angle, axis)

  Rotate mesh around a coordinate axis through center of mass
  of all mesh vertices
  
  *Arguments*
      mesh (:py:class:`Mesh`)
          The mesh
      angle (float)
          The number of degrees (0-360) of rotation
      axis (int)
          The coordinate axis around which to rotate the mesh

* rotate\ (mesh, angle, axis, p)

  Rotate mesh around a coordinate axis through a given point
  
  *Arguments*
      mesh (:py:class:`Mesh`)
          The mesh
      angle (float)
          The number of degrees (0-360) of rotation
      axis (int)
          The coordinate axis around which to rotate the mesh
      point (:py:class:`Point`)
          The point around which to rotate the mesh
";

// Documentation extracted from: (module=mesh, header=LocalMeshData.h)
%feature("docstring")  dolfin::LocalMeshData::LocalMeshData "
**Overloaded versions**

* LocalMeshData\ ()

  Create empty local mesh data

* LocalMeshData\ (mesh)

  Create local mesh data for given mesh
";

%feature("docstring")  dolfin::LocalMeshData::str "
Return informal string representation (pretty-print)
";

%feature("docstring")  dolfin::LocalMeshData::clear "
Clear all data
";

%feature("docstring")  dolfin::LocalMeshData::extract_mesh_data "
Copy data from mesh
";

%feature("docstring")  dolfin::LocalMeshData::broadcast_mesh_data "
Broadcast mesh data from main process
";

%feature("docstring")  dolfin::LocalMeshData::receive_mesh_data "
Receive mesh data from main process
";

// Documentation extracted from: (module=mesh, header=SubDomain.h)
%feature("docstring")  dolfin::SubDomain "
This class defines the interface for definition of subdomains.
Alternatively, subdomains may be defined by a :py:class:`Mesh` and a
:py:class:`MeshFunction` <uint> over the mesh.
";

%feature("docstring")  dolfin::SubDomain::SubDomain "
Constructor
";

%feature("docstring")  dolfin::SubDomain::inside "
Return true for points inside the subdomain

*Arguments*
    x (numpy.array(float))
        The coordinates of the point.
    on_boundary (bool)
        True for points on the boundary.

*Returns*
    bool
        True for points inside the subdomain.
";

%feature("docstring")  dolfin::SubDomain::map "
Map coordinate x in domain H to coordinate y in domain G (used for
periodic boundary conditions)

*Arguments*
    x (numpy.array(float))
        The coordinates in domain H.
    unnamed (numpy.array(float))
        The coordinates in domain G.
";

%feature("docstring")  dolfin::SubDomain::snap "
Snap coordinate to boundary of subdomain

*Arguments*
    x (numpy.array(float))
        The coordinates.
";

%feature("docstring")  dolfin::SubDomain::mark_cells "
Set subdomain markers (uint) on cells for given subdomain number

*Arguments*
    mesh (:py:class:`Mesh`)
        The mesh to be marked.
    sub_domain (int)
        The subdomain number.
";

%feature("docstring")  dolfin::SubDomain::mark_facets "
Set subdomain markers (uint) on facets for given subdomain number

*Arguments*
    mesh (:py:class:`Mesh`)
        The mesh to be marked.
    sub_domain (int)
        The subdomain number.
";

%feature("docstring")  dolfin::SubDomain::mark "
**Overloaded versions**

* mark\ (mesh, dim, sub_domain)

  Set subdomain markers (uint) for given topological dimension
  and subdomain number
  
  *Arguments*
      mesh (:py:class:`Mesh`)
          The mesh to be marked.
      dim (int)
          The topological dimension of entities to be marked.
      sub_domain (int)
          The subdomain number.

* mark\ (sub_domains, sub_domain)

  Set subdomain markers (uint) for given subdomain number
  
  *Arguments*
      sub_domains (:py:class:`MeshFunction`)
          The subdomain markers.
      sub_domain (int)
          The subdomain number.

* mark\ (sub_domains, sub_domain)

  Set subdomain markers (int) for given subdomain number
  
  *Arguments*
      sub_domains (:py:class:`MeshFunction`)
          The subdomain markers.
      sub_domain (int)
          The subdomain number.

* mark\ (sub_domains, sub_domain)

  Set subdomain markers (double) for given subdomain number
  
  *Arguments*
      sub_domains (:py:class:`MeshFunction`)
          The subdomain markers.
      sub_domain (float)
          The subdomain number.

* mark\ (sub_domains, sub_domain)

  Set subdomain markers (bool) for given subdomain
  
  *Arguments*
      sub_domains (:py:class:`MeshFunction`)
          The subdomain markers.
      sub_domain (bool)
          The subdomain number.

* mark\ (sub_domains, sub_domain, mesh)

  Set subdomain markers (uint) for given subdomain number
  
  *Arguments*
      sub_domains (:py:class:`MeshValueCollection`)
          The subdomain markers.
      sub_domain (int)
          The subdomain number.
      mesn (:py:class:`Mesh`)
          The mesh.

* mark\ (sub_domains, sub_domain, mesh)

  Set subdomain markers (int) for given subdomain number
  
  *Arguments*
      sub_domains (:py:class:`MeshValueCollection`)
          The subdomain markers
      sub_domain (int)
          The subdomain number

* mark\ (sub_domains, sub_domain, mesh)

  Set subdomain markers (double) for given subdomain number
  
  *Arguments*
      sub_domains (:py:class:`MeshValueCollection`)
          The subdomain markers.
      sub_domain (float)
          The subdomain number

* mark\ (sub_domains, sub_domain, mesh)

  Set subdomain markers (bool) for given subdomain
  
  *Arguments*
      sub_domains (:py:class:`MeshValueCollection`)
          The subdomain markers
      sub_domain (bool)
          The subdomain number
";

%feature("docstring")  dolfin::SubDomain::geometric_dimension "
Return geometric dimension

*Returns*
    int
        The geometric dimension.
";

%feature("docstring")  dolfin::SubDomain::apply_markers "
Apply marker of type T (most likely an uint) to object of class
S (most likely MeshFunction or MeshValueCollection)
";

// Documentation extracted from: (module=mesh, header=SubMesh.h)
%feature("docstring")  dolfin::SubMesh "
A SubMesh is a mesh defined as a subset of a given mesh. It
provides a convenient way to create matching meshes for
multiphysics applications by creating meshes for subdomains as
subsets of a single global mesh. A mapping from the vertices of
the sub mesh to the vertices of the parent mesh is stored as the
mesh data named \"parent_vertex_indices\".
";

%feature("docstring")  dolfin::SubMesh::SubMesh "
**Overloaded versions**

* SubMesh\ (mesh, sub_domain)

  Create subset of given mesh marked by sub domain

* SubMesh\ (mesh, sub_domains, sub_domain)

  Create subset of given mesh marked by mesh function
";

%feature("docstring")  dolfin::SubMesh::init "
Create sub mesh
";

// Documentation extracted from: (module=mesh, header=DomainBoundary.h)
%feature("docstring")  dolfin::DomainBoundary "
This class provides a SubDomain which picks out the boundary of
a mesh, and provides a convenient way to specify boundary
conditions on the entire boundary of a mesh.
";

%feature("docstring")  dolfin::DomainBoundary::DomainBoundary "
Constructor
";

%feature("docstring")  dolfin::DomainBoundary::inside "
Return true for points on the boundary
";

// Documentation extracted from: (module=mesh, header=BoundaryMesh.h)
%feature("docstring")  dolfin::BoundaryMesh "
A BoundaryMesh is a mesh over the boundary of some given mesh.
";

%feature("docstring")  dolfin::BoundaryMesh::BoundaryMesh "
**Overloaded versions**

* BoundaryMesh\ ()

  Create an empty boundary mesh

* BoundaryMesh\ (mesh)

  Create boundary mesh from given mesh
";

%feature("docstring")  dolfin::BoundaryMesh::init_exterior_boundary "
Initialize exterior boundary of given mesh
";

%feature("docstring")  dolfin::BoundaryMesh::init_interior_boundary "
Initialize interior boundary of given mesh
";

%feature("docstring")  dolfin::BoundaryMesh::cell_map "
Get cell mapping from the boundary mesh to the original full mesh
";

%feature("docstring")  dolfin::BoundaryMesh::vertex_map "
Get vertex mapping from the boundary mesh to the original full mesh
";

// Documentation extracted from: (module=mesh, header=Interval.h)
%feature("docstring")  dolfin::Interval "
Interval mesh of the 1D line [a,b].  Given the number of cells
(nx) in the axial direction, the total number of intervals will
be nx and the total number of vertices will be (nx + 1).
";

%feature("docstring")  dolfin::Interval::Interval "
Constructor

*Arguments*
    nx (int)
        The number of cells.
    a (float)
        The minimum point (inclusive).
    b (float)
        The maximum point (inclusive).

*Example*
    .. note::
    
        No example code available for this function.
";

